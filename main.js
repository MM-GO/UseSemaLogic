/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  DebugLevel: () => DebugLevel,
  Default_profile: () => Default_profile,
  SemaLogicPluginComm: () => SemaLogicPluginComm3,
  default: () => SemaLogicPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/view.ts
var import_obsidian3 = require("obsidian");

// src/const.ts
var API_Defaults = {
  http: "http://",
  https: "https://",
  Base_URL: "service.semalogic.ddns.net",
  Port: "443",
  rules_parse: "/rules/parse",
  reset: "/reset",
  Version: "/APIVersion",
  PostDialect: "/dialect/define",
  RemoveDialect: "/dialect/remove",
  GetAPI: "/APIVersion",
  SID: "12345678",
  ShowContext: true,
  useUserPasswortforHTTP: true,
  HttpUser: "User",
  HttpPassword: "Password",
  viewheader: "SemaLogicView",
  AspUrl: "ASP-Service-URL.com/",
  AspEndpoint: "/plans/count"
};
var Value_Defaults = {
  updateInterval: 500
};
var semaLogicCommand = {
  command_start: "SemaLogic(",
  command_end: ")",
  showHelp: "show help",
  showVersion: "show version",
  getDialectwTemplate: "template",
  useDialect: "use ???dialectName???",
  define: "define",
  showParse: "show as",
  showFilter: "for",
  transfer: "transfer",
  transferEndpoint: "to endpoint",
  transferParam: "with param"
};
var semaLogicHelp = [
  [semaLogicCommand.command_start + "???" + semaLogicCommand.command_end, "You can define what SemaLogic should do for you by replacing ??? with one of the following SemaLogic commands:"],
  [semaLogicCommand.command_start + semaLogicCommand.showHelp + semaLogicCommand.command_end, "Show this help information"],
  [semaLogicCommand.command_start + semaLogicCommand.showVersion + semaLogicCommand.command_end, "Show the version of the SemaLogic-Service"],
  [semaLogicCommand.command_start + semaLogicCommand.define + semaLogicCommand.command_end, "After this inlinecommand and a space line comes e.g. a table that should be interpreted by SemaLogic (table, NTable, ZTable) with optional headerinterpretation- Expected format:\n(|Symbol||Level(n+1)|\n|---|---|\n|Level(1)|Level(n)|Value|)"],
  [`${semaLogicCommand.command_start + semaLogicCommand.showParse} %1 ${semaLogicCommand.showFilter} %2 ${semaLogicCommand.command_end}`, "show as - shows an output directly to the reading view ( with %1 you have to set the output type: 1|1 {picture, syemalogic, asp} and with %2 you could filter for an symbol by symbolname)"],
  [`${semaLogicCommand.command_start + semaLogicCommand.transfer} %1 ${semaLogicCommand.transferEndpoint} %2 ${semaLogicCommand.transferParam} %3 ${semaLogicCommand.command_end}`, "transfer - shows an (currently only) asp output directly to the asp.view from SemaLogicView ( with %1 you have to set the output type: 1|1 {asp} and with %2 you could set the endpoint and wuth %3 you could set queryparameter)"]
];
var rstypes_Semalogic = 0;
var rstypes_Picture = 3;
var rstypes_ASP = 6;
var rstypes_SemanticTree = 8;
var rulesettypesCommands = [
  ["SemaLogic", "SemaLogic"],
  ["technical", "SemaLogic"],
  ["semalogic", "SemaLogic"],
  ["Picture (SVG)", "SVG"],
  ["picture", "SVG"],
  ["SVG", "SVG"],
  ["ASP", "ASP.json"],
  ["asp", "ASP.json"],
  ["SemanticTree", "SemanticTree"]
];
var DebugLevelNames = [
  "DebugLevel_Off",
  "DebugLevel_Current_Dev",
  "DebugLevel_Important",
  "DebugLevel_Informative",
  "DebugLevel_Chatty",
  "DebugLevel_All"
];
var DebugLevMap = {
  "DebugLevel_Off": 0,
  "DebugLevel_Current_Dev": 1,
  "DebugLevel_Important": 2,
  "DebugLevel_Informative": 3,
  "DebugLevel_Chatty": 4,
  "DebugLevel_All": 5
};
var slTexts = {
  "HeaderSL": "SemaLogic.View"
};

// src/utils.ts
var import_obsidian = require("obsidian");
var import_obsidian2 = require("obsidian");
var searchForSemaLogicCommands = (el) => {
  for (let i = 0; i < el.childNodes.length; i++) {
    const child = el.childNodes[i];
    if (isSemaLogicCommand(child)) {
      return true;
    }
  }
  return false;
};
var isSemaLogicCommand = (n) => {
  var _a;
  return n.nodeType === Node.TEXT_NODE && Boolean((_a = n.textContent) == null ? void 0 : _a.startsWith(semaLogicCommand.command_start));
};
var replaceWithEmptyNode = (containerEl) => {
  const results = [];
  return results;
};
async function replaceWithCommandNode(containerEl, settings) {
  var _a, _b;
  let results = [];
  let found = false;
  let semaLogicCom = (_b = containerEl.textContent) == null ? void 0 : _b.substring(semaLogicCommand.command_start.length, (_a = containerEl.textContent) == null ? void 0 : _a.indexOf(semaLogicCommand.command_end)).toLowerCase();
  if (!found && (semaLogicCom == null ? void 0 : semaLogicCom.toString().substring(0, semaLogicCommand.showHelp.length)) == semaLogicCommand.showHelp) {
    results = await showHelp();
    found = true;
  }
  if (!found && (semaLogicCom == null ? void 0 : semaLogicCom.toString().substring(0, semaLogicCommand.showVersion.length)) == semaLogicCommand.showVersion) {
    results = await showVersion(settings);
    found = true;
  }
  if (!found && (semaLogicCom == null ? void 0 : semaLogicCom.toString().substring(0, semaLogicCommand.showParse.length)) == semaLogicCommand.showParse) {
    let rulesettype = "";
    let filter = "";
    for (let rule in rulesettypesCommands) {
      if (semaLogicCom.contains(rulesettypesCommands[rule][0])) {
        rulesettype = rulesettypesCommands[rule][1];
        const findfor = semaLogicCom.indexOf(semaLogicCommand.showFilter);
        if (findfor > 0) {
          let filter2 = semaLogicCom.substring(findfor + semaLogicCommand.showFilter.length);
          filter2 = filter2.trim();
        }
        break;
      }
    }
    if (!found) {
      results = await showHelp();
      found = true;
    }
    if (rulesettype != "") {
      results = await showParseWithFilter(filter, rulesettype, settings);
    }
    found = true;
  }
  if (!found) {
    results = replaceWithEmptyNode(containerEl);
  }
  return results;
}
var SemaLogicRenderedElement = class extends import_obsidian.MarkdownRenderChild {
  constructor({ containerEl, set }) {
    super(containerEl);
    this.mysettings = set;
  }
  async onload() {
    this.containerEl.setChildrenInPlace(
      await replaceWithCommandNode(this.containerEl, this.mysettings)
    );
  }
};
async function showHelp() {
  let results = [];
  let buildcontainerEl;
  if (DebugLevel >= DebugLevMap.DebugLevel_Informative) {
    console.log(semaLogicCommand.showHelp);
  }
  buildcontainerEl = createEl("table");
  let body = buildcontainerEl.createEl("body");
  let row = body.createEl("tr");
  row.createEl("td", { text: "SemaLogic-Commands-Help" });
  row.createEl("td", { text: "Description" });
  for (let i = 0; i < semaLogicHelp.length; i++) {
    const row2 = body.createEl("tr");
    row2.createEl("td", { text: semaLogicHelp[i][0] });
    row2.createEl("td", { text: semaLogicHelp[i][1] });
  }
  results.push(buildcontainerEl);
  return results;
}
async function showVersion(settings) {
  let results = [];
  let buildcontainerEl;
  let versiontext = "";
  if (DebugLevel >= DebugLevMap.DebugLevel_Informative) {
    console.log(semaLogicCommand.showVersion);
  }
  const version = await semaLogicGetVersion(settings).then(function(resultBuffer) {
    versiontext = resultBuffer;
  }).catch(
    function(resultBuffer) {
      versiontext = resultBuffer;
    }
  );
  if (DebugLevel >= DebugLevMap.DebugLevel_High) {
    console.log(`JSON-Text in Processor:${versiontext}`);
  }
  buildcontainerEl = createEl("table");
  const table = buildcontainerEl.createEl("table");
  const body = buildcontainerEl.createEl("body");
  const row = body.createEl("tr");
  row.createEl("td", { text: versiontext });
  results.push(buildcontainerEl);
  return results;
}
function sethttps(https) {
  let str;
  if (https) {
    str = API_Defaults.https;
  } else {
    str = API_Defaults.http;
  }
  return str;
}
function getHostPort(settings) {
  let adress = sethttps(settings.mySLSettings[settings.mySetting].myUseHttps);
  adress = adress + settings.mySLSettings[settings.mySetting].myBaseURL;
  if (settings.mySLSettings[settings.mySetting].myPort != "") {
    adress = adress + ":" + settings.mySLSettings[settings.mySetting].myPort;
  }
  if (DebugLevel >= DebugLevMap.DebugLevel_Chatty) {
    console.log("getting SemaLogic-Adress: " + adress);
  }
  return adress;
}
function getHostAspPort(settings, parsedCommands) {
  let adress;
  if (parsedCommands.outputformat == rulesettypesCommands[rstypes_ASP][1]) {
    adress = sethttps(settings.mySLSettings[settings.mySetting].myUseHttps);
    adress = adress + settings.mySLSettings[settings.mySetting].myAspUrl;
    if (parsedCommands.endpoint != void 0) {
      if (parsedCommands.endpoint.indexOf("http") >= 0) {
        adress = parsedCommands.endpoint;
      } else {
        adress = adress + "/" + parsedCommands.endpoint;
      }
    }
  } else {
    adress = parsedCommands.endpoint;
  }
  if (parsedCommands.param != void 0) {
    adress = adress + "?" + parsedCommands.param;
  }
  if (DebugLevel >= DebugLevMap.DebugLevel_Chatty) {
    console.log("getting asp-Adress: " + adress);
  }
  return adress;
}
async function semaLogicGetVersion(settings) {
  if (DebugLevel >= DebugLevMap.DebugLevel_Important) {
    console.log("Start semaLogicGetVersion");
  }
  const myVersion = '{"version":"0","versiontext":"Text"}';
  let myJson = JSON.parse(myVersion);
  let jsonVersion = "";
  let vAPI_URL_Version = getHostPort(settings) + API_Defaults.Version;
  if (DebugLevel >= DebugLevMap.DebugLevel_Important) {
    console.log(vAPI_URL_Version);
  }
  let options;
  if (settings.mySLSettings[settings.mySetting].myUseHttps && settings.mySLSettings[settings.mySetting].myUser != "") {
    options = {
      url: vAPI_URL_Version,
      method: "GET",
      headers: {
        "content-type": "application/json",
        "Authorization": "Basic " + btoa(settings.mySLSettings[settings.mySetting].myUser + ":" + settings.mySLSettings[settings.mySetting].myPassword)
      }
    };
  } else {
    options = {
      url: vAPI_URL_Version,
      method: "GET"
    };
  }
  let response;
  try {
    response = await (0, import_obsidian2.requestUrl)(options);
    myJson = JSON.parse(response.text);
    if (DebugLevel >= DebugLevMap.DebugLevel_All) {
      console.log(myJson.version);
    }
    jsonVersion = myJson.version;
    if (DebugLevel >= DebugLevMap.DebugLevel_All) {
      console.log(`JSON-Text in Request:${jsonVersion}`);
    }
    return jsonVersion;
  } catch (e) {
    console.log("Error: Catch of APIVersion" + e.toString());
    throw new Error();
  }
}
async function semaLogicPing(settings, lastUpdate) {
  let starttime = Date.now();
  if (DebugLevel >= DebugLevMap.DebugLevel_Chatty) {
    console.log("GetVersionPing at ", Date.now(), "  for ", getHostPort(settings));
  }
  await semaLogicGetVersion(settings).then(function(resultBuffer) {
    if (DebugLevel >= DebugLevMap.DebugLevel_Chatty) {
      console.log("SemaLogic GetVersionPing started at:", starttime, " Endtime: ", Date.now());
    }
  }).catch(
    function(e) {
      if (starttime < lastUpdate) {
        if (DebugLevel >= DebugLevMap.DebugLevel_Important) {
          console.log(`There is no connection to SemaLogicService APIVersion`);
          console.log(getHostPort(settings));
        }
        app.workspace.iterateAllLeaves((leaf) => {
          let slView = leaf.view.getViewType();
          if (slView == SemaLogicViewType) {
            const container = leaf.view.containerEl.children[1];
            container.empty();
            container.createEl("h3", { text: "SemaLogic_Error" });
            container.createEl("b", { text: "There is no connection to SemaLogicService -> APIVersion" });
            container.createEl("b", { text: getHostPort(settings) });
            return false;
          }
        });
      } else {
        if (DebugLevel >= DebugLevMap.DebugLevel_High) {
          console.log("SemaLogic GetVersionPing failed and not used started:", starttime, " Endtime: ", Date.now());
        }
      }
    }
  );
  return true;
}
async function showParseWithFilter(filter, rulessettype, settings) {
  let results = [];
  let buildcontainerEl;
  let vAPI_URL = getHostPort(settings) + API_Defaults.rules_parse + "?sid=" + settings.mySLSettings[settings.mySetting].mySID;
  if (DebugLevel >= DebugLevMap.DebugLevel_Important) {
    console.log(vAPI_URL);
  }
  ;
  let bodytext = "";
  let activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
  if (activeView == void 0) {
    if (DebugLevel >= DebugLevMap.DebugLevel_High) {
      console.log("Do not find an active view");
    }
    return results;
  }
  let dialectID = "default";
  let codeblock = false;
  let newCodeblock = false;
  if (activeView != null) {
    for (let i = 0; i < activeView.editor.lineCount(); i++) {
      if (DebugLevel >= DebugLevMap.DebugLevel_All) {
        console.log(i, ";", activeView.editor.getLine(i));
        console.log("Substring:", activeView.editor.getLine(i).substring(0, 2));
      }
      if (activeView.editor.getLine(i).substring(0, 3) == "```") {
        if (!codeblock) {
          codeblock = true;
          newCodeblock = true;
        } else {
          newCodeblock = false;
        }
      }
      if (DebugLevel >= DebugLevMap.DebugLevel_Chatty) {
        console.log("Current line is Codeblock", codeblock);
      }
      if (!codeblock && !newCodeblock) {
        switch (activeView.editor.getLine(i)) {
          default:
            bodytext = bodytext.concat(activeView.editor.getLine(i) + "\n");
        }
      } else {
        switch (activeView.editor.getLine(i).substring(0, semaLogicCommand.useDialect.length)) {
          case semaLogicCommand.useDialect: {
            dialectID = activeView.editor.getLine(i).substring(semaLogicCommand.useDialect.length, activeView.editor.getLine(i).length - 1);
            dialectID = dialectID.trim();
            break;
          }
          default: {
          }
        }
      }
      if (i < activeView.editor.lineCount()) {
        if (activeView.editor.getLine(i).substring(0, 3) == "```") {
          if (codeblock && !newCodeblock) {
            codeblock = false;
          } else {
            newCodeblock = false;
          }
        }
      }
    }
  }
  if (bodytext == "") {
    bodytext = "";
  }
  if (dialectID == "") {
    dialectID = "default";
  }
  let result = "";
  if (filter != "") {
    let jsonwoFilter = {
      "text": [
        {
          "textID": "fly",
          "dialectID": dialectID,
          "rules": bodytext
        }
      ],
      "filter": {
        "dialectID": "default",
        "symbols": [
          {
            "symbol": filter
          }
        ]
      },
      "persistency": false,
      "rulesettype": rulessettype
    };
    var optionsParse = {
      url: vAPI_URL,
      method: "POST",
      headers: {
        "content-type": "application/json"
      },
      body: JSON.stringify(jsonwoFilter)
    };
  } else {
    let jsontestwthFilter = {
      "text": [
        {
          "textID": "fly",
          "dialectID": dialectID,
          "rules": bodytext
        }
      ],
      "filter": {},
      "persistency": false,
      "rulesettype": rulessettype
    };
    var optionsParse = {
      url: vAPI_URL,
      method: "POST",
      headers: {
        "content-type": "application/json"
      },
      body: JSON.stringify(jsontestwthFilter)
    };
  }
  let res;
  if (DebugLevel >= DebugLevMap.DebugLevel_Chatty) {
    console.log(`Context: ${dialectID}, Bodytext: ${bodytext}`);
  }
  if (DebugLevel >= DebugLevMap.DebugLevel_Important) {
    console.log(optionsParse);
  }
  try {
    const responseParse = await (0, import_obsidian2.requestUrl)(optionsParse);
    const remJson = responseParse.text;
    if (DebugLevel >= DebugLevMap.DebugLevel_Important) {
      console.log("SemaLogic: Parse with http-status " + responseParse.status.toString());
    }
    ;
    if (responseParse.status == 200) {
      let resulthttp = responseParse.text;
      const fragment = new Range().createContextualFragment(resulthttp);
      buildcontainerEl = createEl("p");
      buildcontainerEl.appendChild(fragment);
      results.push(buildcontainerEl);
      if (DebugLevel >= DebugLevMap.DebugLevel_Important) {
        console.log(`Parseresult:${resulthttp}`);
      }
      return results;
    }
  } catch (e) {
    slconsolelog(void 0, `Catcherror of removing context ${vAPI_URL}`);
    slconsolelog(void 0, e.toString());
    throw e;
  }
  return results;
}
function slconsolelog(slview, message, ...optionalParams) {
  if (slview != void 0) {
    if (slview.getViewType() == SemaLogicViewType) {
      if (slview.getDebugInline() == true) {
        let logMessages = JSON.stringify(message);
        slview.appendDebugContent(logMessages);
      } else {
        console.log(message, ...optionalParams);
      }
    }
  } else {
    console.log(message, ...optionalParams);
  }
}

// src/view_utils.ts
var ViewUtils = class {
  getContent(contentEl, outPutFormat) {
    let content;
    if (contentEl.textContent == null) {
      content = "";
    } else {
      content = contentEl.textContent;
    }
    content = this.cleanContent(content, outPutFormat);
    content = this.cleanCommands(content);
    return content;
  }
  cleanContent(content, outPutFormat) {
    if (outPutFormat == rulesettypesCommands[rstypes_ASP][1]) {
      const firstJSONBracket = content.indexOf("{");
      content = content.substring(firstJSONBracket, content.length);
    }
    if (outPutFormat == rulesettypesCommands[rstypes_Semalogic][1]) {
      const headerString = "Semalogic Output";
      const firstheaderString = content.indexOf(headerString);
      content = content.substring(firstheaderString + headerString.length, content.length);
    }
    return content;
  }
  cleanCommands(content) {
    let contentCleaned = [];
    let contentArray = content.split("\n");
    contentArray.forEach((element) => {
      let row = element.trim();
      row = row.toLowerCase();
      if (DebugLevel == DebugLevMap.DebugLevel_Chatty) {
        console.log("Row before:" + row);
      }
      row = row.replaceAll(" ", "");
      if (DebugLevel == DebugLevMap.DebugLevel_Chatty) {
        console.log("Row after:" + row);
      }
      if (row.indexOf(semaLogicCommand.command_start.toLowerCase()) != 0) {
        contentCleaned.push(element);
      } else {
        if (DebugLevel == DebugLevMap.DebugLevel_Chatty) {
          console.log("Index Define:" + row.indexOf(semaLogicCommand.define).toString());
        }
        if (DebugLevel == DebugLevMap.DebugLevel_Chatty) {
          console.log("Length Start:" + semaLogicCommand.command_start.length.toString());
        }
        if (row.indexOf(semaLogicCommand.define) == semaLogicCommand.command_start.length) {
          contentCleaned.push(element);
        }
      }
    });
    content = "";
    contentCleaned.forEach((element) => {
      content = content + element + "\n";
    });
    return content;
  }
};

// src/view.ts
var SemaLogicViewType = "SemaLogicService";
var SemaLogicView2 = class extends import_obsidian3.ItemView {
  constructor(leaf) {
    super(leaf);
    this.scaleRatio = 100;
    this.view_utils = new ViewUtils();
    this.debugInline = false;
    this.debugContent = [];
  }
  getOutPutFormat() {
    return this.dropdownButton.getValue();
  }
  getDebugInline() {
    return this.debugInline;
  }
  getContent() {
    return this.view_utils.getContent(this.contentEl, this.getOutPutFormat());
  }
  appendDebugContent(text) {
    this.debugContent.push(text);
  }
  copyToCb() {
    const blobcontentText = (cont) => `${cont}`;
    let data = new ClipboardItem({
      "text/plain": new Blob([blobcontentText(this.currResult)], {
        type: "text/plain"
      })
    });
    navigator.clipboard.write([data]).then(() => {
      alert("successfully copied");
    }).catch(() => {
      alert("something went wrong");
    });
  }
  setComm(comm) {
    if (this.slComm != comm) {
      this.slComm = comm;
      this.setNewInitial(this.slComm.slPlugin.settings.mySLSettings[this.slComm.slPlugin.settings.mySetting].myOutputFormat);
    }
  }
  getViewType() {
    return SemaLogicViewType;
  }
  getDisplayText() {
    return SemaLogicViewType;
  }
  onload() {
    this.navigation = true;
    this.contentEl.contentEditable = "true";
    this.debugInline == false;
  }
  getDebugButtonText() {
    if (this.debugInline == true) {
      return "InlineDebug is on";
    } else {
      return "InlineDebug is off";
    }
  }
  createDropDownButtonForOutPutFormat(container, dropDownValue) {
    this.dropdownButton = new import_obsidian3.DropdownComponent(container).addOption(rulesettypesCommands[rstypes_Semalogic][1], rulesettypesCommands[rstypes_Semalogic][0]).addOption(rulesettypesCommands[rstypes_ASP][1], rulesettypesCommands[rstypes_ASP][0]).addOption(rulesettypesCommands[rstypes_Picture][1], rulesettypesCommands[rstypes_Picture][0]).addOption(rulesettypesCommands[rstypes_SemanticTree][1], rulesettypesCommands[rstypes_SemanticTree][0]).setValue(dropDownValue).onChange(async (value) => {
      if (DebugLevel >= DebugLevMap.DebugLevel_Informative) {
        slconsolelog(this.slComm.slview, "Set ViewOutputFormat: " + value);
      }
      this.slComm.slPlugin.updateOutstanding = true;
      dropDownValue = value;
      this.dropdownButton.setValue(value);
      this.getSemaLogicParse(this.slComm.slPlugin.settings, this.apiURL, this.dialectID, this.bodytext, false, value);
    });
    return container;
  }
  createCopyToClipboardButton(container) {
    this.copyButton = new import_obsidian3.ButtonComponent(container).setButtonText("Copy to Clipboard").onClick((mouse_event) => {
      this.copyToCb();
    });
    return container;
  }
  createDebugButton(container) {
    if (DebugLevel != DebugLevMap.DebugLevel_Off) {
      this.debugButton = new import_obsidian3.ButtonComponent(container).setButtonText(this.getDebugButtonText()).onClick((mouse_event) => {
        if (this.debugInline == true) {
          this.debugInline = false;
          this.debugContent = [];
        } else {
          this.debugInline = true;
        }
        if (this.slComm.slview != void 0) {
          if (DebugLevel >= DebugLevMap.DebugLevel_Informative) {
            slconsolelog(this.slComm.slview, "Set InlineDebugging: " + this.debugInline);
          }
        }
        this.updateView();
      });
    }
    return container;
  }
  createScaleButtons(container) {
    this.zoomIn = new import_obsidian3.ButtonComponent(container).setButtonText("-").onClick((mouse_event) => {
      this.scaleRatio = this.scaleRatio / 2;
      if (this.zoomRatio != null) {
        this.zoomRatio.setButtonText(String(this.scaleRatio));
      }
      if (DebugLevel >= DebugLevMap.DebugLevel_Informative) {
        slconsolelog(this.slComm.slview, "Set ScaleRatio to: " + this.scaleRatio);
      }
      this.updateView();
    });
    this.zoomRatio = new import_obsidian3.ButtonComponent(container).setButtonText(String(this.scaleRatio)).onClick((mouse_event) => {
      if (DebugLevel >= DebugLevMap.DebugLevel_Informative) {
        slconsolelog(this.slComm.slview, "ScaleRatio := " + this.scaleRatio);
      }
    });
    this.zoomOut = new import_obsidian3.ButtonComponent(container).setButtonText("+").onClick((mouse_event) => {
      this.scaleRatio = this.scaleRatio * 2;
      this.zoomRatio.setButtonText(String(this.scaleRatio));
      if (DebugLevel >= DebugLevMap.DebugLevel_Informative) {
        slconsolelog(this.slComm.slview, "Set ScaleRatio to: " + this.scaleRatio);
      }
      this.updateView();
    });
    return container;
  }
  checkContainerContent() {
    if (this.containerEl.children != void 0) {
      if (this.containerEl.children[1].textContent == slTexts["HeaderSL"]) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }
  deleteContainerContent() {
    if (this.containerEl.children != void 0) {
      for (let i = 0; i < this.containerEl.children.length; i++) {
        if (this.containerEl.children[i].nodeName == "p") {
          while (this.containerEl.children[i] != void 0) {
            this.containerEl.children[i].empty;
          }
        }
      }
    }
  }
  setNewInitial(dropDownValue) {
    let container = this.contentEl;
    if (!this.checkContainerContent()) {
      container.empty();
      container.createEl("h4", { text: slTexts["HeaderSL"] });
      container = this.createDropDownButtonForOutPutFormat(container, dropDownValue);
      container = this.createCopyToClipboardButton(container);
      container = this.createDebugButton(container);
      if (dropDownValue == rulesettypesCommands[rstypes_Picture][1]) {
        container = this.createScaleButtons(container);
      }
      container.createEl("p");
    } else {
      this.deleteContainerContent();
    }
  }
  async onOpen() {
    this.setNewInitial(rulesettypesCommands[rstypes_Semalogic][1]);
  }
  async onClose() {
  }
  showError(fragment) {
    this.contentEl.appendChild(fragment);
  }
  onunload() {
    if (this.slComm.slPlugin != void 0) {
      this.slComm.slPlugin.activated = false;
      this.slComm.slPlugin.myStatus.setText("SemaLogic is off");
    }
  }
  createSemaLogicRequestBody(dialectID, bodytext, outPutFormat) {
    if (DebugLevel >= DebugLevMap.DebugLevel_Important) {
      slconsolelog(this.slComm.slview, "Context: " + dialectID + " Bodytext: " + bodytext);
    }
    let semaLogicJsonRequestBody = {
      "text": [
        {
          "textID": "ParsingOnTheFly",
          "dialectID": dialectID,
          "rules": bodytext
        }
      ],
      "filter": {},
      "persistency": false,
      "rulesettype": outPutFormat
    };
    return semaLogicJsonRequestBody;
  }
  createSemaLogicRequest(settings, vAPI_URL, semaLogicJsonRequestBody) {
    let request = {
      url: vAPI_URL,
      method: "POST",
      headers: {
        "content-type": "application/json"
      },
      body: JSON.stringify(semaLogicJsonRequestBody)
    };
    if (settings.mySLSettings[settings.mySetting].myUseHttps && settings.mySLSettings[settings.mySetting].myUser != "") {
      request = {
        url: vAPI_URL,
        method: "POST",
        headers: {
          "content-type": "application/json",
          "Authorization": "Basic " + btoa(settings.mySLSettings[settings.mySetting].myUser + ":" + settings.mySLSettings[settings.mySetting].myPassword)
        },
        body: JSON.stringify(semaLogicJsonRequestBody)
      };
    }
    if (DebugLevel >= DebugLevMap.DebugLevel_Important) {
      slconsolelog(this.slComm.slview, "Parsingsstring");
      slconsolelog(this.slComm.slview, request);
    }
    return request;
  }
  getRequestEmbed(content) {
    if (this.getOutPutFormat() == rulesettypesCommands[rstypes_Picture][1]) {
      let viewBoxString;
      const beginVB = content.indexOf("viewBox");
      if (beginVB > 0) {
        const endVB = content.indexOf('"', content.indexOf('"', beginVB) + 1);
        viewBoxString = content.substring(beginVB, endVB + 1);
      } else {
        viewBoxString = 'viewBox = "0 0 16 9"';
      }
      content = content.replace("<body>", "");
      content = content.replace("</body>", "");
      let header;
      header = "<svg  " + viewBoxString + ' width = "' + String(this.scaleRatio) + '%" xmlns = "http://www.w3.org/2000/svg" >\n';
      header = header + content;
      header = header + "</svg>";
      return header;
    } else {
      return content;
    }
  }
  getCurrResult() {
    return this.getRequestEmbed(this.currResult);
  }
  getCurrHTML() {
    let responseContent = this.contentEl.createEl("div");
    if (this.debugInline == true) {
      this.debugContent.forEach((value) => {
        const textline = responseContent.createEl("span", { text: value + "\n" });
        textline.style.cssText = "white-space: pre;";
      });
    } else {
      if (this.getOutPutFormat() == rulesettypesCommands[rstypes_ASP][1]) {
        let resulttextarray = this.getCurrResult().split("\n");
        resulttextarray.forEach((value) => {
          const textline = responseContent.createEl("span", { text: value + "\n" });
          textline.style.cssText = "white-space: pre;";
        });
      } else {
        responseContent.createEl("p", { text: " " });
        let div = document.createElement("div");
        div.innerHTML = this.getCurrResult();
        responseContent.appendChild(div);
      }
    }
  }
  updateView() {
    this.setNewInitial(this.getOutPutFormat());
    this.getCurrHTML();
  }
  async getSemaLogicParse(settings, vAPI_URL, dialectID, bodytext, parseOnTheFly, parsingFormat) {
    this.bodytext = bodytext;
    this.apiURL = vAPI_URL;
    this.dialectID = dialectID;
    let outPutFormat;
    if (parsingFormat !== void 0) {
      outPutFormat = parsingFormat;
    } else {
      outPutFormat = this.getOutPutFormat();
    }
    let semaLogicJsonRequestBody = this.createSemaLogicRequestBody(dialectID, bodytext, outPutFormat);
    let semaLogicRequest = this.createSemaLogicRequest(settings, vAPI_URL, semaLogicJsonRequestBody);
    try {
      const response = await (0, import_obsidian3.requestUrl)(semaLogicRequest);
      if (DebugLevel >= DebugLevMap.DebugLevel_High) {
        slconsolelog(this.slComm.slview, "SemaLogic: Parse with http-status " + response.status.toString());
      }
      ;
      if (response.status == 200) {
        var resulthttp = response.text;
        if (DebugLevel >= DebugLevMap.DebugLevel_Chatty) {
          slconsolelog(this.slComm.slview, `Parseresult:${resulthttp}`);
        }
        if (this.debugInline == false && parseOnTheFly == false) {
          this.currResult = resulthttp;
        }
        if (!parseOnTheFly) {
          this.updateView();
        }
      }
      if (this.slComm.slaspview != void 0) {
      }
      return new Promise((resolve) => {
        resolve(resulthttp);
      });
    } catch (e) {
      if (DebugLevel >= DebugLevMap.DebugLevel_High) {
        slconsolelog(this.slComm.slview, `Catcherror of removing context ${vAPI_URL}`);
      }
      if (DebugLevel >= DebugLevMap.DebugLevel_High) {
        slconsolelog(this.slComm.slview, e.toString());
      }
      let text = new DocumentFragment();
      text.createEl("p");
      let textfragment = new Range().createContextualFragment(e.toString());
      text.appendChild(textfragment);
      text.createEl("p");
      textfragment = new Range().createContextualFragment("See for information about the error-code of http: https://de.wikipedia.org/wiki/HTTP-Statuscode ");
      text.append(textfragment);
      text.createEl("p");
      textfragment = new Range().createContextualFragment(semaLogicRequest.url);
      text.append(textfragment);
      text.createEl("p");
      textfragment = new Range().createContextualFragment(String(semaLogicRequest.body));
      text.append(textfragment);
      this.showError(text);
      throw e;
    }
  }
};

// src/view_asp.ts
var import_obsidian4 = require("obsidian");
var ASPViewType = "TransferService";
var ASPView = class extends import_obsidian4.ItemView {
  constructor(leaf) {
    super(leaf);
    this.setNewASPInitial();
  }
  setComm(comm) {
    this.slComm = comm;
    this.setNewASPInitial();
  }
  getViewType() {
    return ASPViewType;
  }
  getDisplayText() {
    return ASPViewType;
  }
  onload() {
    this.navigation = true;
    this.contentEl.contentEditable = "true";
  }
  setNewASPInitial() {
    const container = this.contentEl;
    container.empty();
    container.createEl("h4", { text: "Transfer.View" });
    container.createEl("p");
  }
  async onOpen() {
    this.setNewASPInitial();
  }
  async onClose() {
  }
  showError(fragment) {
    this.contentEl.appendChild(fragment);
  }
  onunload() {
    if (this.slComm != void 0) {
      this.slComm.slPlugin.activated = false;
      this.slComm.slPlugin.myStatus.setText("Transfer is off");
    }
  }
  createRequest(comm, settings, apiUrl, method, contentType, withBasicAuth, body) {
    let request;
    let myHeader = {};
    contentType = contentType.toLowerCase();
    method = method.toUpperCase();
    switch (contentType.toLowerCase()) {
      case "json": {
        myHeader["Content-Type"] = "application/json";
        break;
      }
      case "asp": {
        myHeader["Content-Type"] = "application/json";
        break;
      }
      case "asp.json": {
        myHeader["Content-Type"] = "application/json";
        break;
      }
      case "text": {
        myHeader["Content-Type"] = "text/plain";
        break;
      }
      default: {
        myHeader["Content-Type"] = contentType;
        break;
      }
    }
    if (withBasicAuth) {
      myHeader["Authorization"] = "Basic " + btoa(settings.mySLSettings[settings.mySetting].myUser + ":" + settings.mySLSettings[settings.mySetting].myPassword);
    }
    request = {
      url: apiUrl,
      method,
      headers: myHeader,
      body
    };
    if (DebugLevel >= DebugLevMap.DebugLevel_Important) {
      console.log(request);
    }
    ;
    return request;
  }
  getASPCommands(slComm, settings) {
    let paramParsedCommand = {
      outputformat: "ASP.json",
      endpoint: settings.mySLSettings[settings.mySetting].myAspEndpoint,
      param: ""
    };
    let commands;
    if (slComm.slview != null) {
      const editortext = slComm.slUsedMDView.editor.getRange({ line: 0, ch: 0 }, { line: slComm.slUsedMDView.editor.lastLine(), ch: slComm.slUsedMDView.editor.lastLine.length });
      const rows = editortext.split("\n").filter((row) => row.length > 0);
      let myStrResult;
      let transferString;
      let endpointString = "";
      let paramString;
      rows.forEach((row) => {
        if (row.substring(0, semaLogicCommand.command_start.length) == semaLogicCommand.command_start) {
          const transfer = row.indexOf(semaLogicCommand.transfer);
          const endpoint = row.indexOf(semaLogicCommand.transferEndpoint);
          let param = row.indexOf(semaLogicCommand.transferParam);
          const endCommand = row.indexOf(semaLogicCommand.command_end);
          if (param < 0) {
            param = endCommand;
          }
          if (transfer <= 0) {
          } else {
            transferString = row.substring(transfer + semaLogicCommand.transfer.length + 1, endpoint);
            transferString = transferString.trimEnd();
            if (endpoint > 0) {
              endpointString = row.substring(endpoint + 1 + semaLogicCommand.transferEndpoint.length, param);
              endpointString = endpointString.trimEnd();
            }
            if (param > 0 && param != endCommand) {
              paramString = row.substring(param + 1 + semaLogicCommand.transferParam.length, endCommand);
              paramString = paramString.trimEnd();
            }
            paramParsedCommand = {
              outputformat: transferString,
              endpoint: endpointString,
              param: paramString
            };
          }
        }
      });
    }
    return paramParsedCommand;
  }
  async aspParse(slComm, settings, aspJsonParsedSemaLogic) {
    if (DebugLevel >= DebugLevMap.DebugLevel_Chatty) {
      console.log("Start Transfer_Parse");
    }
    ;
    let vAPI_URL = "";
    const parseCommands = this.getASPCommands(slComm, settings);
    if (parseCommands.outputformat == rulesettypesCommands[rstypes_ASP][1] || parseCommands.outputformat == rulesettypesCommands[rstypes_ASP][0]) {
      vAPI_URL = getHostAspPort(settings, parseCommands);
    } else {
      vAPI_URL = parseCommands.endpoint;
      if (parseCommands.param != void 0) {
        if (parseCommands.param.length > 0) {
          vAPI_URL = vAPI_URL + "?" + parseCommands.param;
        }
      }
      if (DebugLevel >= DebugLevMap.DebugLevel_Important) {
        console.log("Transfer URL: ", vAPI_URL);
      }
    }
    let optionsParse = this.createRequest(this.slComm, settings, vAPI_URL, "POST", "json", true, aspJsonParsedSemaLogic);
    try {
      if (DebugLevel >= DebugLevMap.DebugLevel_Important) {
        console.log("ASP: want to parse ", optionsParse);
      }
      ;
      const responseParse = await (0, import_obsidian4.requestUrl)(optionsParse);
      const remJson = responseParse.text;
      if (DebugLevel >= DebugLevMap.DebugLevel_Important) {
        console.log("ASP: Parse with http-status " + responseParse.status.toString());
      }
      ;
      if (responseParse.status == 200) {
        let resulthttp = responseParse.text;
        this.setNewASPInitial();
        resulthttp = resulthttp.replaceAll("[", "[\n");
        resulthttp = resulthttp.replaceAll("]", "\n]");
        resulthttp = resulthttp.replaceAll(",", ",\n");
        let resulthttpArray = resulthttp.split("\n");
        resulthttpArray.forEach((element) => {
          this.contentEl.append(element);
          this.contentEl.createEl("br");
        });
        if (DebugLevel >= DebugLevMap.DebugLevel_Chatty) {
          console.log(`ASP-Parseresult:${resulthttp}`);
        }
      }
    } catch (e) {
      if (DebugLevel >= DebugLevMap.DebugLevel_High) {
        console.log(`Catcherror of removing context ${vAPI_URL}`);
      }
      if (DebugLevel >= DebugLevMap.DebugLevel_High) {
        console.log(e.toString());
      }
      let text = new DocumentFragment();
      text.createEl("p");
      let textfragment = new Range().createContextualFragment(e.toString());
      text.appendChild(textfragment);
      text.createEl("p");
      textfragment = new Range().createContextualFragment("See for information about the error-code of http: https://de.wikipedia.org/wiki/HTTP-Statuscode ");
      text.append(textfragment);
      text.createEl("p");
      textfragment = new Range().createContextualFragment(optionsParse.url);
      text.append(textfragment);
      text.createEl("p");
      textfragment = new Range().createContextualFragment(String(optionsParse.body));
      text.append(textfragment);
      this.contentEl.empty();
      this.contentEl.createEl("br");
      this.contentEl.append(text);
    }
  }
};

// main.ts
var import_view3 = require("@codemirror/view");
var DebugLevel = 0;
var Default_profile = {
  mySLSettings: [
    {
      myPort: API_Defaults.Port,
      myOutputFormat: "SemaLogic",
      myBaseURL: API_Defaults.Base_URL,
      myGetAPI: API_Defaults.GetAPI,
      mySID: API_Defaults.SID,
      myContext: API_Defaults.ShowContext,
      myUseHttps: API_Defaults.useUserPasswortforHTTP,
      myUser: API_Defaults.HttpUser,
      myPassword: API_Defaults.HttpPassword,
      myUpdateInterval: Value_Defaults.updateInterval,
      myAspUrl: API_Defaults.AspUrl,
      myAspEndpoint: API_Defaults.AspEndpoint
    },
    {
      myPort: API_Defaults.Port,
      myOutputFormat: "SemaLogic",
      myBaseURL: API_Defaults.Base_URL,
      myGetAPI: API_Defaults.GetAPI,
      mySID: API_Defaults.SID,
      myContext: API_Defaults.ShowContext,
      myUseHttps: API_Defaults.useUserPasswortforHTTP,
      myUser: API_Defaults.HttpUser,
      myPassword: API_Defaults.HttpPassword,
      myUpdateInterval: Value_Defaults.updateInterval,
      myAspUrl: API_Defaults.AspUrl,
      myAspEndpoint: API_Defaults.AspEndpoint
    },
    {
      myPort: API_Defaults.Port,
      myOutputFormat: "SemaLogic",
      myBaseURL: API_Defaults.Base_URL,
      myGetAPI: API_Defaults.GetAPI,
      mySID: API_Defaults.SID,
      myContext: API_Defaults.ShowContext,
      myUseHttps: API_Defaults.useUserPasswortforHTTP,
      myUser: API_Defaults.HttpUser,
      myPassword: API_Defaults.HttpPassword,
      myUpdateInterval: Value_Defaults.updateInterval,
      myAspUrl: API_Defaults.AspUrl,
      myAspEndpoint: API_Defaults.AspEndpoint
    }
  ],
  mySetting: 0,
  myDebugLevel: 0
};
var SemaLogicSettingTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for SemaLogic:" });
    new import_obsidian5.Setting(containerEl).setName("General DebugLevel").setDesc("You can set a DebugLevel for Developmentinformation").addDropdown((dropDown) => dropDown.addOption("0", DebugLevelNames[0]).addOption("1", DebugLevelNames[1]).addOption("2", DebugLevelNames[2]).addOption("3", DebugLevelNames[3]).addOption("4", DebugLevelNames[4]).addOption("5", DebugLevelNames[5]).setValue(String(this.plugin.settings.myDebugLevel)).onChange(async (value) => {
      if (this.plugin.settings.myDebugLevel >= DebugLevMap.DebugLevel_Current_Dev) {
        console.log("Set DebugLevel: " + DebugLevelNames[parseInt(value)]);
      }
      ;
      this.plugin.settings.myDebugLevel = parseInt(value);
      DebugLevel = parseInt(value);
      await this.plugin.saveSettings();
      this.display();
    }));
    new import_obsidian5.Setting(containerEl).setName("Change your setting profile").setDesc("You can define different profiles for your SemaLogicService").addDropdown((dropDown) => dropDown.addOption("0", "Profile 1").addOption("1", "Profile 2").addOption("2", "Profile 3").setValue(this.plugin.settings.mySetting.toString()).onChange(async (value) => {
      if (this.plugin.settings.myDebugLevel >= DebugLevMap.DebugLevel_Current_Dev) {
        console.log("Set Profile: " + value);
      }
      ;
      this.plugin.settings.mySetting = parseInt(value);
      this.display();
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("Port SemaLogic").setDesc("Enter the Port").addText((text) => text.setPlaceholder(API_Defaults.Port).setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myPort).onChange(async (value) => {
      if (this.plugin.settings.myDebugLevel >= DebugLevMap.DebugLevel_Important) {
        console.log("Set to Port: " + value);
      }
      ;
      this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myPort = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("OutputFormat").setDesc("Here you can set the outputformat for SemaLogic, which could be get from SemaLogicService").addDropdown((dropDown) => dropDown.addOption(rulesettypesCommands[rstypes_Semalogic][1], rulesettypesCommands[rstypes_Semalogic][0]).addOption(rulesettypesCommands[rstypes_ASP][1], rulesettypesCommands[rstypes_ASP][0]).addOption(rulesettypesCommands[rstypes_Picture][1], rulesettypesCommands[rstypes_Picture][0]).setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myOutputFormat).onChange(async (value) => {
      if (this.plugin.settings.myDebugLevel >= DebugLevMap.DebugLevel_Important) {
        console.log("Set Outputformat: " + value);
      }
      ;
      this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myOutputFormat = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("BaseUrl").setDesc("BaseURL for reaching SemaLogicService").addText((text) => text.setPlaceholder(API_Defaults.Base_URL).setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myBaseURL).onChange(async (value) => {
      if (this.plugin.settings.myDebugLevel >= DebugLevMap.DebugLevel_Important) {
        console.log("Set BaseURL: " + value);
      }
      ;
      this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myBaseURL = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("Path to Get-API-Endpoints").setDesc("Path to Get-API for more Information about the Endpoints of used APIs").addText((text) => text.setPlaceholder(API_Defaults.GetAPI).setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myGetAPI).onChange(async (value) => {
      if (this.plugin.settings.myDebugLevel >= DebugLevMap.DebugLevel_Important) {
        console.log("Set to Get-API-Endpoint: " + value);
      }
      ;
      this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myGetAPI = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("SID").setDesc("SemaLogic SessionID").addText((text) => text.setPlaceholder(API_Defaults.SID).setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].mySID).onChange(async (value) => {
      if (this.plugin.settings.myDebugLevel >= DebugLevMap.DebugLevel_Important) {
        console.log("Set SID: " + value);
      }
      ;
      this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].mySID = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("Show Context in Reading View").addToggle((setting) => setting.setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myContext).onChange(async (value) => {
      if (this.plugin.settings.myDebugLevel >= DebugLevMap.DebugLevel_Important) {
        console.log("Set Context of Reading View: " + value);
      }
      ;
      this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myContext = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("Standard updateinterval").addText((setting) => setting.setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myUpdateInterval.toString()).onChange(async (value) => {
      if (this.plugin.settings.myDebugLevel >= DebugLevMap.DebugLevel_Important) {
        console.log("Set Update Interval: " + value);
      }
      ;
      this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myUpdateInterval = parseInt(value);
      window.clearInterval(this.plugin.interval);
      this.plugin.registerInterval(
        this.plugin.interval = window.setInterval(this.plugin.handleUpdate, this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myUpdateInterval)
      );
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("Secure HTTP-Request").setDesc("If you has to use User/Password for http-request to the SemaLogic service").addToggle((setting) => setting.setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myUseHttps).onChange(async (value) => {
      if (this.plugin.settings.myDebugLevel >= DebugLevMap.DebugLevel_Important) {
        console.log("Set UserPasswordRequest: " + value);
      }
      ;
      this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myUseHttps = value;
      await this.plugin.saveSettings();
      this.display();
    }));
    if (this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myUseHttps) {
      new import_obsidian5.Setting(containerEl).setName("HTTP-Request-User").setDesc("User to reach SemaLogic service").addText((text) => text.setPlaceholder(API_Defaults.HttpUser).setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myUser).onChange(async (value) => {
        if (this.plugin.settings.myDebugLevel >= DebugLevMap.DebugLevel_Important) {
          console.log("Set HTTP-Request-User...");
        }
        ;
        this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myUser = value;
        await this.plugin.saveSettings();
      }));
      new import_obsidian5.Setting(containerEl).setName("HTTP-Request-Password").setDesc("Password to reach SemaLogic service").addText((text) => text.setPlaceholder(API_Defaults.HttpPassword).setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myPassword).onChange(async (value) => {
        if (this.plugin.settings.myDebugLevel >= DebugLevMap.DebugLevel_Important) {
          console.log("Set HTTP-Request-Password...");
        }
        ;
        this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myPassword = value;
        await this.plugin.saveSettings();
      }));
    }
    new import_obsidian5.Setting(containerEl).setName("BaseUrl for ASP").setDesc("BaseURL for reaching ASP-Service").addText((text) => text.setPlaceholder(API_Defaults.AspUrl).setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myAspUrl).onChange(async (value) => {
      if (this.plugin.settings.myDebugLevel >= DebugLevMap.DebugLevel_Important) {
        console.log("Set ASPBaseURL: " + value);
      }
      ;
      this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myAspUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian5.Setting(containerEl).setName("Path to Get-ASP-StandardAPI-Endpoint").setDesc("Path to ASP-Standard-API ").addText((text) => text.setPlaceholder(API_Defaults.AspEndpoint).setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myAspEndpoint).onChange(async (value) => {
      if (this.plugin.settings.myDebugLevel >= DebugLevMap.DebugLevel_Important) {
        console.log("Set to ASP-Standard-API-Endpoint: " + value);
      }
      ;
      this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myAspEndpoint = value;
      await this.plugin.saveSettings();
    }));
  }
};
var SemaLogicPluginComm3 = class {
  constructor() {
    this.activatedASP = false;
  }
  setSlView(view) {
    this.slview = view;
  }
  setSLClass(slclass) {
    this.slPlugin = slclass;
  }
  add(a, b) {
    return a + b;
  }
};
var SemaLogicPlugin = class extends import_obsidian5.Plugin {
  constructor() {
    super(...arguments);
    this.activated = false;
    this.updating = false;
    this.lastUpdate = 0;
    this.updateOutstanding = false;
    this.updateOutstandingSetting = false;
    this.waitingForResponse = false;
    this.UpdateProcessing = false;
    this.view_utils = new ViewUtils();
    this.handleUpdate = (update) => {
      if (this.statusSL) {
        if (DebugLevel >= DebugLevMap.DebugLevel_Current_Dev || DebugLevel >= DebugLevMap.DebugLevel_High) {
          const text = "Updatetime/" + String(Date.now()) + "/" + String(this.lastUpdate) + "/" + String(Date.now() - this.lastUpdate) + "/" + String(this.updateOutstanding) + "/" + String(this.waitingForResponse);
          slconsolelog(this.slComm.slview, text);
        }
        if (update == null) {
        } else {
          if (update.view) {
            if (!update.docChanged && !update.focusChanged) {
              return;
            } else {
              if (this.UpdateProcessing == false) {
                if (DebugLevel >= DebugLevMap.DebugLevel_Current_Dev || DebugLevel >= DebugLevMap.DebugLevel_All)
                  slconsolelog(this.slComm.slview, "Start Update docChanged, focuschanged, UpdProc  " + String(update.docChanged) + "/" + String(update.focusChanged) + "/" + String(this.UpdateProcessing));
                this.semaLogicUpdate();
              }
            }
          }
        }
        if (Date.now() - this.lastUpdate > this.settings.mySLSettings[this.settings.mySetting].myUpdateInterval && this.updateOutstanding == true && this.waitingForResponse == false) {
          if (DebugLevel >= DebugLevMap.DebugLevel_Current_Dev || DebugLevel >= DebugLevMap.DebugLevel_All)
            slconsolelog(this.slComm.slview, "Start Update PARSING");
          this.lastUpdate = Date.now();
          this.semaLogicUpdate();
        } else if (Date.now() - this.lastUpdate > this.settings.mySLSettings[this.settings.mySetting].myUpdateInterval && this.updateOutstanding == true && this.waitingForResponse == false) {
          semaLogicPing(this.settings, this.lastUpdate);
        }
      }
    };
  }
  getContextFromLine(mydialectID) {
    mydialectID = mydialectID.replace("SemaLogicContext\u2261", "SemaLogicDialect\u2261");
    let re = /\t/gi;
    mydialectID = mydialectID.replace(re, "");
    re = /\n/gi;
    mydialectID = mydialectID.replace(re, "");
    return { mydialectID };
  }
  getActiveView() {
    const activeView = app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
    if (activeView === null) {
      if (this.lastactiveView === null) {
        if (DebugLevel >= DebugLevMap.DebugLevel_High) {
          slconsolelog(this.slComm.slview, "ActiveView could not be defined through SemaLogic");
        }
        return;
      } else {
        return this.lastactiveView;
      }
    }
    this.lastactiveView = activeView;
    if (DebugLevel >= DebugLevMap.DebugLevel_Important) {
      slconsolelog(this.slComm.slview, this.lastactiveView.getDisplayText());
    }
    return this.lastactiveView;
  }
  setViews() {
    this.slComm.activatedASP = false;
    this.app.workspace.iterateAllLeaves((leaf) => {
      switch (leaf.view.getViewType()) {
        case ASPViewType: {
          this.slComm.slaspview = leaf.view;
          this.slComm.slaspview.setComm(this.slComm);
          this.slComm.slaspview.slComm.setSlView(this.slComm.slview);
          this.slComm.slaspview.slComm.slPlugin = this.slComm.slPlugin;
          this.slComm.activatedASP = true;
          this.statusTransfer = true;
        }
        case SemaLogicViewType: {
          this.slComm.slview = leaf.view;
          this.slComm.slview.setComm(this.slComm);
          this.slComm.slview.slComm.setSlView(this.slComm.slview);
          this.slComm.slview.slComm.slPlugin = this.slComm.slPlugin;
          this.activated = true;
          this.statusSL = true;
        }
      }
    });
    this.getActiveView();
  }
  async onload() {
    this.registerMarkdownPostProcessor((element, context) => {
      console.log(element, context);
      element.querySelectorAll("p").forEach((el) => {
        if (searchForSemaLogicCommands(el)) {
          let set = this.settings;
          context.addChild(new SemaLogicRenderedElement({ containerEl: el, set }));
        }
      });
    });
    this.addSettingTab(new SemaLogicSettingTab(this.app, this));
    await this.loadSettings();
    DebugLevel = this.settings.myDebugLevel;
    this.myStatus = this.addStatusBarItem();
    this.slComm = new SemaLogicPluginComm3();
    this.slComm.setSLClass(this);
    this.activateView();
    await this.semaLogicReset();
    this.setViews();
    this.addRibbonIcon("book", "On/Off SemaLogic.View", () => {
      this.setViews();
      if (this.activated == false) {
        this.statusSL = true;
        if (!this.activated) {
          this.activateView();
        }
      } else {
        this.statusSL = false;
        this.deactivateView();
      }
    });
    this.addRibbonIcon("dice", "On/Off Transfer.View", () => {
      this.setViews();
      if (this.slComm != void 0) {
        if (this.slComm.activatedASP == false) {
          this.activateASPView();
        } else {
          this.deactivateASPView();
        }
      }
    });
    if (this.statusSL) {
      this.semaLogicReset();
      this.slComm.slview.setNewInitial(this.settings.mySLSettings[this.settings.mySetting].myOutputFormat);
      this.semaLogicParse();
    }
    this.registerInterval(
      this.interval = window.setInterval(this.handleUpdate, this.settings.mySLSettings[this.settings.mySetting].myUpdateInterval)
    );
    this.registerEditorExtension([import_view3.EditorView.updateListener.of(this.handleUpdate)]);
  }
  async semaLogicParse() {
    this.setViews();
    if (DebugLevel >= DebugLevMap.DebugLevel_Chatty) {
      slconsolelog(this.slComm.slview, "Start SemaLogicParse");
    }
    ;
    let results = [];
    this.lastUpdate = Date.now();
    await semaLogicPing(this.settings, this.lastUpdate);
    let vAPI_URL = getHostPort(this.settings) + API_Defaults.rules_parse + "?sid=" + this.settings.mySLSettings[this.settings.mySetting].mySID;
    if (DebugLevel >= DebugLevMap.DebugLevel_Important) {
      slconsolelog(this.slComm.slview, vAPI_URL);
    }
    ;
    let bodytext = "";
    let activeView = this.getActiveView();
    if (activeView != void 0) {
      this.slComm.slUsedMDView = activeView;
    }
    let dialectID = "default";
    let codeblock = false;
    let newCodeblock = false;
    if (activeView != null) {
      if (DebugLevel >= DebugLevMap.DebugLevel_Chatty) {
        slconsolelog(this.slComm.slview, "ActiveView is not NULL");
      }
      ;
      for (let i = 0; i < activeView.editor.lineCount(); i++) {
        if (DebugLevel >= DebugLevMap.DebugLevel_All) {
          slconsolelog(this.slComm.slview, i, ";", activeView.editor.getLine(i));
          slconsolelog(this.slComm.slview, "Substring:", activeView.editor.getLine(i).substring(0, 2));
        }
        if (activeView.editor.getLine(i).substring(0, 3) == "```") {
          if (!codeblock) {
            codeblock = true;
            newCodeblock = true;
          } else {
            newCodeblock = false;
          }
        }
        if (DebugLevel >= DebugLevMap.DebugLevel_Chatty) {
          slconsolelog(this.slComm.slview, "Current line is Codeblock", codeblock);
        }
        if (!codeblock && !newCodeblock) {
          bodytext = bodytext.concat(activeView.editor.getLine(i) + "\n");
        } else {
          switch (activeView.editor.getLine(i).substring(0, semaLogicCommand.useDialect.length)) {
            case semaLogicCommand.useDialect: {
              dialectID = activeView.editor.getLine(i).substring(semaLogicCommand.useDialect.length, activeView.editor.getLine(i).length - 1);
              dialectID = dialectID.trim();
              break;
            }
            default: {
            }
          }
        }
        if (i < activeView.editor.lineCount()) {
          if (activeView.editor.getLine(i).substring(0, 3) == "```") {
            if (codeblock && !newCodeblock) {
              codeblock = false;
            } else {
              newCodeblock = false;
            }
          }
        }
      }
    }
    bodytext = this.view_utils.cleanCommands(bodytext);
    if (dialectID == "") {
      dialectID = "default";
    }
    if (DebugLevel >= DebugLevMap.DebugLevel_Chatty) {
      console.log("Parsingresult for SemaLogicView");
    }
    const responseForSemaLogic = this.slComm.slview.getSemaLogicParse(this.settings, vAPI_URL, dialectID, bodytext, false);
    responseForSemaLogic.then((value) => {
      if (DebugLevel >= DebugLevMap.DebugLevel_Chatty) {
        console.log(value);
      }
    });
    this.updateOutstanding = false;
    if (this.slComm.activatedASP) {
      if (DebugLevel >= DebugLevMap.DebugLevel_Chatty) {
        console.log("Parsingresult for OnTheFly Transfer.view in SemaLogic");
      }
      const parseCommands = this.slComm.slaspview.getASPCommands(this.slComm, this.settings);
      let outputFormat = rulesettypesCommands[rstypes_ASP][1];
      if (parseCommands.outputformat != void 0 && parseCommands.outputformat != rulesettypesCommands[rstypes_ASP][0]) {
        outputFormat = parseCommands.outputformat;
      }
      const responseForASP = this.slComm.slview.getSemaLogicParse(this.settings, vAPI_URL, dialectID, bodytext, true, outputFormat);
      responseForASP.then((value) => {
        if (DebugLevel >= DebugLevMap.DebugLevel_Chatty) {
          console.log(value);
        }
        const aspPromise = this.slComm.slaspview.aspParse(this.slComm, this.settings, value);
        aspPromise.then((value2) => {
          if (value2 != void 0) {
            slconsolelog(this.slComm.slview, value2);
          }
        });
      });
    }
    return results;
  }
  async activateASPView() {
    if (this.slComm.slaspview == void 0) {
      this.registerView(
        ASPViewType,
        (leaf2) => new ASPView(leaf2)
      );
    }
    const leaf = this.GetAspLeaf();
    if (leaf != void 0) {
      leaf.setViewState({
        type: ASPViewType,
        active: false
      });
      await this.semaLogicReset();
      this.app.workspace.revealLeaf(leaf);
    } else {
      console.log("ASP-Leaf not created");
    }
    this.setViews();
    this.handlePing();
    this.statusTransfer = true;
    this.semaLogicUpdate();
    this.myStatus.setText("ASP is on");
  }
  async activateView() {
    if (this.slComm.slview == void 0) {
      this.registerView(
        SemaLogicViewType,
        (leaf2) => new SemaLogicView2(leaf2)
      );
    }
    const leaf = this.GetSemaLogicLeaf();
    if (leaf != void 0) {
      leaf.setViewState({
        type: SemaLogicViewType,
        active: false
      });
      await this.semaLogicReset();
      this.app.workspace.revealLeaf(leaf);
    } else {
      console.log("SemaLogic-Leaf not created");
    }
    this.setViews();
    this.handlePing();
    this.semaLogicUpdate();
    this.myStatus.setText("SemaLogic is on");
  }
  async deactivateASPView() {
    this.app.workspace.detachLeavesOfType(ASPViewType);
    this.slComm.activatedASP = false;
    this.statusTransfer = true;
    this.myStatus.setText("ASP is off");
  }
  async deactivateView() {
    this.app.workspace.detachLeavesOfType(SemaLogicViewType);
    this.activated = false;
    this.slComm.slview.unload();
    this.myStatus.setText("SemaLogic is off");
  }
  GetAspLeaf() {
    let found = false;
    var slv = void 0;
    this.app.workspace.iterateAllLeaves((leaf) => {
      if (!found) {
        switch (leaf.view.getViewType()) {
          case ASPViewType: {
            found = true;
            slv = leaf;
          }
        }
      }
    });
    if (!found) {
      if (DebugLevel >= DebugLevMap.DebugLevel_All) {
        console.log("Split");
      }
      slv = this.app.workspace.getLeaf("split");
      if (DebugLevel >= DebugLevMap.DebugLevel_All) {
        console.log(slv);
      }
    }
    return slv;
  }
  GetSemaLogicLeaf() {
    let found = false;
    var slv = void 0;
    this.app.workspace.iterateAllLeaves((leaf) => {
      if (!found) {
        switch (leaf.view.getViewType()) {
          case SemaLogicViewType: {
            found = true;
            slv = leaf;
          }
        }
      }
    });
    if (!found) {
      if (DebugLevel >= DebugLevMap.DebugLevel_All) {
        console.log("Split");
      }
      slv = this.app.workspace.getLeaf("split");
      if (DebugLevel >= DebugLevMap.DebugLevel_All) {
        console.log(slv);
      }
    }
    return slv;
  }
  async onunload() {
    this.app.workspace.detachLeavesOfType(ASPViewType);
    this.app.workspace.detachLeavesOfType(SemaLogicViewType);
  }
  async loadSettings() {
    this.settings = Object.assign({}, Default_profile, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    if (this.slComm.slview != void 0) {
      this.slComm.slview.setNewInitial(this.settings.mySLSettings[this.settings.mySetting].myOutputFormat);
    }
    this.updateOutstanding = true;
  }
  handlePing() {
    semaLogicPing(this.settings, this.lastUpdate);
  }
  semaLogicUpdate(setView) {
    this.waitingForResponse = true;
    this.UpdateProcessing = true;
    if (setView == true || setView == void 0) {
      this.setViews();
    }
    if (DebugLevel >= DebugLevMap.DebugLevel_Current_Dev || DebugLevel >= DebugLevMap.DebugLevel_Chatty) {
      slconsolelog(this.slComm.slview, "Start SemaLogicUpdate");
    }
    ;
    this.setViews();
    let activeView = this.getActiveView();
    this.semaLogicParse();
    if (!this.updating) {
      this.updating = true;
      if (activeView != null) {
        const editortext = activeView.editor.getRange({ line: 0, ch: 0 }, { line: activeView.editor.lastLine(), ch: activeView.editor.lastLine.length });
        const addChar = " ";
        let cursor = activeView.editor.getCursor();
        for (let i = 0; i < activeView.editor.lastLine(); i++) {
          if (activeView.editor.getLine(i).substring(0, semaLogicCommand.command_start.length) == semaLogicCommand.command_start) {
            if (activeView.editor.getLine(i).substring(activeView.editor.getLine(i).length - 1, activeView.editor.getLine(i).length) == semaLogicCommand.command_end) {
              activeView.editor.setLine(i, activeView.editor.getLine(i).substring(0, activeView.editor.getLine(i).length) + addChar);
            } else {
              if (activeView.editor.getLine(i).substring(activeView.editor.getLine(i).length - 1, activeView.editor.getLine(i).length) == addChar) {
                activeView.editor.setLine(i, activeView.editor.getLine(i).substring(0, activeView.editor.getLine(i).length - 1));
              }
            }
          }
        }
        activeView.editor.setCursor(cursor);
      }
      this.updating = false;
    }
    this.UpdateProcessing = false;
    this.waitingForResponse = false;
  }
  getSemaLogicText() {
    if (this.slComm.slview.contentEl.textContent == null) {
      return "";
    } else {
      return this.slComm.slview.getContent();
    }
  }
  async semaLogicReset() {
    let vAPI_URL_Reset = getHostPort(this.settings) + API_Defaults.reset + "?sid=" + this.settings.mySLSettings[this.settings.mySetting].mySID;
    let optionsReset;
    if (this.settings.mySLSettings[this.settings.mySetting].myUseHttps && this.settings.mySLSettings[this.settings.mySetting].myUser != "") {
      optionsReset = {
        url: vAPI_URL_Reset,
        method: "POST",
        headers: {
          "content-type": "text/plain",
          "Authorization": "Basic " + btoa(this.settings.mySLSettings[this.settings.mySetting].myUser + ":" + this.settings.mySLSettings[this.settings.mySetting].myPassword)
        }
      };
    } else {
      optionsReset = {
        url: vAPI_URL_Reset,
        method: "POST",
        headers: {
          "content-type": "text/plain"
        }
      };
    }
    if (DebugLevel >= DebugLevMap.DebugLevel_Important) {
      slconsolelog(this.slComm.slview, optionsReset);
    }
    try {
      const responseReset = await (0, import_obsidian5.requestUrl)(optionsReset);
      if (DebugLevel >= DebugLevMap.DebugLevel_Informative) {
        console.log(this.slComm.slview, `SemaLogic: Reset with http-status ${responseReset.status.toString()}`);
      }
      ;
    } catch (e) {
      console.log(this.slComm.slview, `Catcherror by reset ${vAPI_URL_Reset}`);
      console.log(this.slComm.slview, e.toString());
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
