/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  DebugLevel: () => DebugLevel,
  Default_profile: () => Default_profile,
  SemaLogicPluginComm: () => SemaLogicPluginComm2,
  default: () => SemaLogicPlugin,
  mygSID: () => mygSID
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");

// src/view.ts
var import_obsidian3 = require("obsidian");

// src/const.ts
var API_Defaults = {
  http: "http://",
  https: "https://",
  Base_URL: "service.semalogic.ddns.net",
  Port: "443",
  rules_parse: "/rules/parse",
  reset: "/reset",
  Version: "/APIVersion",
  PostDialect: "/dialect/define",
  RemoveDialect: "/dialect/remove",
  GetAPI: "/APIVersion",
  SID: "12345678",
  ShowContext: true,
  useUserPasswortforHTTP: true,
  HttpUser: "User",
  HttpPassword: "Password",
  viewheader: "SVG",
  AspUrl: "ASP-Service-URL.com/",
  AspEndpoint: "/plans/count",
  useUserPasswortforHTTPSL: true,
  HttpUserSL: "User",
  HttpPasswordSL: "Password"
};
var Value_Defaults = {
  updateInterval: 500
};
var semaLogicCommand = {
  command_start: "SemaLogic(",
  command_end: ")",
  showHelp: "show help",
  showVersion: "show version",
  getDialectwTemplate: "template",
  useDialect: "use ???dialectName???",
  define: "define",
  showParse: "show as",
  showFilter: "for",
  transfer: "transfer",
  transferEndpoint: "to endpoint",
  transferParam: "with param"
};
var semaLogicHelp = [
  [semaLogicCommand.command_start + "???" + semaLogicCommand.command_end, "You can define what SemaLogic should do for you by replacing ??? with one of the following SemaLogic commands:"],
  [semaLogicCommand.command_start + semaLogicCommand.showHelp + semaLogicCommand.command_end, "Show this help information"],
  [semaLogicCommand.command_start + semaLogicCommand.showVersion + semaLogicCommand.command_end, "Show the version of the SemaLogic-Service"],
  [semaLogicCommand.command_start + semaLogicCommand.define + semaLogicCommand.command_end, "After this inlinecommand and a space line comes e.g. a table that should be interpreted by SemaLogic (table, NTable, ZTable) with optional headerinterpretation- Expected format:\n(|Symbol||Level(n+1)|\n|---|---|\n|Level(1)|Level(n)|Value|)"],
  [`${semaLogicCommand.command_start + semaLogicCommand.showParse} %1 ${semaLogicCommand.showFilter} %2 ${semaLogicCommand.command_end}`, "show as - shows an output directly to the reading view ( with %1 you have to set the output type: 1|1 {picture, syemalogic, asp} and with %2 you could filter for an symbol by symbolname)"],
  [`${semaLogicCommand.command_start + semaLogicCommand.transfer} %1 ${semaLogicCommand.transferEndpoint} %2 ${semaLogicCommand.transferParam} %3 ${semaLogicCommand.command_end}`, "transfer - shows an (currently only) asp output directly to the asp.view from SemaLogicView ( with %1 you have to set the output type: 1|1 {asp} and with %2 you could set the endpoint and wuth %3 you could set queryparameter)"]
];
var Rstypes_Semalogic = 0;
var Rstypes_Picture = 3;
var Rstypes_ASP = 6;
var Rstypes_SemanticTree = 8;
var Rstypes_KnowledgeGraph = 9;
var RulesettypesCommands = [
  ["SemaLogic", "SemaLogic"],
  ["technical", "SemaLogic"],
  ["semalogic", "SemaLogic"],
  ["Picture (SVG)", "SVG"],
  ["picture", "SVG"],
  ["SVG", "SVG"],
  ["ASP", "ASP.json"],
  ["asp", "ASP.json"],
  ["SemanticTree", "SemanticTree"],
  ["KnwoledgeGraph", "KnowledgeGraph"]
];
var DebugLevelNames = [
  "DebugLevel_Off",
  "DebugLevel_Error",
  "DebugLevel_Current_Dev",
  "DebugLevel_Important",
  "DebugLevel_Informative",
  "DebugLevel_Chatty",
  "DebugLevel_All"
];
var DebugLevMap = {
  "DebugLevel_Off": 0,
  "DebugLevel_Error": 1,
  "DebugLevel_Current_Dev": 2,
  "DebugLevel_Important": 3,
  "DebugLevel_Informative": 4,
  "DebugLevel_Chatty": 5,
  "DebugLevel_All": 6
};
var slTexts = {
  "HeaderSL": "SemaLogic.View",
  "HeaderTV": "Transfer.View"
};
var slTemplate = {
  "PathCommands": "Templates/SemaLogic/Commands",
  "PathSymTokenComparison": "Templates/SemaLogic/SymToken/Comparison",
  "PathSymTokenElements": "Templates/SemaLogic/SymToken/Elements",
  "PathSymTokenFunc": "Templates/SemaLogic/SymToken/FuncToken",
  "PathSymTokenMath": "Templates/SemaLogic/SymToken/Math",
  "PathSymTokenRefToken": "Templates/SemaLogic/SymToken/RefToken",
  "PathSymTokenTerms": "Templates/SemaLogic/SymToken/TermsAndRules",
  "PathExamplesBasic": "Templates/SemaLogic/Examples/Basic"
};

// src/utils.ts
var import_obsidian = require("obsidian");
var import_obsidian2 = require("obsidian");
var searchForSemaLogicCommands = (el) => {
  for (let i = 0; i < el.childNodes.length; i++) {
    const child = el.childNodes[i];
    if (isSemaLogicCommand(child)) {
      return true;
    }
  }
  return false;
};
var isSemaLogicCommand = (n) => {
  var _a;
  return n.nodeType === Node.TEXT_NODE && Boolean((_a = n.textContent) == null ? void 0 : _a.startsWith(semaLogicCommand.command_start));
};
var replaceWithEmptyNode = (containerEl) => {
  const results = [];
  return results;
};
async function replaceWithCommandNode(containerEl, settings) {
  var _a, _b;
  let results = [];
  let found = false;
  let semaLogicCom = (_b = containerEl.textContent) == null ? void 0 : _b.substring(semaLogicCommand.command_start.length, (_a = containerEl.textContent) == null ? void 0 : _a.indexOf(semaLogicCommand.command_end)).toLowerCase();
  if (!found && (semaLogicCom == null ? void 0 : semaLogicCom.toString().substring(0, semaLogicCommand.showHelp.length)) == semaLogicCommand.showHelp) {
    results = await showHelp();
    found = true;
  }
  if (!found && (semaLogicCom == null ? void 0 : semaLogicCom.toString().substring(0, semaLogicCommand.showVersion.length)) == semaLogicCommand.showVersion) {
    results = await showVersion(settings);
    found = true;
  }
  if (!found && (semaLogicCom == null ? void 0 : semaLogicCom.toString().substring(0, semaLogicCommand.showParse.length)) == semaLogicCommand.showParse) {
    let rulesettype = "";
    let filter = "";
    for (let rule in RulesettypesCommands) {
      if (semaLogicCom.contains(RulesettypesCommands[rule][0])) {
        rulesettype = RulesettypesCommands[rule][1];
        const findfor = semaLogicCom.indexOf(semaLogicCommand.showFilter);
        if (findfor > 0) {
          filter = semaLogicCom.substring(findfor + semaLogicCommand.showFilter.length);
          filter = filter.trim();
        }
        found = true;
        break;
      }
    }
    if (!found) {
      results = await showHelp();
      found = true;
    }
    if (rulesettype != "") {
      results = await showParseWithFilter(filter, rulesettype, settings);
    }
    found = true;
  }
  if (!found) {
    results = replaceWithEmptyNode(containerEl);
  }
  return results;
}
var SemaLogicRenderedElement = class extends import_obsidian.MarkdownRenderChild {
  constructor({ containerEl, set }) {
    super(containerEl);
    this.mysettings = set;
  }
  async onload() {
    this.containerEl.setChildrenInPlace(
      await replaceWithCommandNode(this.containerEl, this.mysettings)
    );
  }
};
async function showHelp() {
  let results = [];
  let buildcontainerEl;
  slconsolelog(DebugLevMap.DebugLevel_Informative, void 0, semaLogicCommand.showHelp);
  buildcontainerEl = createEl("table");
  let body = buildcontainerEl.createEl("body");
  let row = body.createEl("tr");
  row.createEl("td", { text: "SemaLogic-Commands-Help" });
  row.createEl("td", { text: "Description" });
  for (let i = 0; i < semaLogicHelp.length; i++) {
    const row2 = body.createEl("tr");
    row2.createEl("td", { text: semaLogicHelp[i][0] });
    row2.createEl("td", { text: semaLogicHelp[i][1] });
  }
  results.push(buildcontainerEl);
  return results;
}
async function showVersion(settings) {
  let results = [];
  let buildcontainerEl;
  let versiontext = "";
  slconsolelog(DebugLevMap.DebugLevel_Informative, void 0, semaLogicCommand.showVersion);
  const version = await semaLogicGetVersion(settings).then(function(resultBuffer) {
    versiontext = resultBuffer;
  }).catch(
    function(resultBuffer) {
      versiontext = resultBuffer;
    }
  );
  slconsolelog(DebugLevMap.DebugLevel_High, void 0, `JSON-Text in Processor:${versiontext}`);
  buildcontainerEl = createEl("table");
  const table = buildcontainerEl.createEl("table");
  const body = buildcontainerEl.createEl("body");
  const row = body.createEl("tr");
  row.createEl("td", { text: versiontext });
  results.push(buildcontainerEl);
  return results;
}
function sethttps(https) {
  let str;
  if (https) {
    str = API_Defaults.https;
  } else {
    str = API_Defaults.http;
  }
  return str;
}
function getHostPort(settings) {
  let adress = sethttps(settings.mySLSettings[settings.mySetting].myUseHttpsSL);
  adress = adress + settings.mySLSettings[settings.mySetting].myBaseURL;
  if (settings.mySLSettings[settings.mySetting].myPort != "") {
    adress = adress + ":" + settings.mySLSettings[settings.mySetting].myPort;
  }
  slconsolelog(DebugLevMap.DebugLevel_High, void 0, "getting SemaLogic-Adress: " + adress);
  return adress;
}
function getHostAspPort(settings, parsedCommands) {
  let adress;
  if (parsedCommands.outputformat == RulesettypesCommands[Rstypes_ASP][1]) {
    adress = sethttps(settings.mySLSettings[settings.mySetting].myUseHttps);
    adress = adress + settings.mySLSettings[settings.mySetting].myAspUrl;
    if (parsedCommands.endpoint != void 0) {
      if (parsedCommands.endpoint.indexOf("http") >= 0) {
        adress = parsedCommands.endpoint;
      } else {
        adress = adress + "/" + parsedCommands.endpoint;
      }
    }
  } else {
    adress = parsedCommands.endpoint;
  }
  if (parsedCommands.param != void 0 && parsedCommands.param != "") {
    adress = adress + "?" + parsedCommands.param;
  }
  slconsolelog(DebugLevMap.DebugLevel_High, void 0, "getting asp-Adress: " + adress);
  return adress;
}
async function semaLogicGetVersion(settings) {
  slconsolelog(DebugLevMap.DebugLevel_Important, void 0, "Start semaLogicGetVersion");
  const myVersion = '{"version":"0","versiontext":"Text"}';
  let myJson = JSON.parse(myVersion);
  let jsonVersion = "";
  let vAPI_URL_Version = getHostPort(settings) + API_Defaults.Version;
  slconsolelog(DebugLevMap.DebugLevel_Important, void 0, vAPI_URL_Version);
  let options;
  if (settings.mySLSettings[settings.mySetting].myUseHttpsSL && settings.mySLSettings[settings.mySetting].myUserSL != "") {
    options = {
      url: vAPI_URL_Version,
      method: "GET",
      headers: {
        "content-type": "application/json",
        "Authorization": "Basic " + btoa(settings.mySLSettings[settings.mySetting].myUserSL + ":" + settings.mySLSettings[settings.mySetting].myPasswordSL)
      }
    };
  } else {
    options = {
      url: vAPI_URL_Version,
      method: "GET"
    };
  }
  let response;
  try {
    response = await (0, import_obsidian2.requestUrl)(options);
    myJson = JSON.parse(response.text);
    slconsolelog(DebugLevMap.DebugLevel_All, void 0, myJson.version);
    jsonVersion = myJson.version;
    slconsolelog(DebugLevMap.DebugLevel_All, void 0, `JSON-Text in Request:${jsonVersion}`);
    return jsonVersion;
  } catch (e) {
    slconsolelog(DebugLevMap.DebugLevel_Error, void 0, "Error: Catch of APIVersion" + e.toString());
    throw new Error();
  }
}
async function semaLogicPing(settings, lastUpdate) {
  let starttime = Date.now();
  slconsolelog(DebugLevMap.DebugLevel_Informative, void 0, "GetVersionPing at ", Date.now(), "  for ", getHostPort(settings));
  await semaLogicGetVersion(settings).then(function(resultBuffer) {
    slconsolelog(DebugLevMap.DebugLevel_Informative, void 0, "SemaLogic GetVersionPing started at:", starttime, " Endtime: ", Date.now());
  }).catch(
    function(e) {
      if (starttime < lastUpdate) {
        slconsolelog(DebugLevMap.DebugLevel_Important, void 0, `There is no connection to SemaLogicService APIVersion`);
        slconsolelog(DebugLevMap.DebugLevel_Important, void 0, getHostPort(settings));
        app.workspace.iterateAllLeaves((leaf) => {
          let slView = leaf.view.getViewType();
          if (slView == SemaLogicViewType) {
            const container = leaf.view.containerEl.children[1];
            container.empty();
            container.createEl("h3", { text: "SemaLogic_Error" });
            container.createEl("b", { text: "There is no connection to SemaLogicService -> APIVersion" });
            container.createEl("b", { text: getHostPort(settings) });
            return false;
          }
        });
      } else {
        slconsolelog(DebugLevMap.DebugLevel_High, void 0, "SemaLogic GetVersionPing failed and not used started:", starttime, " Endtime: ", Date.now());
      }
    }
  );
  return true;
}
async function showParseWithFilter(filter, rulessettype, settings) {
  let results = [];
  let buildcontainerEl;
  let vAPI_URL = getHostPort(settings) + API_Defaults.rules_parse + "?sid=" + mygSID;
  slconsolelog(DebugLevMap.DebugLevel_Important, void 0, vAPI_URL);
  let bodytext = "";
  let activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
  if (activeView == void 0) {
    slconsolelog(DebugLevMap.DebugLevel_High, void 0, "Do not find an active view");
    return results;
  }
  let dialectID = "default";
  let codeblock = false;
  let newCodeblock = false;
  if (activeView != null) {
    for (let i = 0; i < activeView.editor.lineCount(); i++) {
      slconsolelog(DebugLevMap.DebugLevel_All, void 0, i, ";", activeView.editor.getLine(i));
      slconsolelog(DebugLevMap.DebugLevel_All, void 0, "Substring:", activeView.editor.getLine(i).substring(0, 2));
      if (activeView.editor.getLine(i).substring(0, 3) == "```") {
        if (!codeblock) {
          codeblock = true;
          newCodeblock = true;
        } else {
          newCodeblock = false;
        }
      }
      slconsolelog(DebugLevMap.DebugLevel_Informative, void 0, "Current line is Codeblock", codeblock);
      if (!codeblock && !newCodeblock) {
        switch (activeView.editor.getLine(i)) {
          default:
            bodytext = bodytext.concat(activeView.editor.getLine(i) + "\n");
        }
      } else {
        switch (activeView.editor.getLine(i).substring(0, semaLogicCommand.useDialect.length)) {
          case semaLogicCommand.useDialect: {
            dialectID = activeView.editor.getLine(i).substring(semaLogicCommand.useDialect.length, activeView.editor.getLine(i).length - 1);
            dialectID = dialectID.trim();
            break;
          }
          default: {
          }
        }
      }
      if (i < activeView.editor.lineCount()) {
        if (activeView.editor.getLine(i).substring(0, 3) == "```") {
          if (codeblock && !newCodeblock) {
            codeblock = false;
          } else {
            newCodeblock = false;
          }
        }
      }
    }
  }
  if (bodytext == "") {
    bodytext = "";
  }
  if (dialectID == "") {
    dialectID = "default";
  }
  let result = "";
  let optionsParse;
  if (filter != "") {
    let jsonwoFilter = {
      "text": [
        {
          "textID": "fly",
          "dialectID": dialectID,
          "rules": bodytext
        }
      ],
      "filter": {
        "dialectID": "default",
        "symbols": [
          {
            "symbol": filter
          }
        ]
      },
      "persistency": false,
      "rulesettype": rulessettype
    };
    optionsParse = {
      url: vAPI_URL,
      method: "POST",
      headers: {
        "content-type": "application/json"
      },
      body: JSON.stringify(jsonwoFilter)
    };
  } else {
    let jsontestwthFilter = {
      "text": [
        {
          "textID": "fly",
          "dialectID": dialectID,
          "rules": bodytext
        }
      ],
      "filter": {},
      "persistency": false,
      "rulesettype": rulessettype
    };
    optionsParse = {
      url: vAPI_URL,
      method: "POST",
      headers: {
        "content-type": "application/json"
      },
      body: JSON.stringify(jsontestwthFilter)
    };
  }
  let res;
  slconsolelog(DebugLevMap.DebugLevel_Chatty, void 0, `Context: ${dialectID}, Bodytext: ${bodytext}`);
  slconsolelog(DebugLevMap.DebugLevel_Important, void 0, optionsParse);
  try {
    const responseParse = await (0, import_obsidian2.requestUrl)(optionsParse);
    const remJson = responseParse.text;
    slconsolelog(DebugLevMap.DebugLevel_Important, void 0, "SemaLogic: Parse with http-status " + responseParse.status.toString());
    if (responseParse.status == 200) {
      let resulthttp = responseParse.text;
      const fragment = new Range().createContextualFragment(resulthttp);
      buildcontainerEl = createEl("p");
      buildcontainerEl.appendChild(fragment);
      results.push(buildcontainerEl);
      slconsolelog(DebugLevMap.DebugLevel_Important, void 0, `Parseresult:${resulthttp}`);
      return results;
    }
  } catch (e) {
    slconsolelog(DebugLevMap.DebugLevel_Error, void 0, `Catcherror of removing context ${vAPI_URL}`);
    slconsolelog(DebugLevMap.DebugLevel_Error, void 0, e.toString());
    throw e;
  }
  return results;
}
function slconsolelog(DebugValue, slview, message, ...optionalParams) {
  if (DebugLevel >= DebugValue) {
    if (slview != void 0) {
      if (slview.getViewType() == SemaLogicViewType) {
        if (slview.getDebugInline() == true) {
          let logMessages = JSON.stringify(message);
          slview.appendDebugContent(logMessages);
        } else {
          console.log(message, ...optionalParams);
        }
      }
    } else {
      console.log(message, ...optionalParams);
    }
  }
}

// src/view_utils.ts
var ViewUtils = class {
  getContent(contentEl, outPutFormat) {
    let content;
    if (contentEl.textContent == null) {
      content = "";
    } else {
      content = contentEl.textContent;
    }
    content = this.cleanContent(content, outPutFormat);
    content = this.cleanCommands(content);
    return content;
  }
  cleanContent(content, outPutFormat) {
    if (outPutFormat == RulesettypesCommands[Rstypes_ASP][1]) {
      const firstJSONBracket = content.indexOf("{");
      content = content.substring(firstJSONBracket, content.length);
    }
    if (outPutFormat == RulesettypesCommands[Rstypes_Semalogic][1]) {
      const headerString = "Semalogic Output";
      const firstheaderString = content.indexOf(headerString);
      content = content.substring(firstheaderString + headerString.length, content.length);
    }
    return content;
  }
  cleanCommands(content) {
    let contentCleaned = [];
    let contentArray = content.split("\n");
    contentArray.forEach((element) => {
      let row = element.trim();
      row = row.toLowerCase();
      slconsolelog(DebugLevMap.DebugLevel_Chatty, void 0, "Row before:" + row);
      row = row.replaceAll(" ", "");
      slconsolelog(DebugLevMap.DebugLevel_Chatty, void 0, "Row after:" + row);
      if (row.indexOf(semaLogicCommand.command_start.toLowerCase()) != 0) {
        contentCleaned.push(element);
      } else {
        slconsolelog(DebugLevMap.DebugLevel_Chatty, void 0, "Index Define:" + row.indexOf(semaLogicCommand.define).toString());
        slconsolelog(DebugLevMap.DebugLevel_Chatty, void 0, "Length Start:" + semaLogicCommand.command_start.length.toString());
        if (row.indexOf(semaLogicCommand.define) == semaLogicCommand.command_start.length) {
          contentCleaned.push(element);
        }
      }
    });
    content = "";
    contentCleaned.forEach((element) => {
      content = content + element + "\n";
    });
    return content;
  }
};

// src/view.ts
var SemaLogicViewType = "SemaLogicService";
var SemaLogicView2 = class extends import_obsidian3.ItemView {
  constructor(leaf) {
    super(leaf);
    this.scaleRatio = 100;
    this.view_utils = new ViewUtils();
    this.debugInline = false;
    this.debugContent = [];
  }
  getOutPutFormat() {
    return this.dropdownButton.getValue();
  }
  getDebugInline() {
    return this.debugInline;
  }
  getContent() {
    return this.view_utils.getContent(this.contentEl, this.getOutPutFormat());
  }
  appendDebugContent(text) {
    this.debugContent.push(text);
  }
  copyToCb() {
    const blobcontentText = (cont) => `${cont}`;
    let data = new ClipboardItem({
      "text/plain": new Blob([blobcontentText(this.currResult)], {
        type: "text/plain"
      })
    });
    navigator.clipboard.write([data]).then(() => {
      alert("successfully copied");
    }).catch(() => {
      alert("something went wrong");
    });
  }
  setComm(comm) {
    if (this.slComm != comm) {
      this.slComm = comm;
      this.setNewInitial(this.slComm.slPlugin.settings.mySLSettings[this.slComm.slPlugin.settings.mySetting].myOutputFormat, false);
    }
  }
  getViewType() {
    return SemaLogicViewType;
  }
  getDisplayText() {
    return SemaLogicViewType;
  }
  onload() {
    this.navigation = true;
    this.contentEl.contentEditable = "true";
    this.debugInline == false;
  }
  getDebugButtonText() {
    if (this.debugInline == true) {
      return "InlineDebug is on";
    } else {
      return "InlineDebug is off";
    }
  }
  createDropDownButtonForOutPutFormat(container, dropDownValue) {
    this.dropdownButton = new import_obsidian3.DropdownComponent(container).addOption(RulesettypesCommands[Rstypes_Semalogic][1], RulesettypesCommands[Rstypes_Semalogic][0]).addOption(RulesettypesCommands[Rstypes_ASP][1], RulesettypesCommands[Rstypes_ASP][0]).addOption(RulesettypesCommands[Rstypes_Picture][1], RulesettypesCommands[Rstypes_Picture][0]).addOption(RulesettypesCommands[Rstypes_SemanticTree][1], RulesettypesCommands[Rstypes_SemanticTree][0]).addOption(RulesettypesCommands[Rstypes_KnowledgeGraph][1], RulesettypesCommands[Rstypes_KnowledgeGraph][0]).setValue(dropDownValue).onChange(async (value) => {
      slconsolelog(DebugLevMap.DebugLevel_Informative, this.slComm.slview, "Set ViewOutputFormat: " + value);
      this.slComm.slPlugin.updateOutstanding = true;
      dropDownValue = value;
      this.dropdownButton.setValue(value);
      this.getSemaLogicParse(this.slComm.slPlugin.settings, this.apiURL, this.dialectID, this.bodytext, false, value);
    });
    return container;
  }
  createCopyToClipboardButton(container) {
    this.copyButton = new import_obsidian3.ButtonComponent(container).setButtonText("Copy to Clipboard").onClick((mouse_event) => {
      this.copyToCb();
    });
    return container;
  }
  createDebugButton(container) {
    if (DebugLevel != DebugLevMap.DebugLevel_Off) {
      this.debugButton = new import_obsidian3.ButtonComponent(container).setButtonText(this.getDebugButtonText()).onClick((mouse_event) => {
        if (this.debugInline == true) {
          this.debugInline = false;
          this.debugContent = [];
        } else {
          this.debugInline = true;
        }
        if (this.slComm.slview != void 0) {
          slconsolelog(DebugLevMap.DebugLevel_Informative, this.slComm.slview, "Set InlineDebugging: " + this.debugInline);
        }
        this.updateView();
      });
    }
    return container;
  }
  createScaleButtons(container) {
    this.zoomIn = new import_obsidian3.ButtonComponent(container).setButtonText("-").onClick((mouse_event) => {
      this.scaleRatio = this.scaleRatio / 2;
      if (this.zoomRatio != null) {
        this.zoomRatio.setButtonText(String(this.scaleRatio));
      }
      slconsolelog(DebugLevMap.DebugLevel_Informative, this.slComm.slview, "Set ScaleRatio to: " + this.scaleRatio);
      this.updateView();
    });
    this.zoomRatio = new import_obsidian3.ButtonComponent(container).setButtonText(String(this.scaleRatio)).onClick((mouse_event) => {
      slconsolelog(DebugLevMap.DebugLevel_Informative, this.slComm.slview, "ScaleRatio := " + this.scaleRatio);
    });
    this.zoomOut = new import_obsidian3.ButtonComponent(container).setButtonText("+").onClick((mouse_event) => {
      this.scaleRatio = this.scaleRatio * 2;
      this.zoomRatio.setButtonText(String(this.scaleRatio));
      slconsolelog(DebugLevMap.DebugLevel_Informative, this.slComm.slview, "Set ScaleRatio to: " + this.scaleRatio);
      this.updateView();
    });
    return container;
  }
  checkContainerContent() {
    var _a;
    if (this.containerEl.children != void 0) {
      if (((_a = this.containerEl.children[1].textContent) == null ? void 0 : _a.substring(0, slTexts["HeaderSL"].length)) == slTexts["HeaderSL"]) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }
  deleteContainerContent() {
    if (this.containerEl.children != void 0) {
      for (let i = 0; i < this.containerEl.children.length; i++) {
        if (this.containerEl.children[i].nodeName == "p") {
          while (this.containerEl.children[i] != void 0) {
            this.containerEl.children[i].empty;
          }
        }
      }
    }
  }
  setNewInitial(dropDownValue, now) {
    let container = this.contentEl;
    if (!this.checkContainerContent() || now) {
      container.empty();
      container.createEl("h4", { text: slTexts["HeaderSL"] });
      container = this.createDropDownButtonForOutPutFormat(container, dropDownValue);
      container = this.createCopyToClipboardButton(container);
      container = this.createDebugButton(container);
      if (dropDownValue == RulesettypesCommands[Rstypes_Picture][1]) {
        container = this.createScaleButtons(container);
      }
      container.createEl("p");
    } else {
      this.deleteContainerContent();
    }
  }
  async onOpen() {
    this.setNewInitial(RulesettypesCommands[Rstypes_Semalogic][1], false);
  }
  async onClose() {
  }
  showError(fragment) {
    this.contentEl.appendChild(fragment);
  }
  onunload() {
    if (this.slComm.slPlugin != void 0) {
      this.slComm.slPlugin.activated = false;
      this.slComm.slPlugin.myStatus.setText("SemaLogic is off");
    }
  }
  createSemaLogicRequestBody(dialectID, bodytext, outPutFormat) {
    slconsolelog(DebugLevMap.DebugLevel_Important, this.slComm.slview, "Context: " + dialectID + " Bodytext: " + bodytext);
    let semaLogicJsonRequestBody = {
      "text": [
        {
          "textID": "ParsingOnTheFly",
          "dialectID": dialectID,
          "rules": bodytext
        }
      ],
      "filter": {},
      "persistency": false,
      "rulesettype": outPutFormat
    };
    return semaLogicJsonRequestBody;
  }
  createSemaLogicRequest(settings, vAPI_URL, semaLogicJsonRequestBody) {
    let request = {
      url: vAPI_URL,
      method: "POST",
      headers: {
        "content-type": "application/json"
      },
      body: JSON.stringify(semaLogicJsonRequestBody)
    };
    if (settings.mySLSettings[settings.mySetting].myUseHttpsSL && settings.mySLSettings[settings.mySetting].myUserSL != "") {
      request = {
        url: vAPI_URL,
        method: "POST",
        headers: {
          "content-type": "application/json",
          "Authorization": "Basic " + btoa(settings.mySLSettings[settings.mySetting].myUserSL + ":" + settings.mySLSettings[settings.mySetting].myPasswordSL)
        },
        body: JSON.stringify(semaLogicJsonRequestBody)
      };
    }
    slconsolelog(DebugLevMap.DebugLevel_Important, this.slComm.slview, "Parsingsstring");
    slconsolelog(DebugLevMap.DebugLevel_Important, this.slComm.slview, request);
    return request;
  }
  getRequestEmbed(content) {
    if (this.getOutPutFormat() == RulesettypesCommands[Rstypes_Picture][1]) {
      let viewBoxString;
      const beginVB = content.indexOf("viewBox");
      if (beginVB > 0) {
        const endVB = content.indexOf('"', content.indexOf('"', beginVB) + 1);
        viewBoxString = content.substring(beginVB, endVB + 1);
      } else {
        viewBoxString = 'viewBox = "0 0 16 9"';
      }
      content = content.replace("<body>", "");
      content = content.replace("</body>", "");
      let header;
      header = "<svg  " + viewBoxString + ' width = "' + String(this.scaleRatio) + '%" xmlns = "http://www.w3.org/2000/svg" >\n';
      header = header + content;
      header = header + "</svg>";
      return header;
    } else {
      return content;
    }
  }
  getCurrResult() {
    return this.getRequestEmbed(this.currResult);
  }
  getCurrHTML() {
    let responseContent = this.contentEl.createEl("div");
    if (this.debugInline == true) {
      this.debugContent.forEach((value) => {
        const textline = responseContent.createEl("span", { text: value + "\n", cls: "debuginline" });
      });
    } else {
      if (this.getOutPutFormat() == RulesettypesCommands[Rstypes_ASP][1]) {
        let resulttextarray = this.getCurrResult().split("\n");
        resulttextarray.forEach((value) => {
          const textline = responseContent.createEl("span", { text: value + "\n", cls: "debuginline" });
        });
      } else {
        responseContent.createEl("p", { text: " " });
        responseContent.insertAdjacentHTML("afterend", this.getCurrResult());
      }
    }
  }
  updateView() {
    this.setNewInitial(this.getOutPutFormat(), true);
    this.getCurrHTML();
  }
  async getSemaLogicParse(settings, vAPI_URL, dialectID, bodytext, parseOnTheFly, parsingFormat) {
    this.bodytext = bodytext;
    this.apiURL = vAPI_URL;
    this.dialectID = dialectID;
    let outPutFormat;
    let resulthttp;
    if (parsingFormat !== void 0) {
      outPutFormat = parsingFormat;
    } else {
      outPutFormat = this.getOutPutFormat();
    }
    let semaLogicJsonRequestBody = this.createSemaLogicRequestBody(dialectID, bodytext, outPutFormat);
    let semaLogicRequest = this.createSemaLogicRequest(settings, vAPI_URL, semaLogicJsonRequestBody);
    try {
      const response = await (0, import_obsidian3.requestUrl)(semaLogicRequest);
      slconsolelog(DebugLevMap.DebugLevel_High, this.slComm.slview, "SemaLogic: Parse with http-status " + response.status.toString());
      if (response.status == 200) {
        resulthttp = response.text;
        slconsolelog(DebugLevMap.DebugLevel_Chatty, this.slComm.slview, `Parseresult:${resulthttp}`);
        if (this.debugInline == false && parseOnTheFly == false) {
          this.currResult = resulthttp;
        }
        if (!parseOnTheFly) {
          this.updateView();
        }
      }
      if (this.slComm.slaspview != void 0) {
      }
      return new Promise((resolve) => {
        resolve(resulthttp);
      });
    } catch (e) {
      slconsolelog(DebugLevMap.DebugLevel_High, this.slComm.slview, `Catcherror of removing context ${vAPI_URL}`);
      slconsolelog(DebugLevMap.DebugLevel_High, this.slComm.slview, e.toString());
      let text = new DocumentFragment();
      text.createEl("p");
      let textfragment = new Range().createContextualFragment(e.toString());
      text.appendChild(textfragment);
      text.createEl("p");
      textfragment = new Range().createContextualFragment("See for information about the error-code of http: https://de.wikipedia.org/wiki/HTTP-Statuscode ");
      text.append(textfragment);
      text.createEl("p");
      textfragment = new Range().createContextualFragment(semaLogicRequest.url);
      text.append(textfragment);
      text.createEl("p");
      textfragment = new Range().createContextualFragment(String(semaLogicRequest.body));
      text.append(textfragment);
      this.showError(text);
      throw e;
    }
  }
};

// src/view_asp.ts
var import_obsidian4 = require("obsidian");
var ASPViewType = "TransferService";
var ASPView = class extends import_obsidian4.ItemView {
  constructor(leaf) {
    super(leaf);
    this.LastRequestTime = 0;
    this.navigation = true;
    this.setNewASPInitial(true);
  }
  setComm(comm) {
    this.slComm = comm;
    this.setNewASPInitial(false);
  }
  getViewType() {
    return ASPViewType;
  }
  getDisplayText() {
    return ASPViewType;
  }
  onload() {
    this.navigation = true;
    this.contentEl.contentEditable = "true";
  }
  checkASPContainerContent() {
    var _a;
    if (this.containerEl.children != void 0) {
      if (((_a = this.containerEl.children[1].textContent) == null ? void 0 : _a.substring(0, slTexts["HeaderTV"].length)) == slTexts["HeaderTV"]) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }
  deleteASPContainerContent() {
    if (this.containerEl.children != void 0) {
      for (let i = 0; i < this.containerEl.children.length; i++) {
        if (this.containerEl.children[i].nodeName == "p") {
          while (this.containerEl.children[i] != void 0) {
            this.containerEl.children[i].empty;
          }
        }
      }
    }
  }
  setNewASPInitial(now) {
    let container = this.contentEl;
    if (now || !this.checkASPContainerContent()) {
      container.empty();
      container.createEl("h4", { text: slTexts["HeaderTV"] });
      container.createEl("p");
    } else {
    }
  }
  async onOpen() {
  }
  async onClose() {
  }
  showError(fragment) {
    this.contentEl.appendChild(fragment);
  }
  onunload() {
    if (this.slComm != void 0) {
      this.slComm.slPlugin.activated = false;
      this.slComm.slPlugin.myStatus.setText("Transfer is off");
    }
  }
  createRequest(comm, settings, apiUrl, method, contentType, withBasicAuth, body) {
    let request;
    let myHeader = {};
    contentType = contentType.toLowerCase();
    method = method.toUpperCase();
    switch (contentType.toLowerCase()) {
      case "json": {
        myHeader["Content-Type"] = "application/json";
        break;
      }
      case "asp": {
        myHeader["Content-Type"] = "application/json";
        break;
      }
      case "asp.json": {
        myHeader["Content-Type"] = "application/json";
        break;
      }
      case "text": {
        myHeader["Content-Type"] = "text/plain";
        break;
      }
      default: {
        myHeader["Content-Type"] = contentType;
        break;
      }
    }
    if (withBasicAuth) {
      myHeader["Authorization"] = "Basic " + btoa(settings.mySLSettings[settings.mySetting].myUser + ":" + settings.mySLSettings[settings.mySetting].myPassword);
    }
    request = {
      url: apiUrl,
      method,
      headers: myHeader,
      body
    };
    slconsolelog(DebugLevMap.DebugLevel_Important, this.slComm.slview, request);
    return request;
  }
  getASPCommands(slComm, settings) {
    let parseCommands;
    parseCommands = {
      commands: [{
        outputformat: "ASP.json",
        endpoint: settings.mySLSettings[settings.mySetting].myAspEndpoint,
        param: ""
      }]
    };
    let parseInitial = true;
    if (slComm.slview != null) {
      const editortext = slComm.slUsedMDView.editor.getRange({ line: 0, ch: 0 }, { line: slComm.slUsedMDView.editor.lastLine() + 1, ch: slComm.slUsedMDView.editor.lastLine.length });
      const rows = editortext.split("\n").filter((row) => row.length > 0);
      let myStrResult;
      let transferString;
      let endpointString = "";
      let paramString;
      rows.forEach((row) => {
        if (row.substring(0, semaLogicCommand.command_start.length) == semaLogicCommand.command_start) {
          const transfer = row.indexOf(semaLogicCommand.transfer);
          const endpoint = row.indexOf(semaLogicCommand.transferEndpoint);
          let param = row.indexOf(semaLogicCommand.transferParam);
          const endCommand = row.lastIndexOf(semaLogicCommand.command_end);
          if (param < 0) {
            param = endCommand;
          }
          if (transfer <= 0) {
          } else {
            transferString = row.substring(transfer + semaLogicCommand.transfer.length + 1, endpoint);
            transferString = transferString.trimEnd();
            if (endpoint > 0) {
              endpointString = row.substring(endpoint + 1 + semaLogicCommand.transferEndpoint.length, param);
              endpointString = endpointString.trimEnd();
            }
            if (param > 0 && param != endCommand) {
              paramString = row.substring(param + 1 + semaLogicCommand.transferParam.length, endCommand);
              paramString = paramString.trimEnd();
            }
            let paramParsedCommand = {
              outputformat: transferString,
              endpoint: endpointString,
              param: paramString
            };
            if (parseInitial) {
              parseInitial = false;
              parseCommands.commands[0] = paramParsedCommand;
            } else {
              parseCommands.commands.push(paramParsedCommand);
            }
          }
        }
      });
    }
    return parseCommands;
  }
  async aspParse(slComm, settings, aspJsonParsedSemaLogic, RequestTime) {
    slconsolelog(DebugLevMap.DebugLevel_Current_Dev, this.slComm.slview, "Start Transfer_Parse");
    let vAPI_URL = "";
    const parseCommands = this.getASPCommands(slComm, settings);
    parseCommands.commands.forEach((parseCommands2) => {
      if (parseCommands2.outputformat == RulesettypesCommands[Rstypes_ASP][1] || parseCommands2.outputformat == RulesettypesCommands[Rstypes_ASP][0]) {
        vAPI_URL = getHostAspPort(settings, parseCommands2);
      } else {
        vAPI_URL = parseCommands2.endpoint;
        if (parseCommands2.param != void 0) {
          if (parseCommands2.param.length > 0) {
            vAPI_URL = vAPI_URL + "?" + parseCommands2.param;
          }
        }
        slconsolelog(DebugLevMap.DebugLevel_Current_Dev, this.slComm.slview, "Transfer URL: ", vAPI_URL);
      }
      let optionsParse = this.createRequest(this.slComm, settings, vAPI_URL, "POST", "json", true, aspJsonParsedSemaLogic);
      this.Resp(optionsParse, vAPI_URL, RequestTime);
    });
  }
  async Resp(optionsParse, vAPI_URL, RequestTime) {
    try {
      slconsolelog(DebugLevMap.DebugLevel_Important, this.slComm.slview, "ASP: want to parse ", optionsParse);
      const responseParse = await (0, import_obsidian4.requestUrl)(optionsParse);
      const remJson = responseParse.text;
      slconsolelog(DebugLevMap.DebugLevel_Important, this.slComm.slview, "ASP: Parse with http-status " + responseParse.status.toString());
      if (responseParse.status == 200) {
        if (this.slComm.slaspview.LastRequestTime == RequestTime) {
          let resulthttp = responseParse.text;
          this.setNewASPInitial(true);
          this.contentEl.createEl("br");
          this.contentEl.createEl("span", "---------------------------------------------------------");
          this.contentEl.createEl("br");
          resulthttp = resulthttp.replaceAll("[", "[\n");
          resulthttp = resulthttp.replaceAll("]", "\n]");
          resulthttp = resulthttp.replaceAll(",", ",\n");
          let resulthttpArray = resulthttp.split("\n");
          resulthttpArray.forEach((element) => {
            this.contentEl.append(element);
            this.contentEl.createEl("br");
          });
          slconsolelog(DebugLevMap.DebugLevel_Chatty, this.slComm.slview, `ASP-Parseresult:${resulthttp}`);
        } else {
          slconsolelog(DebugLevMap.DebugLevel_Current_Dev, this.slComm.slview, `Old_ASP-Request: ${RequestTime} vs ${this.slComm.slaspview.LastRequestTime}`);
        }
      }
    } catch (e) {
      slconsolelog(DebugLevMap.DebugLevel_Error, this.slComm.slview, `Catcherror of removing context ${vAPI_URL}`);
      slconsolelog(DebugLevMap.DebugLevel_Error, this.slComm.slview, e.toString());
      let text = new DocumentFragment();
      text.createEl("p");
      let textfragment = new Range().createContextualFragment(e.toString());
      text.appendChild(textfragment);
      text.createEl("p");
      textfragment = new Range().createContextualFragment("See for information about the error-code of http: https://de.wikipedia.org/wiki/HTTP-Statuscode ");
      text.append(textfragment);
      text.createEl("p");
      textfragment = new Range().createContextualFragment(optionsParse.url);
      text.append(textfragment);
      text.createEl("p");
      textfragment = new Range().createContextualFragment(String(optionsParse.body));
      text.append(textfragment);
      this.contentEl.empty();
      this.contentEl.createEl("br");
      this.contentEl.append(text);
    }
  }
};

// main.ts
var import_view3 = require("@codemirror/view");

// src/template.ts
var import_obsidian5 = require("obsidian");
async function createTemplateFolder(vault) {
  const templ = {
    folder: [
      {
        name: slTemplate["PathCommands"],
        files: [
          {
            name: "SL_Transfer",
            content: "SemaLogic(transfer %1 to endpoint %2 with param %3 )"
          },
          {
            name: "SL_ShowHelp",
            content: "SemaLogic(show help)"
          },
          {
            name: "SL_ShowVersion",
            content: "SemaLogic(show version)"
          },
          {
            name: "SL_TableDefine",
            content: "SemaLogic(define table)"
          },
          {
            name: "SL_Show",
            content: "SemaLogic(show as %1 for %2)"
          }
        ]
      },
      {
        name: slTemplate["PathSymTokenComparison"],
        files: [
          {
            name: "SymTokenCompEqual",
            content: "=="
          },
          {
            name: "SymTokenCompGreater",
            content: ">"
          },
          {
            name: "SymTokenCompGreaterEqual",
            content: ">="
          },
          {
            name: "SymTokenCompLess",
            content: "<"
          },
          {
            name: "SymTokenCompLessEqual",
            content: "<="
          },
          {
            name: "SymTokenCompNotEqual",
            content: "!="
          }
        ]
      },
      {
        name: slTemplate["PathSymTokenElements"],
        files: [
          {
            name: "SymTokenAnnounced",
            content: "%"
          },
          {
            name: "SymTokenAttribute",
            content: "$"
          },
          {
            name: "SymTokenCommentEnd",
            content: "*/"
          },
          {
            name: "SymTokenCommentStart",
            content: "/*"
          },
          {
            name: "SymTokenElement",
            content: ","
          },
          {
            name: "SymTokenEOL",
            content: "\n"
          },
          {
            name: "SymTokenEoS",
            content: ";"
          },
          {
            name: "SymTokenEqual",
            content: "\u2261"
          },
          {
            name: "SymTokenFilter",
            content: "\u25BC"
          },
          {
            name: "SymTokenGlobalMax",
            content: "+\u221E"
          },
          {
            name: "SymTokenGlobalMin",
            content: "-\u221E"
          },
          {
            name: "SymTokenIDDevider",
            content: "."
          },
          {
            name: "SymTokenInstance",
            content: "@"
          },
          {
            name: "SymTokenInterval",
            content: "|"
          },
          {
            name: "SymTokenLimit",
            content: "\u0141"
          },
          {
            name: "SymTokenLineComment",
            content: "//"
          },
          {
            name: "SymTokenReverseIDDevider",
            content: ":"
          },
          {
            name: "SymTokenSpace",
            content: " "
          },
          {
            name: "SymTokenVersion",
            content: "#"
          }
        ]
      },
      {
        name: slTemplate["PathSymTokenFunc"],
        files: [
          {
            name: "FuncTokenCount",
            content: "Count"
          },
          {
            name: "FuncTokenMax",
            content: "Max"
          },
          {
            name: "FuncTokenMean",
            content: "Mean"
          },
          {
            name: "FuncTokenMin",
            content: "Min"
          },
          {
            name: "FuncTokenSum",
            content: "Sum"
          },
          {
            name: "FuncTokenUnDef",
            content: "_FuncUndef"
          }
        ]
      },
      {
        name: slTemplate["PathSymTokenMath"],
        files: [
          {
            name: "SymTokenFunctionClose",
            content: ")"
          },
          {
            name: "SymTokenFunctionOpen",
            content: "("
          },
          {
            name: "SymTokenOpDivide",
            content: "/"
          },
          {
            name: "SymTokenOpMinus",
            content: "-"
          },
          {
            name: "SymTokenOpMultiply",
            content: "*"
          },
          {
            name: "SymTokenOpPlus",
            content: "+"
          }
        ]
      },
      {
        name: slTemplate["PathSymTokenRefToken"],
        files: [
          {
            name: "RefTokenAll",
            content: "All"
          },
          {
            name: "RefTokenAnnounced",
            content: "Announced"
          },
          {
            name: "RefTokenChild",
            content: "Child"
          },
          {
            name: "RefTokenLeaf",
            content: "Leaf"
          },
          {
            name: "RefTokenRange",
            content: "Range"
          },
          {
            name: "RefTokenThis",
            content: "This"
          },
          {
            name: "RefTokenUnder",
            content: "Under"
          },
          {
            name: "RefTokenUsed",
            content: "Used"
          },
          {
            name: "RefTokenValue",
            content: "Value"
          }
        ]
      },
      {
        name: slTemplate["PathSymTokenTerms"],
        files: [
          {
            name: "SymTokenAdviceClose",
            content: "!"
          },
          {
            name: "SymTokenAdviceOpen",
            content: "\xA1"
          },
          {
            name: "SymTokenAndClose",
            content: "]"
          },
          {
            name: "SymTokenAndOpen",
            content: "["
          },
          {
            name: "SymTokenCheckClose",
            content: "?"
          },
          {
            name: "SymTokenCheckOpen",
            content: "\xBF"
          },
          {
            name: "SymTokenDialectDefine",
            content: "\u2261"
          },
          {
            name: "SymTokenEqual",
            content: ":="
          },
          {
            name: "SymTokenGroup",
            content: "~"
          },
          {
            name: "SymTokenOrClose",
            content: "}"
          },
          {
            name: "SymTokenOrOpen",
            content: "{"
          },
          {
            name: "SymTokenTimeAfter",
            content: "\u21FD"
          },
          {
            name: "SymTokenTimeBefore",
            content: "\u21FE"
          },
          {
            name: "SymTokenTimeParallelAfter",
            content: "\u2962"
          },
          {
            name: "SymTokenTimeParallelBefore",
            content: "\u2964"
          }
        ]
      }
    ]
  };
  for (var myfolder = 0; myfolder < templ.folder.length; myfolder++) {
    for (var myfile = 0; myfile < templ.folder[myfolder].files.length; myfile++) {
      vault.createFolder(templ.folder[myfolder].name).catch((error) => console.log(error));
      vault.create(
        (0, import_obsidian5.normalizePath)(templ.folder[myfolder].name + "/" + templ.folder[myfolder].files[myfile].name + ".md"),
        templ.folder[myfolder].files[myfile].content
      ).catch((error) => console.log(error));
    }
  }
}

// src/examples.ts
var import_obsidian6 = require("obsidian");
async function createExamples(vault) {
  const templ = {
    folder: [
      {
        name: slTemplate["PathExamplesBasic"],
        files: [
          {
            name: "00_Overview",
            content: "In the next exmaple files there are a few and simple examples to use SemaLogic for biulding semantic logical rulesets. In general the examples should show the operating principle opf SemaLogic and have in mind that the characters of the syntax of the technical language could be replaced by formal (more natural) language as it shown in example from 30 up. \n\n0x - 1x: Simple rules and some of the functionalties\n2x - 3x: Cascading rules and combining with functions\n4x - 5x: Formal language examples\n8x     : Additional technical information for values and so on\n 9x     : Little Glossar for SymTokens\n\n\nPlease keep in mind that this examples are work in progress and we try to expand them to show all the functionality of SemaLogic in future releases of this plugin. \n\nWe also working on [our website](www.SemaLogic.de) - which is currently only available in german -  and are writing an official document for all syntax and structures you are able to use in SemaLogic now and about planned funtionalities. But we can not do everything at the same time.\n\nTechnical Information for using SemaLogic in obsidian: With ALT + T you can access to the SemaLogicToken-Templates !"
          },
          {
            name: "01_AND-Rules",
            content: "Defining a simple and-rule in standard technical language : A is true - if B,C and D are true \n\n---\n\nA [B, C, D]\n"
          },
          {
            name: "02_OR-Rules",
            content: "Defining a simple or-rule in standard technical language : A is true - if B,C or D are true \n\n---\n\nA 1|1 {B, C, D}\n\nIn an OR-Rule it is possible to define how many of the symbols (B,C,D) must be true with the number before and after the pipe-symbol.\n\nE 1|2 {E,F,G}\n\nThis OR-Rule means that one or two of the three symbols (E,F,G) must be true, so that E ist true. If none of the symbols is true or all of them, E will be false as well.\nIf you don't use from|to in an or-rule then it is replaced by from one to all symbols - what means that a minimum of one of the symbols has to be true so that E is true. "
          },
          {
            name: "03_Groups",
            content: "If you don't want to reuse some symbols with in different rule, it it possible to define groups which will be inserted in rules instead of the groups name\n\n---\n\nMyGroup ~ Elem1, Elem2, Elem3 ~\nMyOptions 1|1 {MyGroup}\n"
          },
          {
            name: "04_Dynamic groups",
            content: "It is also possible to define groups for using them in rules, even if you do not know which symbols are in by using an interval.Then the members of the group are defined by the rules dynamically.\n\n---\n\nMyGroup ~ Elem1|Elem4 ~\nElem2 [A,B]\nELem4 {C,D}\nMyOptions 1|1 {MyGroup}\n\nIn this case the ruleset only knows the symbols Elem2 and Elem4, which are inherited by the interval from Elem1 till Elem4. So the group is replaced by Eleem2 and Elem4.\n"
          },
          {
            name: "05_Time dependencies",
            content: "It it possible to define time dependencies for the used symbols. So the results have to be 'time ordered'. \n\n---\n\nA \u21FE B;\nThis means that in a solution A must be sorted before B and in combination with time lines it means that A have to be fullfilled completely before B begins.\n\nA \u2964 B;\nThis means that in a solution A must be sorted before B and in combination with time lines it means that A have to be fullfilled completely before B ends.\n\nIf you want to define this time dependencies vice versa you could use for after \u21FD or for parallel after \u2962.\n"
          },
          {
            name: "10_Values",
            content: "There are a lot of possibilites to put values to the attributes of a symbol or the symbol itself.\n\n---\n\nA.attrib \u2261 15\n\nThis statement will put a value of 15 to the attribute attrib of the symbol A. For example you can define a symbol Germany and put a tax rate to this symbol like Germay.Sales Tax = 19\n"
          },
          {
            name: "15_Using Tables",
            content: "You can reading tables in many different variants to upload rules and relations \n\n---\n\n   SemaLogic(Define Ntable, header((module_exam_number_\u2026), [exam_number_\u2026]), order(1, 2))\n\n| module_exam_number | exam_number |\n| ------------------ | ----------- |\n| 1032 | 10321 |\n| 1030 | 10311 |\n| 1021 | 10213 |\n| 1021 | 10215 |\n| 1021 | 10216 |\n\n "
          },
          {
            name: "20_Cascading rules",
            content: "It is possible to cascade rule only by using same symbolname for a new rule : \nA is true - if B or C is true; \nB is true - if B1 or B2 is true\n C is true - if C1 and C2 are true \n\n---\n\nA [B, C]\nB {B1 , B2}\nC [C1 , C2]"
          },
          {
            name: "40_Formal Language",
            content: "It is possible replace technical Symtokens for using formal language,\nso it ispossible to change dialects as you want with words you use - offical dialects are under development  \n\n---\n\nDas Studium besteht aus einer Abschlussarbeit und umfasst Fachsemester 1 bis Fachsemester 4 als Elemente.\n\n\nSymTokenSpace\u2261einer \nSymTokenSpace\u2261Das \nSymTokenInterval\u2261bis \nSymTokenGroup\u2261 umfasst\nSymTokenGroup\u2261 als Elemente\nSymTokenAndOpen\u2261 besteht aus\nSymTokenElement\u2261 und\nSymTokenAndClose\u2261.\nSymTokenOrClose\u2261.\n"
          }
        ]
      }
    ]
  };
  for (var myfolder = 0; myfolder < templ.folder.length; myfolder++) {
    for (var myfile = 0; myfile < templ.folder[myfolder].files.length; myfile++) {
      vault.createFolder(templ.folder[myfolder].name).catch((error) => console.log(error));
      vault.create(
        (0, import_obsidian6.normalizePath)(templ.folder[myfolder].name + "/" + templ.folder[myfolder].files[myfile].name + ".md"),
        templ.folder[myfolder].files[myfile].content
      ).catch((error) => console.log(error));
    }
  }
}

// main.ts
var DebugLevel = 0;
var mygSID = String(Math.round(Math.random() * 99999999999));
var Default_profile = {
  mySLSettings: [
    {
      myPort: API_Defaults.Port,
      myOutputFormat: "SemaLogic",
      myBaseURL: API_Defaults.Base_URL,
      myGetAPI: API_Defaults.GetAPI,
      mySID: API_Defaults.SID,
      myContext: API_Defaults.ShowContext,
      myUseHttps: API_Defaults.useUserPasswortforHTTP,
      myUser: API_Defaults.HttpUser,
      myPassword: API_Defaults.HttpPassword,
      myUpdateInterval: Value_Defaults.updateInterval,
      myAspUrl: API_Defaults.AspUrl,
      myAspEndpoint: API_Defaults.AspEndpoint,
      myUseHttpsSL: API_Defaults.useUserPasswortforHTTPSL,
      myUserSL: API_Defaults.HttpUserSL,
      myPasswordSL: API_Defaults.HttpPasswordSL
    },
    {
      myPort: API_Defaults.Port,
      myOutputFormat: "SemaLogic",
      myBaseURL: API_Defaults.Base_URL,
      myGetAPI: API_Defaults.GetAPI,
      mySID: API_Defaults.SID,
      myContext: API_Defaults.ShowContext,
      myUseHttps: API_Defaults.useUserPasswortforHTTP,
      myUser: API_Defaults.HttpUser,
      myPassword: API_Defaults.HttpPassword,
      myUpdateInterval: Value_Defaults.updateInterval,
      myAspUrl: API_Defaults.AspUrl,
      myAspEndpoint: API_Defaults.AspEndpoint,
      myUseHttpsSL: API_Defaults.useUserPasswortforHTTPSL,
      myUserSL: API_Defaults.HttpUserSL,
      myPasswordSL: API_Defaults.HttpPasswordSL
    },
    {
      myPort: API_Defaults.Port,
      myOutputFormat: "SemaLogic",
      myBaseURL: API_Defaults.Base_URL,
      myGetAPI: API_Defaults.GetAPI,
      mySID: API_Defaults.SID,
      myContext: API_Defaults.ShowContext,
      myUseHttps: API_Defaults.useUserPasswortforHTTP,
      myUser: API_Defaults.HttpUser,
      myPassword: API_Defaults.HttpPassword,
      myUpdateInterval: Value_Defaults.updateInterval,
      myAspUrl: API_Defaults.AspUrl,
      myAspEndpoint: API_Defaults.AspEndpoint,
      myUseHttpsSL: API_Defaults.useUserPasswortforHTTPSL,
      myUserSL: API_Defaults.HttpUserSL,
      myPasswordSL: API_Defaults.HttpPasswordSL
    }
  ],
  mySetting: 0,
  myDebugLevel: 0
};
var SemaLogicSettingTab = class extends import_obsidian7.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for SemaLogic:" });
    new import_obsidian7.Setting(containerEl).setName("General DebugLevel").setDesc("You can set a DebugLevel for Developmentinformation").addDropdown((dropDown) => dropDown.addOption("0", DebugLevelNames[0]).addOption("1", DebugLevelNames[1]).addOption("2", DebugLevelNames[2]).addOption("3", DebugLevelNames[3]).addOption("4", DebugLevelNames[4]).addOption("5", DebugLevelNames[5]).setValue(String(this.plugin.settings.myDebugLevel)).onChange(async (value) => {
      slconsolelog(DebugLevMap.DebugLevel_High, void 0, "Set DebugLevel: " + DebugLevelNames[parseInt(value)]);
      this.plugin.settings.myDebugLevel = parseInt(value);
      DebugLevel = parseInt(value);
      await this.plugin.saveSettings();
      this.display();
    }));
    new import_obsidian7.Setting(containerEl).setName("Change your setting profile").setDesc("You can define different profiles for your SemaLogicService").addDropdown((dropDown) => dropDown.addOption("0", "Profile 1").addOption("1", "Profile 2").addOption("2", "Profile 3").setValue(this.plugin.settings.mySetting.toString()).onChange(async (value) => {
      slconsolelog(DebugLevMap.DebugLevel_High, void 0, "Set Profile: " + value);
      this.plugin.settings.mySetting = parseInt(value);
      this.display();
      await this.plugin.saveSettings();
    }));
    new import_obsidian7.Setting(containerEl).setName("Standard updateinterval").addText((setting) => setting.setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myUpdateInterval.toString()).onChange(async (value) => {
      slconsolelog(DebugLevMap.DebugLevel_Important, void 0, "Set Update Interval: " + value);
      this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myUpdateInterval = parseInt(value);
      window.clearInterval(this.plugin.interval);
      this.plugin.registerInterval(
        this.plugin.interval = window.setInterval(this.plugin.handleUpdate, this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myUpdateInterval)
      );
      await this.plugin.saveSettings();
    }));
    new import_obsidian7.Setting(containerEl).setName("BaseUrl").setDesc("BaseURL for reaching SemaLogicService").addText((text) => text.setPlaceholder(API_Defaults.Base_URL).setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myBaseURL).onChange(async (value) => {
      slconsolelog(DebugLevMap.DebugLevel_Important, void 0, "Set BaseURL: " + value);
      this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myBaseURL = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian7.Setting(containerEl).setName("Path to Get-API-Endpoints").setDesc("Path to Get-API for more Information about the Endpoints of used APIs").addText((text) => text.setPlaceholder(API_Defaults.GetAPI).setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myGetAPI).onChange(async (value) => {
      slconsolelog(DebugLevMap.DebugLevel_Important, void 0, "Set to Get-API-Endpoint: " + value);
      this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myGetAPI = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian7.Setting(containerEl).setName("Port SemaLogic").setDesc("Enter the Port").addText((text) => text.setPlaceholder(API_Defaults.Port).setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myPort).onChange(async (value) => {
      slconsolelog(DebugLevMap.DebugLevel_Important, void 0, "Set to Port: " + value);
      this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myPort = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian7.Setting(containerEl).setName("OutputFormat").setDesc("Here you can set the outputformat for SemaLogic, which could be get from SemaLogicService").addDropdown((dropDown) => dropDown.addOption(RulesettypesCommands[Rstypes_Semalogic][1], RulesettypesCommands[Rstypes_Semalogic][0]).addOption(RulesettypesCommands[Rstypes_ASP][1], RulesettypesCommands[Rstypes_ASP][0]).addOption(RulesettypesCommands[Rstypes_Picture][1], RulesettypesCommands[Rstypes_Picture][0]).addOption(RulesettypesCommands[Rstypes_SemanticTree][1], RulesettypesCommands[Rstypes_SemanticTree][0]).addOption(RulesettypesCommands[Rstypes_KnowledgeGraph][1], RulesettypesCommands[Rstypes_KnowledgeGraph][0]).setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myOutputFormat).onChange(async (value) => {
      slconsolelog(DebugLevMap.DebugLevel_Important, void 0, "Set Outputformat: " + value);
      this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myOutputFormat = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian7.Setting(containerEl).setName("Secure HTTP-Request SemaLogic").setDesc("If you has to use User/Password for http-request to the semalogic service").addToggle((setting) => setting.setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myUseHttpsSL).onChange(async (value) => {
      slconsolelog(DebugLevMap.DebugLevel_Important, void 0, "Set UserPasswordRequest: " + value);
      this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myUseHttpsSL = value;
      await this.plugin.saveSettings();
      this.display();
    }));
    if (this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myUseHttpsSL) {
      new import_obsidian7.Setting(containerEl).setName("HTTP-Request-User").setDesc("User to reach transfer service").addText((text) => text.setPlaceholder(API_Defaults.HttpUserSL).setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myUserSL).onChange(async (value) => {
        slconsolelog(DebugLevMap.DebugLevel_Important, void 0, "Set HTTP-Request-User...");
        this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myUserSL = value;
        await this.plugin.saveSettings();
      }));
      new import_obsidian7.Setting(containerEl).setName("HTTP-Request-Password").setDesc("Password to reach transfer service").addText((text) => text.setPlaceholder(API_Defaults.HttpPasswordSL).setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myPasswordSL).onChange(async (value) => {
        slconsolelog(DebugLevMap.DebugLevel_Important, void 0, "Set HTTP-Request-Password...");
        this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myPasswordSL = value;
        await this.plugin.saveSettings();
      }));
    }
    new import_obsidian7.Setting(containerEl).setName("Show Context in Reading View").addToggle((setting) => setting.setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myContext).onChange(async (value) => {
      slconsolelog(DebugLevMap.DebugLevel_Important, void 0, "Set Context of Reading View: " + value);
      this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myContext = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h1", { text: "_______________________________" });
    containerEl.createEl("h2", { text: "Settings for Transfer/ASP-View:" });
    new import_obsidian7.Setting(containerEl).setName("BaseUrl for Transfer/ASP").setDesc("BaseURL for reaching Transfer/ASP-Service").addText((text) => text.setPlaceholder(API_Defaults.AspUrl).setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myAspUrl).onChange(async (value) => {
      slconsolelog(DebugLevMap.DebugLevel_Important, void 0, "Set Transfer/ASP-BaseURL: " + value);
      this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myAspUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian7.Setting(containerEl).setName("Path to Get-Transfer/ASP-StandardAPI-Endpoint").setDesc("Path to Transfer/ASP-Standard-API ").addText((text) => text.setPlaceholder(API_Defaults.AspEndpoint).setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myAspEndpoint).onChange(async (value) => {
      slconsolelog(DebugLevMap.DebugLevel_Important, void 0, "Set to Transfer/ASP-Standard-API-Endpoint: " + value);
      this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myAspEndpoint = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian7.Setting(containerEl).setName("Secure HTTP-Request").setDesc("If you has to use User/Password for http-request to the transfer service").addToggle((setting) => setting.setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myUseHttps).onChange(async (value) => {
      slconsolelog(DebugLevMap.DebugLevel_Important, void 0, "Set UserPasswordRequest: " + value);
      this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myUseHttps = value;
      await this.plugin.saveSettings();
      this.display();
    }));
    if (this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myUseHttps) {
      new import_obsidian7.Setting(containerEl).setName("HTTP-Request-User").setDesc("User to reach transfer service").addText((text) => text.setPlaceholder(API_Defaults.HttpUser).setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myUser).onChange(async (value) => {
        slconsolelog(DebugLevMap.DebugLevel_Important, void 0, "Set HTTP-Request-User...");
        this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myUser = value;
        await this.plugin.saveSettings();
      }));
      new import_obsidian7.Setting(containerEl).setName("HTTP-Request-Password").setDesc("Password to reach transfer service").addText((text) => text.setPlaceholder(API_Defaults.HttpPassword).setValue(this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myPassword).onChange(async (value) => {
        slconsolelog(DebugLevMap.DebugLevel_Important, void 0, "Set HTTP-Request-Password...");
        this.plugin.settings.mySLSettings[this.plugin.settings.mySetting].myPassword = value;
        await this.plugin.saveSettings();
      }));
    }
  }
};
var SemaLogicPluginComm2 = class {
  constructor() {
    this.activatedASP = false;
  }
  setSlView(view) {
    this.slview = view;
  }
  setSLClass(slclass) {
    this.slPlugin = slclass;
  }
  add(a, b) {
    return a + b;
  }
};
var SemaLogicPlugin = class extends import_obsidian7.Plugin {
  constructor() {
    super(...arguments);
    this.activated = false;
    this.updating = false;
    this.lastUpdate = 0;
    this.updateOutstanding = false;
    this.updateTransferOutstanding = false;
    this.updateOutstandingSetting = false;
    this.waitingForResponse = false;
    this.UpdateProcessing = false;
    this.view_utils = new ViewUtils();
    this.handleUpdate = (update) => {
      if (this.statusSL) {
        const text = "Updatetime/" + String(Date.now()) + "/" + String(this.lastUpdate) + "/" + String(Date.now() - this.lastUpdate) + "/" + String(this.updateOutstanding) + "/" + String(this.waitingForResponse);
        slconsolelog(DebugLevMap.DebugLevel_Current_Dev, this.slComm.slview, text);
        if (update == null) {
        } else {
          if (update.view) {
            if (!update.docChanged && !update.focusChanged) {
              return;
            } else {
              if (this.UpdateProcessing == false) {
                slconsolelog(DebugLevMap.DebugLevel_Current_Dev, this.slComm.slview, "Start Update docChanged, focuschanged, UpdProc  " + String(update.docChanged) + "/" + String(update.focusChanged) + "/" + String(this.UpdateProcessing));
                this.semaLogicUpdate();
              }
            }
          }
        }
        if (Date.now() - this.lastUpdate > this.settings.mySLSettings[this.settings.mySetting].myUpdateInterval && (this.updateOutstanding == true || this.updateTransferOutstanding == true) && this.waitingForResponse == false) {
          slconsolelog(DebugLevMap.DebugLevel_Current_Dev, this.slComm.slview, "Start Update PARSING");
          this.lastUpdate = Date.now();
          this.semaLogicUpdate();
        } else if (Date.now() - this.lastUpdate > this.settings.mySLSettings[this.settings.mySetting].myUpdateInterval && this.updateOutstanding == true && this.waitingForResponse == false) {
          semaLogicPing(this.settings, this.lastUpdate);
        }
      }
    };
  }
  getContextFromLine(mydialectID) {
    mydialectID = mydialectID.replace("SemaLogicContext\u2261", "SemaLogicDialect\u2261");
    let re = /\t/gi;
    mydialectID = mydialectID.replace(re, "");
    re = /\n/gi;
    mydialectID = mydialectID.replace(re, "");
    return { mydialectID };
  }
  getActiveView() {
    const activeView = app.workspace.getActiveViewOfType(import_obsidian7.MarkdownView);
    if (activeView === null) {
      if (this.lastactiveView === null) {
        slconsolelog(DebugLevMap.DebugLevel_High, this.slComm.slview, "ActiveView could not be defined through SemaLogic");
        return;
      } else {
        return this.lastactiveView;
      }
    }
    this.lastactiveView = activeView;
    slconsolelog(DebugLevMap.DebugLevel_Important, this.slComm.slview, this.lastactiveView.getDisplayText());
    return this.lastactiveView;
  }
  setViews() {
    this.slComm.activatedASP = false;
    this.app.workspace.iterateAllLeaves((leaf) => {
      switch (leaf.view.getViewType()) {
        case SemaLogicViewType: {
          this.slComm.slview = leaf.view;
          this.slComm.slview.setComm(this.slComm);
          this.slComm.slview.slComm.setSlView(this.slComm.slview);
          this.slComm.slview.slComm.slPlugin = this.slComm.slPlugin;
          this.activated = true;
          this.statusSL = true;
          break;
        }
        case ASPViewType: {
          this.slComm.slaspview = leaf.view;
          this.slComm.slaspview.setComm(this.slComm);
          this.slComm.slaspview.slComm.setSlView(this.slComm.slview);
          this.slComm.slaspview.slComm.slPlugin = this.slComm.slPlugin;
          this.slComm.activatedASP = true;
          this.statusTransfer = true;
          break;
        }
      }
    });
    this.getActiveView();
  }
  async onload() {
    this.registerMarkdownPostProcessor((element, context) => {
      slconsolelog(DebugLevMap.DebugLevel_Chatty, void 0, element);
      slconsolelog(DebugLevMap.DebugLevel_Chatty, void 0, context);
      element.querySelectorAll("p").forEach((el) => {
        if (searchForSemaLogicCommands(el)) {
          let set = this.settings;
          context.addChild(new SemaLogicRenderedElement({ containerEl: el, set }));
        }
      });
    });
    this.addSettingTab(new SemaLogicSettingTab(this.app, this));
    await this.loadSettings();
    DebugLevel = this.settings.myDebugLevel;
    this.myStatus = this.addStatusBarItem();
    this.slComm = new SemaLogicPluginComm2();
    this.slComm.setSLClass(this);
    this.activateView();
    await this.semaLogicReset();
    this.setViews();
    this.addRibbonIcon("book", "On/Off SemaLogic.View", () => {
      this.setViews();
      if (this.activated == false) {
        this.statusSL = true;
        if (!this.activated) {
          this.activateView();
        }
      } else {
        this.statusSL = false;
        this.deactivateView();
      }
    });
    this.addRibbonIcon("dice", "On/Off Transfer.View", () => {
      this.setViews();
      if (this.slComm != void 0) {
        if (this.slComm.activatedASP == false) {
          this.activateASPView();
        } else {
          this.deactivateASPView();
        }
      }
    });
    this.addCommand({
      id: "sl_create_template",
      name: "SemaLogic create template",
      callback: () => {
        createTemplateFolder(app.vault);
        createExamples(app.vault);
      }
    });
    if (this.statusSL) {
      this.semaLogicReset();
      this.slComm.slview.setNewInitial(this.settings.mySLSettings[this.settings.mySetting].myOutputFormat, true);
      this.semaLogicParse();
    }
    this.registerInterval(
      this.interval = window.setInterval(this.handleUpdate, this.settings.mySLSettings[this.settings.mySetting].myUpdateInterval)
    );
    this.registerEditorExtension([import_view3.EditorView.updateListener.of(this.handleUpdate)]);
  }
  async semaLogicParse() {
    this.setViews();
    slconsolelog(DebugLevMap.DebugLevel_, this.slComm.slview, "Start SemaLogicParse");
    let results = [];
    this.lastUpdate = Date.now();
    await semaLogicPing(this.settings, this.lastUpdate);
    let vAPI_URL = getHostPort(this.settings) + API_Defaults.rules_parse + "?sid=" + mygSID;
    slconsolelog(DebugLevMap.DebugLevel_Important, this.slComm.slview, vAPI_URL);
    let bodytext = "";
    let activeView = this.getActiveView();
    if (activeView != void 0) {
      this.slComm.slUsedMDView = activeView;
    }
    let dialectID = "default";
    let codeblock = false;
    let newCodeblock = false;
    if (activeView != null) {
      slconsolelog(DebugLevMap.DebugLevel_Chatty, this.slComm.slview, "ActiveView is not NULL");
      for (let i = 0; i < activeView.editor.lineCount(); i++) {
        slconsolelog(DebugLevMap.DebugLevel_All, this.slComm.slview, i, ";", activeView.editor.getLine(i));
        slconsolelog(DebugLevMap.DebugLevel_All, this.slComm.slview, "Substring:", activeView.editor.getLine(i).substring(0, 2));
        if (activeView.editor.getLine(i).substring(0, 3) == "```") {
          if (!codeblock) {
            codeblock = true;
            newCodeblock = true;
            slconsolelog(DebugLevMap.DebugLevel_Chatty, this.slComm.slview, "Current line is Codeblock: " + i.toString(), codeblock);
          } else {
            newCodeblock = false;
          }
        }
        if (!codeblock && !newCodeblock) {
          bodytext = bodytext.concat(activeView.editor.getLine(i) + "\n");
        } else {
          switch (activeView.editor.getLine(i).substring(0, semaLogicCommand.useDialect.length)) {
            case semaLogicCommand.useDialect: {
              dialectID = activeView.editor.getLine(i).substring(semaLogicCommand.useDialect.length, activeView.editor.getLine(i).length - 1);
              dialectID = dialectID.trim();
              break;
            }
            default: {
            }
          }
        }
        if (i < activeView.editor.lineCount()) {
          if (activeView.editor.getLine(i).substring(0, 3) == "```") {
            if (codeblock && !newCodeblock) {
              codeblock = false;
            } else {
              newCodeblock = false;
            }
          }
        }
      }
    }
    bodytext = this.view_utils.cleanCommands(bodytext);
    if (dialectID == "") {
      dialectID = "default";
    }
    slconsolelog(DebugLevMap.DebugLevel_Chatty, void 0, "Parsingresult for SemaLogicView");
    const responseForSemaLogic = this.slComm.slview.getSemaLogicParse(this.settings, vAPI_URL, dialectID, bodytext, false);
    responseForSemaLogic.then((value) => {
      slconsolelog(DebugLevMap.DebugLevel_Chatty, void 0, value);
    });
    if (this.slComm.activatedASP) {
      if (Date.now() - this.slComm.slaspview.LastRequestTime >= this.settings.mySLSettings[this.settings.mySetting].myUpdateInterval) {
        this.slComm.slaspview.LastRequestTime = Date.now();
        slconsolelog(DebugLevMap.DebugLevel_Current_Dev, this.slComm.slview, `Set-Requesttime: ${this.slComm.slaspview.LastRequestTime}`);
        this.updateTransferOutstanding = false;
        let outputFormat = RulesettypesCommands[Rstypes_ASP][1];
        const responseForASP = this.slComm.slview.getSemaLogicParse(this.settings, vAPI_URL, dialectID, bodytext, true, outputFormat);
        responseForASP.then((value) => {
          slconsolelog(DebugLevMap.DebugLevel_Chatty, this.slComm.slview, value);
          const aspPromise = this.slComm.slaspview.aspParse(this.slComm, this.settings, value, this.slComm.slaspview.LastRequestTime);
          aspPromise.then((value2) => {
            if (value2 != void 0) {
              slconsolelog(DebugLevMap.DebugLevel_Current_Dev, this.slComm.slview, value2);
            }
          });
        });
      } else {
        this.updateTransferOutstanding = true;
      }
    }
    return results;
  }
  async activateASPView() {
    if (this.slComm.slaspview == void 0) {
      this.registerView(
        ASPViewType,
        (leaf2) => new ASPView(leaf2)
      );
    }
    const leaf = this.GetAspLeaf();
    if (leaf != void 0) {
      leaf.setViewState({
        type: ASPViewType,
        active: false
      });
      await this.semaLogicReset();
      this.app.workspace.revealLeaf(leaf);
    } else {
      slconsolelog(DebugLevMap.DebugLevel_Chatty, void 0, "ASP-Leaf not created");
    }
    this.setViews();
    this.handlePing();
    this.statusTransfer = true;
    this.semaLogicUpdate();
    this.myStatus.setText("ASP is on");
  }
  async activateView() {
    if (this.slComm.slview == void 0) {
      this.registerView(
        SemaLogicViewType,
        (leaf2) => new SemaLogicView2(leaf2)
      );
    }
    const leaf = this.GetSemaLogicLeaf();
    if (leaf != void 0) {
      leaf.setViewState({
        type: SemaLogicViewType,
        active: false
      });
      await this.semaLogicReset();
      this.app.workspace.revealLeaf(leaf);
    } else {
      slconsolelog(DebugLevMap.DebugLevel_Chatty, void 0, "SemaLogic-Leaf not created");
    }
    this.setViews();
    this.handlePing();
    this.semaLogicUpdate();
    this.myStatus.setText("SemaLogic is on");
  }
  async deactivateASPView() {
    this.app.workspace.detachLeavesOfType(ASPViewType);
    this.slComm.activatedASP = false;
    this.statusTransfer = true;
    this.myStatus.setText("ASP is off");
  }
  async deactivateView() {
    this.app.workspace.detachLeavesOfType(SemaLogicViewType);
    this.activated = false;
    this.slComm.slview.unload();
    this.myStatus.setText("SemaLogic is off");
  }
  GetAspLeaf() {
    let found = false;
    let slv = void 0;
    this.app.workspace.iterateAllLeaves((leaf) => {
      if (!found) {
        switch (leaf.view.getViewType()) {
          case ASPViewType: {
            found = true;
            slv = leaf;
          }
        }
      }
    });
    if (!found) {
      slconsolelog(DebugLevMap.DebugLevel_All, void 0, "Split");
      slv = this.app.workspace.getLeaf("split");
      slconsolelog(DebugLevMap.DebugLevel_All, void 0, slv);
    }
    return slv;
  }
  GetSemaLogicLeaf() {
    let found = false;
    let slv = void 0;
    this.app.workspace.iterateAllLeaves((leaf) => {
      if (!found) {
        switch (leaf.view.getViewType()) {
          case SemaLogicViewType: {
            found = true;
            slv = leaf;
          }
        }
      }
    });
    if (!found) {
      slconsolelog(DebugLevMap.DebugLevel_All, void 0, "Split");
      slv = this.app.workspace.getLeaf("split");
      slconsolelog(DebugLevMap.DebugLevel_All, void 0, slv);
    }
    return slv;
  }
  async onunload() {
    this.app.workspace.detachLeavesOfType(ASPViewType);
  }
  async loadSettings() {
    this.settings = Object.assign({}, Default_profile, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    if (this.slComm.slview != void 0) {
      this.slComm.slview.setNewInitial(this.settings.mySLSettings[this.settings.mySetting].myOutputFormat, false);
    }
    this.updateOutstanding = true;
  }
  handlePing() {
    semaLogicPing(this.settings, this.lastUpdate);
  }
  semaLogicUpdate(setView) {
    this.waitingForResponse = true;
    this.UpdateProcessing = true;
    if (setView == true || setView == void 0) {
      this.setViews();
    }
    slconsolelog(DebugLevMap.DebugLevel_Chatty, this.slComm.slview, "Start SemaLogicUpdate");
    this.setViews();
    let activeView = this.getActiveView();
    this.semaLogicParse();
    if (!this.updating) {
      this.updating = true;
      this.updating = false;
    }
    this.UpdateProcessing = false;
    this.waitingForResponse = false;
  }
  getSemaLogicText() {
    if (this.slComm.slview.contentEl.textContent == null) {
      return "";
    } else {
      return this.slComm.slview.getContent();
    }
  }
  async semaLogicReset() {
    let vAPI_URL_Reset = getHostPort(this.settings) + API_Defaults.reset + "?sid=" + mygSID;
    let optionsReset;
    if (this.settings.mySLSettings[this.settings.mySetting].myUseHttpsSL && this.settings.mySLSettings[this.settings.mySetting].myUserSL != "") {
      optionsReset = {
        url: vAPI_URL_Reset,
        method: "POST",
        headers: {
          "content-type": "text/plain",
          "Authorization": "Basic " + btoa(this.settings.mySLSettings[this.settings.mySetting].myUserSL + ":" + this.settings.mySLSettings[this.settings.mySetting].myPasswordSL)
        }
      };
    } else {
      optionsReset = {
        url: vAPI_URL_Reset,
        method: "POST",
        headers: {
          "content-type": "text/plain"
        }
      };
    }
    slconsolelog(DebugLevMap.DebugLevel_Important, this.slComm.slview, optionsReset);
    try {
      const responseReset = await (0, import_obsidian7.requestUrl)(optionsReset);
      slconsolelog(DebugLevMap.DebugLevel_Informative, this.slComm.slview, `SemaLogic: Reset with http-status ${responseReset.status.toString()}`);
    } catch (e) {
      slconsolelog(DebugLevMap.DebugLevel_Error, this.slComm.slview, `Catcherror by reset ${vAPI_URL_Reset}`);
      slconsolelog(DebugLevMap.DebugLevel_Error, this.slComm.slview, e.toString());
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzcmMvdmlldy50cyIsICJzcmMvY29uc3QudHMiLCAic3JjL3V0aWxzLnRzIiwgInNyYy92aWV3X3V0aWxzLnRzIiwgInNyYy92aWV3X2FzcC50cyIsICJzcmMvdGVtcGxhdGUudHMiLCAic3JjL2V4YW1wbGVzLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgeyBBcHAsIE1hcmtkb3duVmlldywgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCByZXF1ZXN0VXJsLCBTZXR0aW5nLCBXb3Jrc3BhY2VMZWFmLCByZW5kZXJSZXN1bHRzLCBSZXF1ZXN0VXJsUGFyYW0sIFJlcXVlc3RVcmxSZXNwb25zZSwgUmVxdWVzdFVybFJlc3BvbnNlUHJvbWlzZSwgQnV0dG9uQ29tcG9uZW50LCBNYXJrZG93blJlbmRlckNoaWxkLCBNYXJrZG93blByZXZpZXdWaWV3LCBWaWV3IH1cclxuXHRmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IFNlbWFMb2dpY1ZpZXcsIFNlbWFMb2dpY1ZpZXdUeXBlIH0gZnJvbSBcIi4vc3JjL3ZpZXdcIjtcclxuaW1wb3J0IHsgQVNQVmlldywgQVNQVmlld1R5cGUgfSBmcm9tIFwiLi9zcmMvdmlld19hc3BcIjtcclxuaW1wb3J0IHsgVmlld1VwZGF0ZSwgRWRpdG9yVmlldyB9IGZyb20gXCJAY29kZW1pcnJvci92aWV3XCI7XHJcbmltcG9ydCB7IFNlbWFMb2dpY1JlbmRlcmVkRWxlbWVudCwgc2VhcmNoRm9yU2VtYUxvZ2ljQ29tbWFuZHMsIGdldEhvc3RQb3J0LCBzZW1hTG9naWNQaW5nLCBzbGNvbnNvbGVsb2cgfSBmcm9tIFwiLi9zcmMvdXRpbHNcIjtcclxuaW1wb3J0IHsgQVBJX0RlZmF1bHRzLCBWYWx1ZV9EZWZhdWx0cywgc2VtYUxvZ2ljQ29tbWFuZCwgUnVsZXNldHR5cGVzQ29tbWFuZHMsIFJzdHlwZXNfU2VtYWxvZ2ljLCBSc3R5cGVzX1BpY3R1cmUsIFJzdHlwZXNfQVNQLCBEZWJ1Z0xldk1hcCwgRGVidWdMZXZlbE5hbWVzLCBSc3R5cGVzX0tub3dsZWRnZUdyYXBoLCBSc3R5cGVzX1NlbWFudGljVHJlZSB9IGZyb20gXCIuL3NyYy9jb25zdFwiXHJcbmltcG9ydCB7IFZpZXdVdGlscyB9IGZyb20gJ3NyYy92aWV3X3V0aWxzJztcclxuaW1wb3J0IHsgY3JlYXRlVGVtcGxhdGVGb2xkZXIgfSBmcm9tICdzcmMvdGVtcGxhdGUnO1xyXG5pbXBvcnQgeyBjcmVhdGVFeGFtcGxlcyB9IGZyb20gJ3NyYy9leGFtcGxlcyc7XHJcbi8vaW1wb3J0IHsgUnN0eXBlc19TZW1hbnRpY1RyZWUgfSBmcm9tICdzcmMvY29uc3Qgb25seSBmb3IgVVAnO1xyXG5cclxuZXhwb3J0IHZhciBEZWJ1Z0xldmVsID0gMDtcclxuXHJcbmV4cG9ydCB2YXIgbXlnU0lEID0gU3RyaW5nKE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDk5OTk5OTk5OTk5KSlcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU0xTZXR0aW5nIHtcclxuXHRteVBvcnQ6IHN0cmluZztcclxuXHRteU91dHB1dEZvcm1hdDogc3RyaW5nO1xyXG5cdG15QmFzZVVSTDogc3RyaW5nO1xyXG5cdG15R2V0QVBJOiBzdHJpbmc7XHJcblx0bXlTSUQ6IHN0cmluZztcclxuXHRteUNvbnRleHQ6IGJvb2xlYW47XHJcblx0bXlVcGRhdGVJbnRlcnZhbDogbnVtYmVyO1xyXG5cdG15VXNlSHR0cHM6IGJvb2xlYW4sXHJcblx0bXlVc2VyOiBzdHJpbmcsXHJcblx0bXlQYXNzd29yZDogc3RyaW5nLFxyXG5cdG15QXNwVXJsOiBzdHJpbmcsXHJcblx0bXlBc3BFbmRwb2ludDogc3RyaW5nLFxyXG5cdG15VXNlSHR0cHNTTDogYm9vbGVhbixcclxuXHRteVVzZXJTTDogc3RyaW5nLFxyXG5cdG15UGFzc3dvcmRTTDogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2VtYUxvZ2ljUGx1Z2luU2V0dGluZ3Mge1xyXG5cdG15U0xTZXR0aW5nczogU0xTZXR0aW5nW107XHJcblx0bXlTZXR0aW5nOiBudW1iZXI7XHJcblx0bXlEZWJ1Z0xldmVsOiBudW1iZXI7XHJcbn1cclxuZXhwb3J0IGNvbnN0IERlZmF1bHRfcHJvZmlsZTogU2VtYUxvZ2ljUGx1Z2luU2V0dGluZ3MgPSB7XHJcblx0bXlTTFNldHRpbmdzOiBbe1xyXG5cdFx0bXlQb3J0OiBBUElfRGVmYXVsdHMuUG9ydCxcclxuXHRcdG15T3V0cHV0Rm9ybWF0OiAnU2VtYUxvZ2ljJyxcclxuXHRcdG15QmFzZVVSTDogQVBJX0RlZmF1bHRzLkJhc2VfVVJMLFxyXG5cdFx0bXlHZXRBUEk6IEFQSV9EZWZhdWx0cy5HZXRBUEksXHJcblx0XHRteVNJRDogQVBJX0RlZmF1bHRzLlNJRCxcclxuXHRcdG15Q29udGV4dDogQVBJX0RlZmF1bHRzLlNob3dDb250ZXh0LFxyXG5cdFx0bXlVc2VIdHRwczogQVBJX0RlZmF1bHRzLnVzZVVzZXJQYXNzd29ydGZvckhUVFAsXHJcblx0XHRteVVzZXI6IEFQSV9EZWZhdWx0cy5IdHRwVXNlcixcclxuXHRcdG15UGFzc3dvcmQ6IEFQSV9EZWZhdWx0cy5IdHRwUGFzc3dvcmQsXHJcblx0XHRteVVwZGF0ZUludGVydmFsOiBWYWx1ZV9EZWZhdWx0cy51cGRhdGVJbnRlcnZhbCxcclxuXHRcdG15QXNwVXJsOiBBUElfRGVmYXVsdHMuQXNwVXJsLFxyXG5cdFx0bXlBc3BFbmRwb2ludDogQVBJX0RlZmF1bHRzLkFzcEVuZHBvaW50LFxyXG5cdFx0bXlVc2VIdHRwc1NMOiBBUElfRGVmYXVsdHMudXNlVXNlclBhc3N3b3J0Zm9ySFRUUFNMLFxyXG5cdFx0bXlVc2VyU0w6IEFQSV9EZWZhdWx0cy5IdHRwVXNlclNMLFxyXG5cdFx0bXlQYXNzd29yZFNMOiBBUElfRGVmYXVsdHMuSHR0cFBhc3N3b3JkU0xcclxuXHR9LFxyXG5cdHtcclxuXHRcdG15UG9ydDogQVBJX0RlZmF1bHRzLlBvcnQsXHJcblx0XHRteU91dHB1dEZvcm1hdDogJ1NlbWFMb2dpYycsXHJcblx0XHRteUJhc2VVUkw6IEFQSV9EZWZhdWx0cy5CYXNlX1VSTCxcclxuXHRcdG15R2V0QVBJOiBBUElfRGVmYXVsdHMuR2V0QVBJLFxyXG5cdFx0bXlTSUQ6IEFQSV9EZWZhdWx0cy5TSUQsXHJcblx0XHRteUNvbnRleHQ6IEFQSV9EZWZhdWx0cy5TaG93Q29udGV4dCxcclxuXHRcdG15VXNlSHR0cHM6IEFQSV9EZWZhdWx0cy51c2VVc2VyUGFzc3dvcnRmb3JIVFRQLFxyXG5cdFx0bXlVc2VyOiBBUElfRGVmYXVsdHMuSHR0cFVzZXIsXHJcblx0XHRteVBhc3N3b3JkOiBBUElfRGVmYXVsdHMuSHR0cFBhc3N3b3JkLFxyXG5cdFx0bXlVcGRhdGVJbnRlcnZhbDogVmFsdWVfRGVmYXVsdHMudXBkYXRlSW50ZXJ2YWwsXHJcblx0XHRteUFzcFVybDogQVBJX0RlZmF1bHRzLkFzcFVybCxcclxuXHRcdG15QXNwRW5kcG9pbnQ6IEFQSV9EZWZhdWx0cy5Bc3BFbmRwb2ludCxcclxuXHRcdG15VXNlSHR0cHNTTDogQVBJX0RlZmF1bHRzLnVzZVVzZXJQYXNzd29ydGZvckhUVFBTTCxcclxuXHRcdG15VXNlclNMOiBBUElfRGVmYXVsdHMuSHR0cFVzZXJTTCxcclxuXHRcdG15UGFzc3dvcmRTTDogQVBJX0RlZmF1bHRzLkh0dHBQYXNzd29yZFNMXHJcblx0fSxcclxuXHR7XHJcblx0XHRteVBvcnQ6IEFQSV9EZWZhdWx0cy5Qb3J0LFxyXG5cdFx0bXlPdXRwdXRGb3JtYXQ6ICdTZW1hTG9naWMnLFxyXG5cdFx0bXlCYXNlVVJMOiBBUElfRGVmYXVsdHMuQmFzZV9VUkwsXHJcblx0XHRteUdldEFQSTogQVBJX0RlZmF1bHRzLkdldEFQSSxcclxuXHRcdG15U0lEOiBBUElfRGVmYXVsdHMuU0lELFxyXG5cdFx0bXlDb250ZXh0OiBBUElfRGVmYXVsdHMuU2hvd0NvbnRleHQsXHJcblx0XHRteVVzZUh0dHBzOiBBUElfRGVmYXVsdHMudXNlVXNlclBhc3N3b3J0Zm9ySFRUUCxcclxuXHRcdG15VXNlcjogQVBJX0RlZmF1bHRzLkh0dHBVc2VyLFxyXG5cdFx0bXlQYXNzd29yZDogQVBJX0RlZmF1bHRzLkh0dHBQYXNzd29yZCxcclxuXHRcdG15VXBkYXRlSW50ZXJ2YWw6IFZhbHVlX0RlZmF1bHRzLnVwZGF0ZUludGVydmFsLFxyXG5cdFx0bXlBc3BVcmw6IEFQSV9EZWZhdWx0cy5Bc3BVcmwsXHJcblx0XHRteUFzcEVuZHBvaW50OiBBUElfRGVmYXVsdHMuQXNwRW5kcG9pbnQsXHJcblx0XHRteVVzZUh0dHBzU0w6IEFQSV9EZWZhdWx0cy51c2VVc2VyUGFzc3dvcnRmb3JIVFRQU0wsXHJcblx0XHRteVVzZXJTTDogQVBJX0RlZmF1bHRzLkh0dHBVc2VyU0wsXHJcblx0XHRteVBhc3N3b3JkU0w6IEFQSV9EZWZhdWx0cy5IdHRwUGFzc3dvcmRTTFxyXG5cdH0sXHJcblx0XSxcclxuXHRteVNldHRpbmc6IDAsXHJcblx0bXlEZWJ1Z0xldmVsOiAwLFxyXG59XHJcblxyXG5cclxuY29uc3QgZ2V0RGVidWdMZXZlbCA9IChEZWJ1Z0xldmVsTmFtZTogc3RyaW5nKTogbnVtYmVyID0+IHtcclxuXHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9DaGF0dHksIHVuZGVmaW5lZCwgJ0dldCBmb3IgRGVidWdMZXZlbE5hbWUnLCBEZWJ1Z0xldmVsTmFtZSlcclxuXHREZWJ1Z0xldmVsTmFtZXMuZm9yRWFjaCgodmFsdWUsIGluZGV4KSA9PiB7XHJcblx0XHRpZiAodmFsdWUgPT0gRGVidWdMZXZlbE5hbWUpIHtcclxuXHRcdFx0c2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfQ2hhdHR5LCB1bmRlZmluZWQsICdGaW5kIERlYnVnTGV2ZWxJbmRleCcsIGluZGV4KVxyXG5cdFx0XHRyZXR1cm4gaW5kZXhcclxuXHRcdH1cclxuXHR9KTtcclxuXHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9IaWdoLCB1bmRlZmluZWQsICdObyBGaW5kaW5nIGZvciBEZWJ1Z0xldmVsTmFtZScsIERlYnVnTGV2ZWxOYW1lKVxyXG5cdHJldHVybiAwXHJcbn1cclxuXHJcbi8vIFNldHRpbmdzIGZvciBTZW1hTG9naWNcclxuY2xhc3MgU2VtYUxvZ2ljU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xyXG5cdHBsdWdpbjogU2VtYUxvZ2ljUGx1Z2luO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBTZW1hTG9naWNQbHVnaW4pIHtcclxuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKTtcclxuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG5cdH1cclxuXHJcblx0ZGlzcGxheSgpOiB2b2lkIHtcclxuXHJcblx0XHRjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xyXG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHJcblx0XHQvLyBIZWFkbGluZSBmb3IgU2V0dGluZ3NUYWJcclxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ1NldHRpbmdzIGZvciBTZW1hTG9naWM6JyB9KTtcclxuXHJcblx0XHQvLyBHZW5lcmFsIERlYnVnIExldmVsXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ0dlbmVyYWwgRGVidWdMZXZlbCcpXHJcblx0XHRcdC5zZXREZXNjKCdZb3UgY2FuIHNldCBhIERlYnVnTGV2ZWwgZm9yIERldmVsb3BtZW50aW5mb3JtYXRpb24nKVxyXG5cdFx0XHQuYWRkRHJvcGRvd24oZHJvcERvd24gPT4gZHJvcERvd25cclxuXHRcdFx0XHQuYWRkT3B0aW9uKCcwJywgRGVidWdMZXZlbE5hbWVzWzBdKVxyXG5cdFx0XHRcdC5hZGRPcHRpb24oJzEnLCBEZWJ1Z0xldmVsTmFtZXNbMV0pXHJcblx0XHRcdFx0LmFkZE9wdGlvbignMicsIERlYnVnTGV2ZWxOYW1lc1syXSlcclxuXHRcdFx0XHQuYWRkT3B0aW9uKCczJywgRGVidWdMZXZlbE5hbWVzWzNdKVxyXG5cdFx0XHRcdC5hZGRPcHRpb24oJzQnLCBEZWJ1Z0xldmVsTmFtZXNbNF0pXHJcblx0XHRcdFx0LmFkZE9wdGlvbignNScsIERlYnVnTGV2ZWxOYW1lc1s1XSlcclxuXHRcdFx0XHQuc2V0VmFsdWUoU3RyaW5nKHRoaXMucGx1Z2luLnNldHRpbmdzLm15RGVidWdMZXZlbCkpXHJcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0c2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfSGlnaCwgdW5kZWZpbmVkLCAnU2V0IERlYnVnTGV2ZWw6ICcgKyBEZWJ1Z0xldmVsTmFtZXNbcGFyc2VJbnQodmFsdWUpXSlcclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLm15RGVidWdMZXZlbCA9IHBhcnNlSW50KHZhbHVlKTtcclxuXHRcdFx0XHRcdERlYnVnTGV2ZWwgPSBwYXJzZUludCh2YWx1ZSlcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0dGhpcy5kaXNwbGF5KClcclxuXHRcdFx0XHR9KSk7XHJcblxyXG5cdFx0Ly8gRGlzcGxheSBTZXR0aW5ncyBmb3IgU2VtYUxvZ2ljXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ0NoYW5nZSB5b3VyIHNldHRpbmcgcHJvZmlsZScpXHJcblx0XHRcdC5zZXREZXNjKCdZb3UgY2FuIGRlZmluZSBkaWZmZXJlbnQgcHJvZmlsZXMgZm9yIHlvdXIgU2VtYUxvZ2ljU2VydmljZScpXHJcblx0XHRcdC5hZGREcm9wZG93bihkcm9wRG93biA9PiBkcm9wRG93blxyXG5cdFx0XHRcdC5hZGRPcHRpb24oJzAnLCAnUHJvZmlsZSAxJylcclxuXHRcdFx0XHQuYWRkT3B0aW9uKCcxJywgJ1Byb2ZpbGUgMicpXHJcblx0XHRcdFx0LmFkZE9wdGlvbignMicsICdQcm9maWxlIDMnKVxyXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNldHRpbmcudG9TdHJpbmcoKSlcclxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9IaWdoLCB1bmRlZmluZWQsICdTZXQgUHJvZmlsZTogJyArIHZhbHVlKVxyXG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nID0gcGFyc2VJbnQodmFsdWUpO1xyXG5cdFx0XHRcdFx0dGhpcy5kaXNwbGF5KCk7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHR9KSk7XHJcblxyXG5cclxuXHRcdC8vIFNob3cgU3RhbmRhcmRVcGRhdGVJbnRlcnZhbFxyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKCdTdGFuZGFyZCB1cGRhdGVpbnRlcnZhbCcpXHJcblx0XHRcdC8vLnNldERlc2MoJ1NldCBzdGFuZGFyZCB1cGRhdGVpbnRlcnZhbCcpXHJcblx0XHRcdC5hZGRUZXh0KHNldHRpbmcgPT4gc2V0dGluZ1xyXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nXS5teVVwZGF0ZUludGVydmFsLnRvU3RyaW5nKCkpXHJcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0c2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfSW1wb3J0YW50LCB1bmRlZmluZWQsICdTZXQgVXBkYXRlIEludGVydmFsOiAnICsgdmFsdWUpXHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nXS5teVVwZGF0ZUludGVydmFsID0gcGFyc2VJbnQodmFsdWUpO1xyXG5cdFx0XHRcdFx0d2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5wbHVnaW4uaW50ZXJ2YWwpXHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5yZWdpc3RlckludGVydmFsKFxyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5pbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbCh0aGlzLnBsdWdpbi5oYW5kbGVVcGRhdGUsIHRoaXMucGx1Z2luLnNldHRpbmdzLm15U0xTZXR0aW5nc1t0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNldHRpbmddLm15VXBkYXRlSW50ZXJ2YWwpXHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKClcclxuXHRcdFx0XHRcdC8vdGhpcy5kaXNwbGF5KClcclxuXHRcdFx0XHR9KSk7XHJcblxyXG5cclxuXHRcdC8vIEJhc2VVUkwgXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ0Jhc2VVcmwnKVxyXG5cdFx0XHQuc2V0RGVzYygnQmFzZVVSTCBmb3IgcmVhY2hpbmcgU2VtYUxvZ2ljU2VydmljZScpXHJcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdC5zZXRQbGFjZWhvbGRlcihBUElfRGVmYXVsdHMuQmFzZV9VUkwpXHJcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm15U0xTZXR0aW5nc1t0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNldHRpbmddLm15QmFzZVVSTClcclxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9JbXBvcnRhbnQsIHVuZGVmaW5lZCwgJ1NldCBCYXNlVVJMOiAnICsgdmFsdWUpXHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nXS5teUJhc2VVUkwgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdH0pKTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ1BhdGggdG8gR2V0LUFQSS1FbmRwb2ludHMnKVxyXG5cdFx0XHQuc2V0RGVzYygnUGF0aCB0byBHZXQtQVBJIGZvciBtb3JlIEluZm9ybWF0aW9uIGFib3V0IHRoZSBFbmRwb2ludHMgb2YgdXNlZCBBUElzJylcclxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKEFQSV9EZWZhdWx0cy5HZXRBUEkpXHJcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm15U0xTZXR0aW5nc1t0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNldHRpbmddLm15R2V0QVBJKVxyXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0ltcG9ydGFudCwgdW5kZWZpbmVkLCAnU2V0IHRvIEdldC1BUEktRW5kcG9pbnQ6ICcgKyB2YWx1ZSlcclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLm15U0xTZXR0aW5nc1t0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNldHRpbmddLm15R2V0QVBJID0gdmFsdWU7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdC8vdGhpcy5kaXNwbGF5KClcclxuXHRcdFx0XHR9KSk7XHJcblxyXG5cclxuXHRcdC8vIFBvcnQgZm9yIHJlYWNoaW5nIFNlbWFMb2dpYyB3aXRoIFN0YW5kYXJkcGFyYW1ldGVyXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ1BvcnQgU2VtYUxvZ2ljJylcclxuXHRcdFx0LnNldERlc2MoJ0VudGVyIHRoZSBQb3J0JylcclxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKEFQSV9EZWZhdWx0cy5Qb3J0KVxyXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nXS5teVBvcnQpXHJcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0c2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfSW1wb3J0YW50LCB1bmRlZmluZWQsICdTZXQgdG8gUG9ydDogJyArIHZhbHVlKVxyXG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTTFNldHRpbmdzW3RoaXMucGx1Z2luLnNldHRpbmdzLm15U2V0dGluZ10ubXlQb3J0ID0gdmFsdWU7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHR9KSk7XHJcblxyXG5cdFx0Ly8gT3V0cHV0Rm9ybWF0cyBcclxuXHRcdC8vIFRvRG86IEdldCBmcm9tIEFQSSB3aGljaCBPdXRwdXRGb3JtYXRzIGFyZSBwb3NzaWJsZVx0XHRcclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnT3V0cHV0Rm9ybWF0JylcclxuXHRcdFx0LnNldERlc2MoJ0hlcmUgeW91IGNhbiBzZXQgdGhlIG91dHB1dGZvcm1hdCBmb3IgU2VtYUxvZ2ljLCB3aGljaCBjb3VsZCBiZSBnZXQgZnJvbSBTZW1hTG9naWNTZXJ2aWNlJylcclxuXHRcdFx0LmFkZERyb3Bkb3duKGRyb3BEb3duID0+IGRyb3BEb3duXHJcblx0XHRcdFx0LmFkZE9wdGlvbihSdWxlc2V0dHlwZXNDb21tYW5kc1tSc3R5cGVzX1NlbWFsb2dpY11bMV0sIFJ1bGVzZXR0eXBlc0NvbW1hbmRzW1JzdHlwZXNfU2VtYWxvZ2ljXVswXSlcclxuXHRcdFx0XHQuYWRkT3B0aW9uKFJ1bGVzZXR0eXBlc0NvbW1hbmRzW1JzdHlwZXNfQVNQXVsxXSwgUnVsZXNldHR5cGVzQ29tbWFuZHNbUnN0eXBlc19BU1BdWzBdKVxyXG5cdFx0XHRcdC5hZGRPcHRpb24oUnVsZXNldHR5cGVzQ29tbWFuZHNbUnN0eXBlc19QaWN0dXJlXVsxXSwgUnVsZXNldHR5cGVzQ29tbWFuZHNbUnN0eXBlc19QaWN0dXJlXVswXSlcclxuXHRcdFx0XHQuYWRkT3B0aW9uKFJ1bGVzZXR0eXBlc0NvbW1hbmRzW1JzdHlwZXNfU2VtYW50aWNUcmVlXVsxXSwgUnVsZXNldHR5cGVzQ29tbWFuZHNbUnN0eXBlc19TZW1hbnRpY1RyZWVdWzBdKVxyXG5cdFx0XHRcdC5hZGRPcHRpb24oUnVsZXNldHR5cGVzQ29tbWFuZHNbUnN0eXBlc19Lbm93bGVkZ2VHcmFwaF1bMV0sIFJ1bGVzZXR0eXBlc0NvbW1hbmRzW1JzdHlwZXNfS25vd2xlZGdlR3JhcGhdWzBdKVxyXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nXS5teU91dHB1dEZvcm1hdClcclxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9JbXBvcnRhbnQsIHVuZGVmaW5lZCwgJ1NldCBPdXRwdXRmb3JtYXQ6ICcgKyB2YWx1ZSlcclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLm15U0xTZXR0aW5nc1t0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNldHRpbmddLm15T3V0cHV0Rm9ybWF0ID0gdmFsdWU7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHR9KSk7XHJcblxyXG5cdFx0LyogU0lEIGlzIG5vdCBuZWVkZWQgZm9yIG9uLXRoZS1mbHktc29sdmluZyBpbiBvYnNpZGlhblxyXG5cdFx0XHRcdC8vIFNJRC1JbmZvcm1hdGlvblxyXG5cdFx0XHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHRcdFx0LnNldE5hbWUoJ1NJRCcpXHJcblx0XHRcdFx0XHQuc2V0RGVzYygnU2VtYUxvZ2ljIFNlc3Npb25JRCcpXHJcblx0XHRcdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuXHRcdFx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKEFQSV9EZWZhdWx0cy5TSUQpXHJcblx0XHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nXS5teVNJRClcclxuXHRcdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0ltcG9ydGFudCwgdW5kZWZpbmVkLCAnU2V0IFNJRDogJyArIHZhbHVlKVxyXG5cdFx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLm15U0xTZXR0aW5nc1t0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNldHRpbmddLm15U0lEID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0XHRcdH0pKTtcclxuXHRcdCovXHJcblxyXG5cdFx0Ly8gRm9yIEhUVFAtUmVxdWVzdCB3aXRoIFVzZXIvUGFzc3dvcmQgZm9yIHRyYW5zZmVyIHZpZXdcdFx0XHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ1NlY3VyZSBIVFRQLVJlcXVlc3QgU2VtYUxvZ2ljJylcclxuXHRcdFx0LnNldERlc2MoJ0lmIHlvdSBoYXMgdG8gdXNlIFVzZXIvUGFzc3dvcmQgZm9yIGh0dHAtcmVxdWVzdCB0byB0aGUgc2VtYWxvZ2ljIHNlcnZpY2UnKVxyXG5cdFx0XHQuYWRkVG9nZ2xlKHNldHRpbmcgPT4gc2V0dGluZ1xyXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nXS5teVVzZUh0dHBzU0wpXHJcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0c2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfSW1wb3J0YW50LCB1bmRlZmluZWQsICdTZXQgVXNlclBhc3N3b3JkUmVxdWVzdDogJyArIHZhbHVlKVxyXG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTTFNldHRpbmdzW3RoaXMucGx1Z2luLnNldHRpbmdzLm15U2V0dGluZ10ubXlVc2VIdHRwc1NMID0gdmFsdWU7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKVxyXG5cdFx0XHRcdFx0dGhpcy5kaXNwbGF5KClcclxuXHRcdFx0XHR9KSk7XHJcblxyXG5cdFx0aWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLm15U0xTZXR0aW5nc1t0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNldHRpbmddLm15VXNlSHR0cHNTTCkge1xyXG5cdFx0XHQvLyBSZXF1ZXN0LVVzZXJcclxuXHRcdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdFx0LnNldE5hbWUoJ0hUVFAtUmVxdWVzdC1Vc2VyJylcclxuXHRcdFx0XHQuc2V0RGVzYygnVXNlciB0byByZWFjaCB0cmFuc2ZlciBzZXJ2aWNlJylcclxuXHRcdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuXHRcdFx0XHRcdC5zZXRQbGFjZWhvbGRlcihBUElfRGVmYXVsdHMuSHR0cFVzZXJTTClcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nXS5teVVzZXJTTClcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0c2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfSW1wb3J0YW50LCB1bmRlZmluZWQsICdTZXQgSFRUUC1SZXF1ZXN0LVVzZXIuLi4nKVxyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nXS5teVVzZXJTTCA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pKTtcclxuXHJcblx0XHRcdC8vIFJlcXVlc3QtUGFzc3dvcmRcclxuXHRcdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdFx0LnNldE5hbWUoJ0hUVFAtUmVxdWVzdC1QYXNzd29yZCcpXHJcblx0XHRcdFx0LnNldERlc2MoJ1Bhc3N3b3JkIHRvIHJlYWNoIHRyYW5zZmVyIHNlcnZpY2UnKVxyXG5cdFx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKEFQSV9EZWZhdWx0cy5IdHRwUGFzc3dvcmRTTClcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nXS5teVBhc3N3b3JkU0wpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0ltcG9ydGFudCwgdW5kZWZpbmVkLCAnU2V0IEhUVFAtUmVxdWVzdC1QYXNzd29yZC4uLicpXHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLm15U0xTZXR0aW5nc1t0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNldHRpbmddLm15UGFzc3dvcmRTTCA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHRcdH0pKTtcclxuXHRcdH1cclxuXHJcblxyXG5cdFx0Ly8gU2hvdyBEaWFsZWN0IGluIFJlYWRpbmcgVmlld1xyXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcblx0XHRcdC5zZXROYW1lKCdTaG93IENvbnRleHQgaW4gUmVhZGluZyBWaWV3JylcclxuXHRcdFx0Ly8uc2V0RGVzYygnU2hvdyBDb250ZXh0IGluIFJlYWRpbmcgVmlldycpXHJcblx0XHRcdC5hZGRUb2dnbGUoc2V0dGluZyA9PiBzZXR0aW5nXHJcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm15U0xTZXR0aW5nc1t0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNldHRpbmddLm15Q29udGV4dClcclxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9JbXBvcnRhbnQsIHVuZGVmaW5lZCwgJ1NldCBDb250ZXh0IG9mIFJlYWRpbmcgVmlldzogJyArIHZhbHVlKVxyXG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTTFNldHRpbmdzW3RoaXMucGx1Z2luLnNldHRpbmdzLm15U2V0dGluZ10ubXlDb250ZXh0ID0gdmFsdWU7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKVxyXG5cdFx0XHRcdFx0Ly90aGlzLmRpc3BsYXkoKVxyXG5cdFx0XHRcdH0pKTtcclxuXHJcblx0XHQvLyBIZWFkbGluZSBmb3IgU2V0dGluZ3NUYWJcclxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMScsIHsgdGV4dDogJ19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18nIH0pO1xyXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnU2V0dGluZ3MgZm9yIFRyYW5zZmVyL0FTUC1WaWV3OicgfSk7XHJcblxyXG5cdFx0Ly8gQVNQQmFzZVVSTCBcclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnQmFzZVVybCBmb3IgVHJhbnNmZXIvQVNQJylcclxuXHRcdFx0LnNldERlc2MoJ0Jhc2VVUkwgZm9yIHJlYWNoaW5nIFRyYW5zZmVyL0FTUC1TZXJ2aWNlJylcclxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKEFQSV9EZWZhdWx0cy5Bc3BVcmwpXHJcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLm15U0xTZXR0aW5nc1t0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNldHRpbmddLm15QXNwVXJsKVxyXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0ltcG9ydGFudCwgdW5kZWZpbmVkLCAnU2V0IFRyYW5zZmVyL0FTUC1CYXNlVVJMOiAnICsgdmFsdWUpXHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nXS5teUFzcFVybCA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0fSkpO1xyXG5cclxuXHRcdC8vIFN0YW5kYXJkIEFTUEVuZHBvaW50XHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ1BhdGggdG8gR2V0LVRyYW5zZmVyL0FTUC1TdGFuZGFyZEFQSS1FbmRwb2ludCcpXHJcblx0XHRcdC5zZXREZXNjKCdQYXRoIHRvIFRyYW5zZmVyL0FTUC1TdGFuZGFyZC1BUEkgJylcclxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKEFQSV9EZWZhdWx0cy5Bc3BFbmRwb2ludClcclxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTTFNldHRpbmdzW3RoaXMucGx1Z2luLnNldHRpbmdzLm15U2V0dGluZ10ubXlBc3BFbmRwb2ludClcclxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9JbXBvcnRhbnQsIHVuZGVmaW5lZCwgJ1NldCB0byBUcmFuc2Zlci9BU1AtU3RhbmRhcmQtQVBJLUVuZHBvaW50OiAnICsgdmFsdWUpXHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nXS5teUFzcEVuZHBvaW50ID0gdmFsdWU7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0XHR9KSk7XHJcblxyXG5cdFx0Ly8gRm9yIEhUVFAtUmVxdWVzdCB3aXRoIFVzZXIvUGFzc3dvcmQgZm9yIHRyYW5zZmVyIHZpZXdcdFx0XHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ1NlY3VyZSBIVFRQLVJlcXVlc3QnKVxyXG5cdFx0XHQuc2V0RGVzYygnSWYgeW91IGhhcyB0byB1c2UgVXNlci9QYXNzd29yZCBmb3IgaHR0cC1yZXF1ZXN0IHRvIHRoZSB0cmFuc2ZlciBzZXJ2aWNlJylcclxuXHRcdFx0LmFkZFRvZ2dsZShzZXR0aW5nID0+IHNldHRpbmdcclxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTTFNldHRpbmdzW3RoaXMucGx1Z2luLnNldHRpbmdzLm15U2V0dGluZ10ubXlVc2VIdHRwcylcclxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9JbXBvcnRhbnQsIHVuZGVmaW5lZCwgJ1NldCBVc2VyUGFzc3dvcmRSZXF1ZXN0OiAnICsgdmFsdWUpXHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nXS5teVVzZUh0dHBzID0gdmFsdWU7XHJcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKVxyXG5cdFx0XHRcdFx0dGhpcy5kaXNwbGF5KClcclxuXHRcdFx0XHR9KSk7XHJcblxyXG5cclxuXHRcdGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nXS5teVVzZUh0dHBzKSB7XHJcblx0XHRcdC8vIFJlcXVlc3QtVXNlclxyXG5cdFx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0XHQuc2V0TmFtZSgnSFRUUC1SZXF1ZXN0LVVzZXInKVxyXG5cdFx0XHRcdC5zZXREZXNjKCdVc2VyIHRvIHJlYWNoIHRyYW5zZmVyIHNlcnZpY2UnKVxyXG5cdFx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKEFQSV9EZWZhdWx0cy5IdHRwVXNlcilcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nXS5teVVzZXIpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0ltcG9ydGFudCwgdW5kZWZpbmVkLCAnU2V0IEhUVFAtUmVxdWVzdC1Vc2VyLi4uJylcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTTFNldHRpbmdzW3RoaXMucGx1Z2luLnNldHRpbmdzLm15U2V0dGluZ10ubXlVc2VyID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0fSkpO1xyXG5cclxuXHRcdFx0Ly8gUmVxdWVzdC1QYXNzd29yZFxyXG5cdFx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0XHQuc2V0TmFtZSgnSFRUUC1SZXF1ZXN0LVBhc3N3b3JkJylcclxuXHRcdFx0XHQuc2V0RGVzYygnUGFzc3dvcmQgdG8gcmVhY2ggdHJhbnNmZXIgc2VydmljZScpXHJcblx0XHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoQVBJX0RlZmF1bHRzLkh0dHBQYXNzd29yZClcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nXS5teVBhc3N3b3JkKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9JbXBvcnRhbnQsIHVuZGVmaW5lZCwgJ1NldCBIVFRQLVJlcXVlc3QtUGFzc3dvcmQuLi4nKVxyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5wbHVnaW4uc2V0dGluZ3MubXlTZXR0aW5nXS5teVBhc3N3b3JkID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0fSkpO1xyXG5cdFx0fVxyXG5cclxuXHJcblx0fVxyXG59XHJcblxyXG4vLyBDb21tdW5pY2F0aW9uQ2xhc3MgZm9yIGludGVyYWN0aW9uIGJldHdlZW4gU0x2aWV3IGFuZCBlZGl0b3Igd2luZG93XHJcbmV4cG9ydCBjbGFzcyBTZW1hTG9naWNQbHVnaW5Db21tIHtcclxuXHRzbHZpZXc6IFNlbWFMb2dpY1ZpZXdcclxuXHRzbFBsdWdpbjogU2VtYUxvZ2ljUGx1Z2luXHJcblx0c2xhc3B2aWV3OiBBU1BWaWV3XHJcblx0YWN0aXZhdGVkQVNQOiBib29sZWFuID0gZmFsc2U7XHJcblx0c2xVc2VkTURWaWV3OiBNYXJrZG93blZpZXdcclxuXHJcblx0c2V0U2xWaWV3KHZpZXc6IFNlbWFMb2dpY1ZpZXcpIHtcclxuXHRcdHRoaXMuc2x2aWV3ID0gdmlld1xyXG5cdH1cclxuXHJcblx0c2V0U0xDbGFzcyhzbGNsYXNzOiBTZW1hTG9naWNQbHVnaW4pIHtcclxuXHRcdHRoaXMuc2xQbHVnaW4gPSBzbGNsYXNzXHJcblx0fVxyXG5cclxuXHRwdWJsaWMgYWRkKGE6IG51bWJlciwgYjogbnVtYmVyKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiBhICsgYlxyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VtYUxvZ2ljUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcclxuXHRzZXR0aW5nczogU2VtYUxvZ2ljUGx1Z2luU2V0dGluZ3M7XHJcblx0c2VtYUxvZ2ljVmlldzogU2VtYUxvZ2ljVmlldztcclxuXHRteVN0YXR1czogSFRNTEVsZW1lbnQ7XHJcblx0c3RhdHVzVHJhbnNmZXI6IGJvb2xlYW5cclxuXHRzdGF0dXNTTDogYm9vbGVhbjtcclxuXHJcblx0YWN0aXZhdGVkOiBib29sZWFuID0gZmFsc2U7XHJcblx0dXBkYXRpbmc6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHRsYXN0VXBkYXRlOiBudW1iZXIgPSAwO1xyXG5cdHVwZGF0ZU91dHN0YW5kaW5nOiBib29sZWFuID0gZmFsc2U7XHJcblx0dXBkYXRlVHJhbnNmZXJPdXRzdGFuZGluZzogYm9vbGVhbiA9IGZhbHNlO1xyXG5cdHVwZGF0ZU91dHN0YW5kaW5nU2V0dGluZzogYm9vbGVhbiA9IGZhbHNlO1xyXG5cdHdhaXRpbmdGb3JSZXNwb25zZSA9IGZhbHNlO1xyXG5cdFVwZGF0ZVByb2Nlc3Npbmc6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHRzbENvbW06IFNlbWFMb2dpY1BsdWdpbkNvbW07XHJcblx0bGFzdGFjdGl2ZVZpZXc6IE1hcmtkb3duVmlldztcclxuXHR2aWV3X3V0aWxzID0gbmV3IFZpZXdVdGlsc1xyXG5cdGludGVydmFsOiBudW1iZXJcclxuXHJcblx0Ly8gRHVlIHRvIGNoYW5nZSBpbiBTcHJpbnQgMS8yMDIzIHRvIGlubGluZSBkaWFsZWN0cywgZGV0ZWN0aW9uIG9mIGNvbnRleHRzIHdpbGwgYmUgbmVlZGVkIGluIGxhdGVyIHNwcmludHMgXHJcblx0cHJpdmF0ZSBnZXRDb250ZXh0RnJvbUxpbmUobXlkaWFsZWN0SUQ6IHN0cmluZykge1xyXG5cdFx0Ly8gVG9EbzogUmVwbGFjZSB2b24gVG9rb25zIC0gYmlzIGRpZSBuZXVlIFNlbWFMb2dpY1ZlcnNpb24gYnpnbC4gZGVyIENvbnRleHRlIHZlcmZcdTAwRkNnYmFyIGlzdFxyXG5cdFx0bXlkaWFsZWN0SUQgPSBteWRpYWxlY3RJRC5yZXBsYWNlKCdTZW1hTG9naWNDb250ZXh0XHUyMjYxJywgJ1NlbWFMb2dpY0RpYWxlY3RcdTIyNjEnKTtcclxuXHRcdC8vbXlkaWFsZWN0SUQgPSBteWRpYWxlY3RJRC5yZXBsYWNlKFwiZGlhbGVjdDo9XCIsIFwiXCIpO1xyXG5cdFx0bGV0IHJlID0gL1xcdC9naTtcclxuXHRcdG15ZGlhbGVjdElEID0gbXlkaWFsZWN0SUQucmVwbGFjZShyZSwgXCJcIik7XHJcblx0XHRyZSA9IC9cXG4vZ2k7XHJcblx0XHRteWRpYWxlY3RJRCA9IG15ZGlhbGVjdElELnJlcGxhY2UocmUsIFwiXCIpO1xyXG5cdFx0cmV0dXJuIHsgbXlkaWFsZWN0SUQgfTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgZ2V0QWN0aXZlVmlldygpOiBNYXJrZG93blZpZXcgfCB1bmRlZmluZWQge1xyXG5cdFx0Y29uc3QgYWN0aXZlVmlldyA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xyXG5cdFx0aWYgKGFjdGl2ZVZpZXcgPT09IG51bGwpIHtcclxuXHRcdFx0aWYgKHRoaXMubGFzdGFjdGl2ZVZpZXcgPT09IG51bGwpIHtcclxuXHRcdFx0XHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9IaWdoLCB0aGlzLnNsQ29tbS5zbHZpZXcsIFwiQWN0aXZlVmlldyBjb3VsZCBub3QgYmUgZGVmaW5lZCB0aHJvdWdoIFNlbWFMb2dpY1wiKVxyXG5cdFx0XHRcdHJldHVyblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmxhc3RhY3RpdmVWaWV3O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHR0aGlzLmxhc3RhY3RpdmVWaWV3ID0gYWN0aXZlVmlld1xyXG5cdFx0c2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfSW1wb3J0YW50LCB0aGlzLnNsQ29tbS5zbHZpZXcsIHRoaXMubGFzdGFjdGl2ZVZpZXcuZ2V0RGlzcGxheVRleHQoKSlcclxuXHRcdHJldHVybiB0aGlzLmxhc3RhY3RpdmVWaWV3XHJcblx0fVxyXG5cclxuXHRzZXRWaWV3cygpOiB2b2lkIHtcclxuXHRcdHRoaXMuc2xDb21tLmFjdGl2YXRlZEFTUCA9IGZhbHNlXHJcblx0XHR0aGlzLmFwcC53b3Jrc3BhY2UuaXRlcmF0ZUFsbExlYXZlcygobGVhZikgPT4ge1xyXG5cdFx0XHRzd2l0Y2ggKGxlYWYudmlldy5nZXRWaWV3VHlwZSgpKSB7XHJcblx0XHRcdFx0Y2FzZSBTZW1hTG9naWNWaWV3VHlwZToge1xyXG5cdFx0XHRcdFx0dGhpcy5zbENvbW0uc2x2aWV3ID0gKGxlYWYudmlldyBhcyBTZW1hTG9naWNWaWV3KVxyXG5cdFx0XHRcdFx0dGhpcy5zbENvbW0uc2x2aWV3LnNldENvbW0odGhpcy5zbENvbW0pXHJcblx0XHRcdFx0XHR0aGlzLnNsQ29tbS5zbHZpZXcuc2xDb21tLnNldFNsVmlldyh0aGlzLnNsQ29tbS5zbHZpZXcpXHJcblx0XHRcdFx0XHR0aGlzLnNsQ29tbS5zbHZpZXcuc2xDb21tLnNsUGx1Z2luID0gdGhpcy5zbENvbW0uc2xQbHVnaW5cclxuXHRcdFx0XHRcdHRoaXMuYWN0aXZhdGVkID0gdHJ1ZVxyXG5cdFx0XHRcdFx0dGhpcy5zdGF0dXNTTCA9IHRydWVcclxuXHRcdFx0XHRcdGJyZWFrXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGNhc2UgQVNQVmlld1R5cGU6IHtcclxuXHRcdFx0XHRcdHRoaXMuc2xDb21tLnNsYXNwdmlldyA9IChsZWFmLnZpZXcgYXMgQVNQVmlldylcclxuXHRcdFx0XHRcdHRoaXMuc2xDb21tLnNsYXNwdmlldy5zZXRDb21tKHRoaXMuc2xDb21tKVxyXG5cdFx0XHRcdFx0dGhpcy5zbENvbW0uc2xhc3B2aWV3LnNsQ29tbS5zZXRTbFZpZXcodGhpcy5zbENvbW0uc2x2aWV3KVxyXG5cdFx0XHRcdFx0dGhpcy5zbENvbW0uc2xhc3B2aWV3LnNsQ29tbS5zbFBsdWdpbiA9IHRoaXMuc2xDb21tLnNsUGx1Z2luXHJcblx0XHRcdFx0XHR0aGlzLnNsQ29tbS5hY3RpdmF0ZWRBU1AgPSB0cnVlXHJcblx0XHRcdFx0XHR0aGlzLnN0YXR1c1RyYW5zZmVyID0gdHJ1ZVxyXG5cclxuXHRcdFx0XHRcdGJyZWFrXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0dGhpcy5nZXRBY3RpdmVWaWV3KClcclxuXHRcdC8vdGhpcy5zZW1hTG9naWNVcGRhdGUoZmFsc2UpXHJcblx0fVxyXG5cclxuXHRhc3luYyBvbmxvYWQoKTogUHJvbWlzZTx2b2lkPiB7XHJcblx0XHR0aGlzLnJlZ2lzdGVyTWFya2Rvd25Qb3N0UHJvY2Vzc29yKChlbGVtZW50LCBjb250ZXh0KSA9PiB7XHJcblx0XHRcdHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0NoYXR0eSwgdW5kZWZpbmVkLCBlbGVtZW50KVxyXG5cdFx0XHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9DaGF0dHksIHVuZGVmaW5lZCwgY29udGV4dClcclxuXHRcdFx0ZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwicFwiKS5mb3JFYWNoKChlbCkgPT4ge1xyXG5cdFx0XHRcdGlmIChzZWFyY2hGb3JTZW1hTG9naWNDb21tYW5kcyhlbCkpIHtcclxuXHRcdFx0XHRcdGxldCBzZXQgPSB0aGlzLnNldHRpbmdzXHJcblx0XHRcdFx0XHRjb250ZXh0LmFkZENoaWxkKG5ldyBTZW1hTG9naWNSZW5kZXJlZEVsZW1lbnQoeyBjb250YWluZXJFbDogZWwgYXMgSFRNTEVsZW1lbnQsIHNldCB9KSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH0pXHJcblxyXG5cdFx0Ly8gVGhpcyBhZGRzIGEgc2V0dGluZ3MgdGFiIHNvIHRoZSB1c2VyIGNhbiBjb25maWd1cmUgdmFyaW91cyBhc3BlY3RzIG9mIHRoZSBwbHVnaW5cclxuXHRcdHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgU2VtYUxvZ2ljU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xyXG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHRcdERlYnVnTGV2ZWwgPSB0aGlzLnNldHRpbmdzLm15RGVidWdMZXZlbFxyXG5cclxuXHRcdC8vIFRoaXMgYWRkcyBhIHN0YXR1cyBiYXIgZm9yIGluZm9ybWF0aW9uc1xyXG5cdFx0dGhpcy5teVN0YXR1cyA9IHRoaXMuYWRkU3RhdHVzQmFySXRlbSgpXHJcblxyXG5cdFx0dGhpcy5zbENvbW0gPSBuZXcgU2VtYUxvZ2ljUGx1Z2luQ29tbVxyXG5cdFx0dGhpcy5zbENvbW0uc2V0U0xDbGFzcyh0aGlzKVxyXG5cclxuXHRcdHRoaXMuYWN0aXZhdGVWaWV3KCk7XHJcblx0XHQvLyBDbGVhciBTZW1hTG9naWMgdG8gc3RhcnQgd2l0aCBhIGNsZWFyIHNlcnZpY2VcclxuXHRcdGF3YWl0IHRoaXMuc2VtYUxvZ2ljUmVzZXQoKTtcclxuXHRcdHRoaXMuc2V0Vmlld3MoKVxyXG5cclxuXHRcdC8vIGFkZCBhbiBSaWJib25JY29uIHRvIGFjdGl2Y2F0ZSBhbmQgZGVhY3RpdmF0ZSB0aGUgU2VtYUxvZ2ljVmlld1xyXG5cdFx0dGhpcy5hZGRSaWJib25JY29uKFwiYm9va1wiLCBcIk9uL09mZiBTZW1hTG9naWMuVmlld1wiLCAoKSA9PiB7XHJcblx0XHRcdHRoaXMuc2V0Vmlld3MoKVxyXG5cdFx0XHRpZiAodGhpcy5hY3RpdmF0ZWQgPT0gZmFsc2UpIHtcclxuXHRcdFx0XHR0aGlzLnN0YXR1c1NMID0gdHJ1ZVxyXG5cdFx0XHRcdGlmICghdGhpcy5hY3RpdmF0ZWQpIHtcclxuXHRcdFx0XHRcdHRoaXMuYWN0aXZhdGVWaWV3KClcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhpcy5zdGF0dXNTTCA9IGZhbHNlXHJcblx0XHRcdFx0dGhpcy5kZWFjdGl2YXRlVmlldygpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSk7XHJcblx0XHQvLyBhZGQgYW4gUmliYm9uSWNvbiB0byBhY3RpdmNhdGUgYW5kIGRlYWN0aXZhdGUgdGhlIFNlbWFMb2dpY1ZpZXdcclxuXHRcdHRoaXMuYWRkUmliYm9uSWNvbihcImRpY2VcIiwgXCJPbi9PZmYgVHJhbnNmZXIuVmlld1wiLCAoKSA9PiB7XHJcblx0XHRcdHRoaXMuc2V0Vmlld3MoKVxyXG5cdFx0XHRpZiAodGhpcy5zbENvbW0gIT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0aWYgKHRoaXMuc2xDb21tLmFjdGl2YXRlZEFTUCA9PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0dGhpcy5hY3RpdmF0ZUFTUFZpZXcoKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dGhpcy5kZWFjdGl2YXRlQVNQVmlldygpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHQvLyBhZGQgYW4gUmliYm9uSWNvbiB0byBhY3RpdmNhdGUgYW5kIGRlYWN0aXZhdGUgdGhlIFNlbWFMb2dpY1ZpZXdcclxuXHRcdC8vdGhpcy5hZGRSaWJib25JY29uKFwiZmlsZS10eXBlLTJcIiwgXCJDcmVhdGUgVGVtcGxhdGVGb2xkZXJcIiwgKCkgPT4ge1xyXG5cdFx0Ly9cdGNyZWF0ZVRlbXBsYXRlRm9sZGVyKGFwcC52YXVsdClcclxuXHRcdC8vfSk7XHJcblxyXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcclxuXHRcdFx0aWQ6IFwic2xfY3JlYXRlX3RlbXBsYXRlXCIsXHJcblx0XHRcdG5hbWU6IFwiU2VtYUxvZ2ljIGNyZWF0ZSB0ZW1wbGF0ZVwiLFxyXG5cdFx0XHRjYWxsYmFjazogKCkgPT4ge1xyXG5cdFx0XHRcdGNyZWF0ZVRlbXBsYXRlRm9sZGVyKGFwcC52YXVsdCk7XHJcblx0XHRcdFx0Y3JlYXRlRXhhbXBsZXMoYXBwLnZhdWx0KTtcclxuXHRcdFx0fSxcclxuXHRcdH0pO1xyXG5cclxuXHJcblx0XHRpZiAodGhpcy5zdGF0dXNTTCkge1xyXG5cdFx0XHR0aGlzLnNlbWFMb2dpY1Jlc2V0KCk7XHJcblx0XHRcdC8vIERlZmF1bHQgaXMgdGhhdCBTZW1hTG9naWNWaWV3IGlzIGFjdGl2YXRlZCBidXQgaXQgY2FuIGJlIGRlYWN0aXZhdGVkIGJ5IGNsaWNrIG9uIFJpYmJvbiBJY29uXHJcblx0XHRcdHRoaXMuc2xDb21tLnNsdmlldy5zZXROZXdJbml0aWFsKHRoaXMuc2V0dGluZ3MubXlTTFNldHRpbmdzW3RoaXMuc2V0dGluZ3MubXlTZXR0aW5nXS5teU91dHB1dEZvcm1hdCwgdHJ1ZSk7XHJcblx0XHRcdHRoaXMuc2VtYUxvZ2ljUGFyc2UoKTtcclxuXHRcdH1cclxuXHRcdHRoaXMucmVnaXN0ZXJJbnRlcnZhbChcclxuXHRcdFx0dGhpcy5pbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbCh0aGlzLmhhbmRsZVVwZGF0ZSwgdGhpcy5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5zZXR0aW5ncy5teVNldHRpbmddLm15VXBkYXRlSW50ZXJ2YWwpXHJcblx0XHQpO1xyXG5cdFx0dGhpcy5yZWdpc3RlckVkaXRvckV4dGVuc2lvbihbRWRpdG9yVmlldy51cGRhdGVMaXN0ZW5lci5vZih0aGlzLmhhbmRsZVVwZGF0ZSldKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHNlbWFMb2dpY1BhcnNlKCk6IFByb21pc2U8Tm9kZVtdPiB7XHJcblxyXG5cdFx0dGhpcy5zZXRWaWV3cygpO1xyXG5cclxuXHRcdHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsXywgdGhpcy5zbENvbW0uc2x2aWV3LCAnU3RhcnQgU2VtYUxvZ2ljUGFyc2UnKVxyXG5cdFx0bGV0IHJlc3VsdHM6IE5vZGVbXSA9IFtdO1xyXG5cclxuXHRcdHRoaXMubGFzdFVwZGF0ZSA9IERhdGUubm93KClcclxuXHRcdGF3YWl0IHNlbWFMb2dpY1BpbmcodGhpcy5zZXR0aW5ncywgdGhpcy5sYXN0VXBkYXRlKVxyXG5cclxuXHRcdC8vIGxldCB2QVBJX1VSTCA9IGdldEhvc3RQb3J0KHRoaXMuc2V0dGluZ3MpICsgQVBJX0RlZmF1bHRzLnJ1bGVzX3BhcnNlICsgXCI/c2lkPVwiICsgdGhpcy5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5zZXR0aW5ncy5teVNldHRpbmddLm15U0lEO1xyXG5cdFx0bGV0IHZBUElfVVJMID0gZ2V0SG9zdFBvcnQodGhpcy5zZXR0aW5ncykgKyBBUElfRGVmYXVsdHMucnVsZXNfcGFyc2UgKyBcIj9zaWQ9XCIgKyBteWdTSUQ7XHJcblx0XHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9JbXBvcnRhbnQsIHRoaXMuc2xDb21tLnNsdmlldywgdkFQSV9VUkwpXHJcblxyXG5cdFx0bGV0IGJvZHl0ZXh0OiBzdHJpbmcgPSBcIlwiO1xyXG5cdFx0bGV0IGFjdGl2ZVZpZXcgPSB0aGlzLmdldEFjdGl2ZVZpZXcoKVxyXG5cdFx0aWYgKGFjdGl2ZVZpZXcgIT0gdW5kZWZpbmVkKSB7IHRoaXMuc2xDb21tLnNsVXNlZE1EVmlldyA9IGFjdGl2ZVZpZXcgfVxyXG5cclxuXHRcdGxldCBkaWFsZWN0SUQ6IHN0cmluZyA9IFwiZGVmYXVsdFwiXHJcblx0XHRsZXQgY29kZWJsb2NrOiBib29sZWFuID0gZmFsc2U7XHJcblx0XHRsZXQgbmV3Q29kZWJsb2NrOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG5cdFx0aWYgKGFjdGl2ZVZpZXcgIT0gbnVsbCkge1xyXG5cdFx0XHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9DaGF0dHksIHRoaXMuc2xDb21tLnNsdmlldywgJ0FjdGl2ZVZpZXcgaXMgbm90IE5VTEwnKVxyXG5cclxuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhY3RpdmVWaWV3LmVkaXRvci5saW5lQ291bnQoKTsgaSsrKSB7XHJcblx0XHRcdFx0c2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfQWxsLCB0aGlzLnNsQ29tbS5zbHZpZXcsIGksICc7JywgYWN0aXZlVmlldy5lZGl0b3IuZ2V0TGluZShpKSlcclxuXHRcdFx0XHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9BbGwsIHRoaXMuc2xDb21tLnNsdmlldywgJ1N1YnN0cmluZzonLCBhY3RpdmVWaWV3LmVkaXRvci5nZXRMaW5lKGkpLnN1YnN0cmluZygwLCAyKSk7XHJcblx0XHRcdFx0aWYgKGFjdGl2ZVZpZXcuZWRpdG9yLmdldExpbmUoaSkuc3Vic3RyaW5nKDAsIDMpID09IFwiYGBgXCIpIHtcclxuXHRcdFx0XHRcdGlmICghY29kZWJsb2NrKSB7XHJcblx0XHRcdFx0XHRcdGNvZGVibG9jayA9IHRydWVcclxuXHRcdFx0XHRcdFx0bmV3Q29kZWJsb2NrID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9DaGF0dHksIHRoaXMuc2xDb21tLnNsdmlldywgJ0N1cnJlbnQgbGluZSBpcyBDb2RlYmxvY2s6ICcgKyBpLnRvU3RyaW5nKCksIGNvZGVibG9jaylcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdG5ld0NvZGVibG9jayA9IGZhbHNlXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZiAoKCFjb2RlYmxvY2spICYmICghbmV3Q29kZWJsb2NrKSkge1xyXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgaW5saW5lIFN0YXRlbWVudHNcclxuXHRcdFx0XHRcdGJvZHl0ZXh0ID0gYm9keXRleHQuY29uY2F0KGFjdGl2ZVZpZXcuZWRpdG9yLmdldExpbmUoaSkgKyAnXFxuJylcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHQvLyBQclx1MDBGQ2ZlIGF1ZiB6dSB2ZXJ3ZW5kZW5kZW4gRGlhbGVjdFxyXG5cdFx0XHRcdFx0c3dpdGNoIChhY3RpdmVWaWV3LmVkaXRvci5nZXRMaW5lKGkpLnN1YnN0cmluZygwLCBzZW1hTG9naWNDb21tYW5kLnVzZURpYWxlY3QubGVuZ3RoKSkge1xyXG5cdFx0XHRcdFx0XHRjYXNlIHNlbWFMb2dpY0NvbW1hbmQudXNlRGlhbGVjdDoge1xyXG5cdFx0XHRcdFx0XHRcdGRpYWxlY3RJRCA9IGFjdGl2ZVZpZXcuZWRpdG9yLmdldExpbmUoaSkuc3Vic3RyaW5nKHNlbWFMb2dpY0NvbW1hbmQudXNlRGlhbGVjdC5sZW5ndGgsIGFjdGl2ZVZpZXcuZWRpdG9yLmdldExpbmUoaSkubGVuZ3RoIC0gMSlcclxuXHRcdFx0XHRcdFx0XHRkaWFsZWN0SUQgPSBkaWFsZWN0SUQudHJpbSgpO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0ZGVmYXVsdDogeyB9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAoaSA8IGFjdGl2ZVZpZXcuZWRpdG9yLmxpbmVDb3VudCgpKSB7XHJcblx0XHRcdFx0XHRpZiAoYWN0aXZlVmlldy5lZGl0b3IuZ2V0TGluZShpKS5zdWJzdHJpbmcoMCwgMykgPT0gXCJgYGBcIikge1xyXG5cdFx0XHRcdFx0XHRpZiAoKGNvZGVibG9jaykgJiYgKCFuZXdDb2RlYmxvY2spKSB7IGNvZGVibG9jayA9IGZhbHNlIH0gZWxzZSB7IG5ld0NvZGVibG9jayA9IGZhbHNlIH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblxyXG5cdFx0Ym9keXRleHQgPSB0aGlzLnZpZXdfdXRpbHMuY2xlYW5Db21tYW5kcyhib2R5dGV4dClcclxuXHRcdGlmIChkaWFsZWN0SUQgPT0gXCJcIikgeyBkaWFsZWN0SUQgPSBcImRlZmF1bHRcIiB9XHJcblxyXG5cdFx0c2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfQ2hhdHR5LCB1bmRlZmluZWQsIFwiUGFyc2luZ3Jlc3VsdCBmb3IgU2VtYUxvZ2ljVmlld1wiKVxyXG5cdFx0Y29uc3QgcmVzcG9uc2VGb3JTZW1hTG9naWMgPSB0aGlzLnNsQ29tbS5zbHZpZXcuZ2V0U2VtYUxvZ2ljUGFyc2UodGhpcy5zZXR0aW5ncywgdkFQSV9VUkwsIGRpYWxlY3RJRCwgYm9keXRleHQsIGZhbHNlKVxyXG5cdFx0cmVzcG9uc2VGb3JTZW1hTG9naWMudGhlbih2YWx1ZSA9PiB7XHJcblx0XHRcdHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0NoYXR0eSwgdW5kZWZpbmVkLCB2YWx1ZSlcclxuXHRcdH0pXHJcblxyXG5cdFx0Ly9zbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9DdXJyZW50X0RldiwgdGhpcy5zbENvbW0uc2x2aWV3LCAnQ2hlY2s6IFVwZGF0ZUFTUE91dHN0YW5kaW5nID0gZmFsc2U6JyArIHRoaXMudXBkYXRlVHJhbnNmZXJPdXRzdGFuZGluZylcclxuXHRcdGlmICh0aGlzLnNsQ29tbS5hY3RpdmF0ZWRBU1ApIHtcclxuXHRcdFx0aWYgKERhdGUubm93KCkgLSB0aGlzLnNsQ29tbS5zbGFzcHZpZXcuTGFzdFJlcXVlc3RUaW1lID49IHRoaXMuc2V0dGluZ3MubXlTTFNldHRpbmdzW3RoaXMuc2V0dGluZ3MubXlTZXR0aW5nXS5teVVwZGF0ZUludGVydmFsKSB7XHJcblx0XHRcdFx0Ly90aGlzLnNsQ29tbS5zbGFzcHZpZXcuY29udGVudEVsLmVtcHR5XHJcblx0XHRcdFx0dGhpcy5zbENvbW0uc2xhc3B2aWV3Lkxhc3RSZXF1ZXN0VGltZSA9IERhdGUubm93KClcclxuXHRcdFx0XHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9DdXJyZW50X0RldiwgdGhpcy5zbENvbW0uc2x2aWV3LCBgU2V0LVJlcXVlc3R0aW1lOiAke3RoaXMuc2xDb21tLnNsYXNwdmlldy5MYXN0UmVxdWVzdFRpbWV9YClcclxuXHJcblx0XHRcdFx0Ly9zbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9DaGF0dHksIHRoaXMuc2xDb21tLnNsdmlldywgXCJQYXJzaW5ncmVzdWx0IGZvciBPblRoZUZseSBUcmFuc2Zlci52aWV3IGluIFNlbWFMb2dpY1wiKVxyXG5cdFx0XHRcdC8vY29uc3QgcGFyc2VDb21tYW5kcyA9IHRoaXMuc2xDb21tLnNsYXNwdmlldy5nZXRBU1BDb21tYW5kcyh0aGlzLnNsQ29tbSwgdGhpcy5zZXR0aW5ncylcclxuXHRcdFx0XHR0aGlzLnVwZGF0ZVRyYW5zZmVyT3V0c3RhbmRpbmcgPSBmYWxzZVxyXG5cdFx0XHRcdC8vcGFyc2VDb21tYW5kcy5jb21tYW5kcy5mb3JFYWNoKGNvbW1hbmQgPT4ge1xyXG5cdFx0XHRcdGxldCBvdXRwdXRGb3JtYXQ6IHN0cmluZyA9IFJ1bGVzZXR0eXBlc0NvbW1hbmRzW1JzdHlwZXNfQVNQXVsxXVxyXG5cdFx0XHRcdC8vXHRpZiAoY29tbWFuZC5vdXRwdXRmb3JtYXQgIT0gdW5kZWZpbmVkICYmIGNvbW1hbmQub3V0cHV0Zm9ybWF0ICE9IFJ1bGVzZXR0eXBlc0NvbW1hbmRzW1JzdHlwZXNfQVNQXVswXSkgeyBvdXRwdXRGb3JtYXQgPSBjb21tYW5kLm91dHB1dGZvcm1hdCB9XHJcblxyXG5cdFx0XHRcdGNvbnN0IHJlc3BvbnNlRm9yQVNQID0gdGhpcy5zbENvbW0uc2x2aWV3LmdldFNlbWFMb2dpY1BhcnNlKHRoaXMuc2V0dGluZ3MsIHZBUElfVVJMLCBkaWFsZWN0SUQsIGJvZHl0ZXh0LCB0cnVlLCBvdXRwdXRGb3JtYXQpXHJcblx0XHRcdFx0cmVzcG9uc2VGb3JBU1AudGhlbih2YWx1ZSA9PiB7XHJcblx0XHRcdFx0XHQvL3RoaXMudXBkYXRlVHJhbnNmZXJPdXRzdGFuZGluZyA9IHRydWU7XHJcblx0XHRcdFx0XHQvL3NsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0N1cnJlbnRfRGV2LCB0aGlzLnNsQ29tbS5zbHZpZXcsICdTZXQgVXBkYXRlQVNQT3V0c3RhbmRpbmc6JyArIHRoaXMudXBkYXRlVHJhbnNmZXJPdXRzdGFuZGluZylcclxuXHRcdFx0XHRcdHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0NoYXR0eSwgdGhpcy5zbENvbW0uc2x2aWV3LCB2YWx1ZSlcclxuXHRcdFx0XHRcdGNvbnN0IGFzcFByb21pc2UgPSB0aGlzLnNsQ29tbS5zbGFzcHZpZXcuYXNwUGFyc2UodGhpcy5zbENvbW0sIHRoaXMuc2V0dGluZ3MsIHZhbHVlLCB0aGlzLnNsQ29tbS5zbGFzcHZpZXcuTGFzdFJlcXVlc3RUaW1lKVxyXG5cdFx0XHRcdFx0YXNwUHJvbWlzZS50aGVuKHZhbHVlID0+IHtcclxuXHRcdFx0XHRcdFx0aWYgKHZhbHVlICE9IHVuZGVmaW5lZCkgeyBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9DdXJyZW50X0RldiwgdGhpcy5zbENvbW0uc2x2aWV3LCB2YWx1ZSkgfVxyXG5cdFx0XHRcdFx0XHQvL1xyXG5cdFx0XHRcdFx0XHQvL3NsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0N1cnJlbnRfRGV2LCB0aGlzLnNsQ29tbS5zbHZpZXcsICdTZXQgVXBkYXRlQVNQT3V0c3RhbmRpbmc6JyArIHRoaXMudXBkYXRlVHJhbnNmZXJPdXRzdGFuZGluZylcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0fSlcclxuXHRcdFx0fSBlbHNlIHsgdGhpcy51cGRhdGVUcmFuc2Zlck91dHN0YW5kaW5nID0gdHJ1ZSB9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdHNcclxuXHR9XHJcblxyXG5cdGFzeW5jIGFjdGl2YXRlQVNQVmlldygpIHtcclxuXHRcdC8vIEFkZCB0aGUgQVNQIC0gVmlld1xyXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlcmUgaXMgYSBBU1BWaWV3XHJcblx0XHRpZiAodGhpcy5zbENvbW0uc2xhc3B2aWV3ID09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHR0aGlzLnJlZ2lzdGVyVmlldyhcclxuXHRcdFx0XHRBU1BWaWV3VHlwZSxcclxuXHRcdFx0XHRsZWFmID0+IG5ldyBBU1BWaWV3KGxlYWYpXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgbGVhZiA9IHRoaXMuR2V0QXNwTGVhZigpO1xyXG5cdFx0aWYgKGxlYWYgIT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdGxlYWYuc2V0Vmlld1N0YXRlKHtcclxuXHRcdFx0XHR0eXBlOiBBU1BWaWV3VHlwZSxcclxuXHRcdFx0XHRhY3RpdmU6IGZhbHNlLFxyXG5cdFx0XHR9KVxyXG5cdFx0XHRhd2FpdCB0aGlzLnNlbWFMb2dpY1Jlc2V0KClcclxuXHRcdFx0dGhpcy5hcHAud29ya3NwYWNlLnJldmVhbExlYWYobGVhZik7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9DaGF0dHksIHVuZGVmaW5lZCwgXCJBU1AtTGVhZiBub3QgY3JlYXRlZFwiKVxyXG5cdFx0fVxyXG5cdFx0dGhpcy5zZXRWaWV3cygpXHJcblx0XHR0aGlzLmhhbmRsZVBpbmcoKVxyXG5cdFx0dGhpcy5zdGF0dXNUcmFuc2ZlciA9IHRydWVcclxuXHRcdHRoaXMuc2VtYUxvZ2ljVXBkYXRlKClcclxuXHRcdHRoaXMubXlTdGF0dXMuc2V0VGV4dCgnQVNQIGlzIG9uJyk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBhY3RpdmF0ZVZpZXcoKSB7XHJcblx0XHQvLyBBZGQgdGhlIFNlbWFMb2dpYyAtIFZpZXdcclxuXHRcdGlmICh0aGlzLnNsQ29tbS5zbHZpZXcgPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHRoaXMucmVnaXN0ZXJWaWV3KFxyXG5cdFx0XHRcdFNlbWFMb2dpY1ZpZXdUeXBlLFxyXG5cdFx0XHRcdGxlYWYgPT4gbmV3IFNlbWFMb2dpY1ZpZXcobGVhZilcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBsZWFmID0gdGhpcy5HZXRTZW1hTG9naWNMZWFmKCk7XHJcblx0XHRpZiAobGVhZiAhPSB1bmRlZmluZWQpIHtcclxuXHRcdFx0bGVhZi5zZXRWaWV3U3RhdGUoe1xyXG5cdFx0XHRcdHR5cGU6IFNlbWFMb2dpY1ZpZXdUeXBlLFxyXG5cdFx0XHRcdGFjdGl2ZTogZmFsc2UsXHJcblx0XHRcdH0pXHJcblx0XHRcdGF3YWl0IHRoaXMuc2VtYUxvZ2ljUmVzZXQoKVxyXG5cdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2UucmV2ZWFsTGVhZihsZWFmKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0NoYXR0eSwgdW5kZWZpbmVkLCBcIlNlbWFMb2dpYy1MZWFmIG5vdCBjcmVhdGVkXCIpXHJcblx0XHR9XHJcblx0XHR0aGlzLnNldFZpZXdzKClcclxuXHRcdHRoaXMuaGFuZGxlUGluZygpXHJcblx0XHR0aGlzLnNlbWFMb2dpY1VwZGF0ZSgpXHJcblx0XHR0aGlzLm15U3RhdHVzLnNldFRleHQoJ1NlbWFMb2dpYyBpcyBvbicpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgZGVhY3RpdmF0ZUFTUFZpZXcoKSB7XHJcblx0XHR0aGlzLmFwcC53b3Jrc3BhY2UuZGV0YWNoTGVhdmVzT2ZUeXBlKEFTUFZpZXdUeXBlKTtcclxuXHRcdHRoaXMuc2xDb21tLmFjdGl2YXRlZEFTUCA9IGZhbHNlXHJcblx0XHR0aGlzLnN0YXR1c1RyYW5zZmVyID0gdHJ1ZVxyXG5cdFx0dGhpcy5teVN0YXR1cy5zZXRUZXh0KCdBU1AgaXMgb2ZmJyk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBkZWFjdGl2YXRlVmlldygpIHtcclxuXHRcdHRoaXMuYXBwLndvcmtzcGFjZS5kZXRhY2hMZWF2ZXNPZlR5cGUoU2VtYUxvZ2ljVmlld1R5cGUpO1xyXG5cdFx0dGhpcy5hY3RpdmF0ZWQgPSBmYWxzZVxyXG5cdFx0dGhpcy5zbENvbW0uc2x2aWV3LnVubG9hZCgpXHJcblx0XHR0aGlzLm15U3RhdHVzLnNldFRleHQoJ1NlbWFMb2dpYyBpcyBvZmYnKTtcclxuXHR9XHJcblxyXG5cdEdldEFzcExlYWYoKTogV29ya3NwYWNlTGVhZiB8IHVuZGVmaW5lZCB7XHJcblx0XHRsZXQgZm91bmQ6IGJvb2xlYW4gPSBmYWxzZVxyXG5cdFx0bGV0IHNsdjogV29ya3NwYWNlTGVhZiB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZFxyXG5cclxuXHRcdHRoaXMuYXBwLndvcmtzcGFjZS5pdGVyYXRlQWxsTGVhdmVzKChsZWFmKSA9PiB7XHJcblx0XHRcdGlmICghZm91bmQpIHtcclxuXHRcdFx0XHRzd2l0Y2ggKGxlYWYudmlldy5nZXRWaWV3VHlwZSgpKSB7XHJcblx0XHRcdFx0XHRjYXNlIEFTUFZpZXdUeXBlOiB7XHJcblx0XHRcdFx0XHRcdGZvdW5kID0gdHJ1ZVxyXG5cdFx0XHRcdFx0XHRzbHYgPSBsZWFmXHJcblx0XHRcdFx0XHRcdC8vcmV0dXJuIHNsdlxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHRcdGlmICghZm91bmQpIHtcclxuXHRcdFx0c2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfQWxsLCB1bmRlZmluZWQsICdTcGxpdCcpXHJcblx0XHRcdHNsdiA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKCdzcGxpdCcpO1xyXG5cdFx0XHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9BbGwsIHVuZGVmaW5lZCwgc2x2KVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHNsdlxyXG5cdH1cclxuXHJcblx0R2V0U2VtYUxvZ2ljTGVhZigpOiBXb3Jrc3BhY2VMZWFmIHwgdW5kZWZpbmVkIHtcclxuXHRcdGxldCBmb3VuZDogYm9vbGVhbiA9IGZhbHNlXHJcblx0XHRsZXQgc2x2OiBXb3Jrc3BhY2VMZWFmIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkXHJcblxyXG5cdFx0dGhpcy5hcHAud29ya3NwYWNlLml0ZXJhdGVBbGxMZWF2ZXMoKGxlYWYpID0+IHtcclxuXHRcdFx0aWYgKCFmb3VuZCkge1xyXG5cdFx0XHRcdHN3aXRjaCAobGVhZi52aWV3LmdldFZpZXdUeXBlKCkpIHtcclxuXHRcdFx0XHRcdGNhc2UgU2VtYUxvZ2ljVmlld1R5cGU6IHtcclxuXHRcdFx0XHRcdFx0Zm91bmQgPSB0cnVlXHJcblx0XHRcdFx0XHRcdHNsdiA9IGxlYWZcclxuXHRcdFx0XHRcdFx0Ly9yZXR1cm4gc2x2XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdFx0aWYgKCFmb3VuZCkge1xyXG5cdFx0XHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9BbGwsIHVuZGVmaW5lZCwgJ1NwbGl0JylcclxuXHRcdFx0c2x2ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYWYoJ3NwbGl0Jyk7XHJcblx0XHRcdHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0FsbCwgdW5kZWZpbmVkLCBzbHYpXHJcblx0XHR9XHJcblx0XHRyZXR1cm4gc2x2XHJcblx0fVxyXG5cclxuXHJcblx0YXN5bmMgb251bmxvYWQoKSB7XHJcblx0XHQvLyBjb21tZW50ZWQgb3V0IGR1ZSB0byBwdWJsaXNoaW5nIHByb2Nlc3MgLSBzZWUgUGx1Z0luR3VpZGVsaW5lIC0gY291bGQgYmUgZGVsZXRlZFxyXG5cdFx0dGhpcy5hcHAud29ya3NwYWNlLmRldGFjaExlYXZlc09mVHlwZShBU1BWaWV3VHlwZSk7XHJcblx0XHQvL3RoaXMuc2xDb21tLnNsYXNwdmlldy51bmxvYWQoKVxyXG5cdFx0Ly90aGlzLmFwcC53b3Jrc3BhY2UuZGV0YWNoTGVhdmVzT2ZUeXBlKFNlbWFMb2dpY1ZpZXdUeXBlKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcclxuXHRcdHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBEZWZhdWx0X3Byb2ZpbGUsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xyXG5cdFx0aWYgKHRoaXMuc2xDb21tLnNsdmlldyAhPSB1bmRlZmluZWQpIHsgdGhpcy5zbENvbW0uc2x2aWV3LnNldE5ld0luaXRpYWwodGhpcy5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5zZXR0aW5ncy5teVNldHRpbmddLm15T3V0cHV0Rm9ybWF0LCBmYWxzZSkgfVxyXG5cdFx0dGhpcy51cGRhdGVPdXRzdGFuZGluZyA9IHRydWU7XHJcblx0XHQvL3RoaXMuc2VtYUxvZ2ljUGFyc2UoKTtcclxuXHR9XHJcblxyXG5cdGhhbmRsZVBpbmcoKSB7XHJcblx0XHRzZW1hTG9naWNQaW5nKHRoaXMuc2V0dGluZ3MsIHRoaXMubGFzdFVwZGF0ZSlcclxuXHR9XHJcblxyXG5cdGhhbmRsZVVwZGF0ZSA9ICh1cGRhdGU6IFZpZXdVcGRhdGUpID0+IHtcclxuXHRcdGlmICh0aGlzLnN0YXR1c1NMKSB7XHJcblx0XHRcdC8vIFRvIGF2b2lkIHRvIG11Y2ggcGFyc2luZyB0cmFmZmljIGZvciB0ZXN0aW5nIHdlIHRyaWVkIHRvIHBhcnNlIGl0IG9ubHkgZXZlcnkgNTAwIG1zIHdoZW4gdGhlcmUgaXMgYW4gdXBkYXRlXHJcblx0XHRcdGNvbnN0IHRleHQgPSAnVXBkYXRldGltZScgKyAnLycgKyBTdHJpbmcoRGF0ZS5ub3coKSkgKyAnLycgKyBTdHJpbmcodGhpcy5sYXN0VXBkYXRlKSArICcvJyArIFN0cmluZyhEYXRlLm5vdygpIC0gdGhpcy5sYXN0VXBkYXRlKSArICcvJyArIFN0cmluZyh0aGlzLnVwZGF0ZU91dHN0YW5kaW5nKSArICcvJyArIFN0cmluZyh0aGlzLndhaXRpbmdGb3JSZXNwb25zZSlcclxuXHRcdFx0c2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfQ3VycmVudF9EZXYsIHRoaXMuc2xDb21tLnNsdmlldywgdGV4dClcclxuXHRcdFx0aWYgKHVwZGF0ZSA9PSBudWxsKSB7IH1cclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0aWYgKHVwZGF0ZS52aWV3KSB7XHJcblx0XHRcdFx0XHRpZiAoIXVwZGF0ZS5kb2NDaGFuZ2VkICYmICF1cGRhdGUuZm9jdXNDaGFuZ2VkKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdGlmICh0aGlzLlVwZGF0ZVByb2Nlc3NpbmcgPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRcdFx0XHQvL3RoaXMudXBkYXRlT3V0c3RhbmRpbmcgPSB0cnVlXHJcblx0XHRcdFx0XHRcdFx0c2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfQ3VycmVudF9EZXYsIHRoaXMuc2xDb21tLnNsdmlldywgJ1N0YXJ0IFVwZGF0ZSBkb2NDaGFuZ2VkLCBmb2N1c2NoYW5nZWQsIFVwZFByb2MgICcgKyBTdHJpbmcodXBkYXRlLmRvY0NoYW5nZWQpICsgXCIvXCIgKyBTdHJpbmcodXBkYXRlLmZvY3VzQ2hhbmdlZCkgKyBcIi9cIiArIFN0cmluZyh0aGlzLlVwZGF0ZVByb2Nlc3NpbmcpKVxyXG5cdFx0XHRcdFx0XHRcdHRoaXMuc2VtYUxvZ2ljVXBkYXRlKClcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKChEYXRlLm5vdygpIC0gdGhpcy5sYXN0VXBkYXRlID4gdGhpcy5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5zZXR0aW5ncy5teVNldHRpbmddLm15VXBkYXRlSW50ZXJ2YWwpICYmICh0aGlzLnVwZGF0ZU91dHN0YW5kaW5nID09IHRydWUgfHwgdGhpcy51cGRhdGVUcmFuc2Zlck91dHN0YW5kaW5nID09IHRydWUpICYmICh0aGlzLndhaXRpbmdGb3JSZXNwb25zZSA9PSBmYWxzZSkpIHtcclxuXHRcdFx0XHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9DdXJyZW50X0RldiwgdGhpcy5zbENvbW0uc2x2aWV3LCAnU3RhcnQgVXBkYXRlIFBBUlNJTkcnKVxyXG5cdFx0XHRcdHRoaXMubGFzdFVwZGF0ZSA9IERhdGUubm93KClcclxuXHRcdFx0XHR0aGlzLnNlbWFMb2dpY1VwZGF0ZSgpXHJcblx0XHRcdFx0Ly90aGlzLnVwZGF0ZVRyYW5zZmVyT3V0c3RhbmRpbmcgPSBmYWxzZVxyXG5cdFx0XHRcdC8vc2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfQ3VycmVudF9EZXYsIHRoaXMuc2xDb21tLnNsdmlldywgJ1NldCBpbiBpbnRlcnZhbCBVcGRhdGVBU1BPdXRzdGFuZGluZzonICsgdGhpcy51cGRhdGVUcmFuc2Zlck91dHN0YW5kaW5nKVxyXG5cdFx0XHR9IGVsc2VcclxuXHRcdFx0XHRpZiAoKERhdGUubm93KCkgLSB0aGlzLmxhc3RVcGRhdGUgPiB0aGlzLnNldHRpbmdzLm15U0xTZXR0aW5nc1t0aGlzLnNldHRpbmdzLm15U2V0dGluZ10ubXlVcGRhdGVJbnRlcnZhbCkgJiYgKHRoaXMudXBkYXRlT3V0c3RhbmRpbmcgPT0gdHJ1ZSkgJiYgKHRoaXMud2FpdGluZ0ZvclJlc3BvbnNlID09IGZhbHNlKSkge1xyXG5cdFx0XHRcdFx0c2VtYUxvZ2ljUGluZyh0aGlzLnNldHRpbmdzLCB0aGlzLmxhc3RVcGRhdGUpXHJcblx0XHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHNlbWFMb2dpY1VwZGF0ZShzZXRWaWV3PzogYm9vbGVhbikge1xyXG5cclxuXHRcdHRoaXMud2FpdGluZ0ZvclJlc3BvbnNlID0gdHJ1ZVxyXG5cdFx0dGhpcy5VcGRhdGVQcm9jZXNzaW5nID0gdHJ1ZVxyXG5cclxuXHRcdGlmIChzZXRWaWV3ID09IHRydWUgfHwgc2V0VmlldyA9PSB1bmRlZmluZWQpIHsgdGhpcy5zZXRWaWV3cygpIH1cclxuXHJcblx0XHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9DaGF0dHksIHRoaXMuc2xDb21tLnNsdmlldywgJ1N0YXJ0IFNlbWFMb2dpY1VwZGF0ZScpXHJcblxyXG5cdFx0dGhpcy5zZXRWaWV3cygpXHJcblxyXG5cdFx0bGV0IGFjdGl2ZVZpZXcgPSB0aGlzLmdldEFjdGl2ZVZpZXcoKVxyXG5cdFx0dGhpcy5zZW1hTG9naWNQYXJzZSgpO1xyXG5cclxuXHRcdGlmICghdGhpcy51cGRhdGluZykge1xyXG5cdFx0XHR0aGlzLnVwZGF0aW5nID0gdHJ1ZVxyXG5cdFx0XHQvKiBGb3IgVmVyc2lvbiAyLjEuMyBkZWFjdGl2YXRlZCBiZWNhdXNlIG9mIGFuIGVkaXRvciBwcm9ibGVtIGJ5IGFkZGluZyBjaGFyIGZvciBodG1sdXBkYXRpbmdcclxuXHRcdFx0XHRcdFx0aWYgKGFjdGl2ZVZpZXcgIT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0XHRcdGNvbnN0IGVkaXRvcnRleHQgPSBhY3RpdmVWaWV3LmVkaXRvci5nZXRSYW5nZSh7IGxpbmU6IDAsIGNoOiAwIH0sIHsgbGluZTogYWN0aXZlVmlldy5lZGl0b3IubGFzdExpbmUoKSwgY2g6IGFjdGl2ZVZpZXcuZWRpdG9yLmxhc3RMaW5lLmxlbmd0aCB9KVxyXG5cdFx0XHRcdFx0XHRcdGNvbnN0IGFkZENoYXI6IHN0cmluZyA9IFwiIFwiXHJcblx0XHRcdFx0XHRcdFx0bGV0IGN1cnNvciA9IGFjdGl2ZVZpZXcuZWRpdG9yLmdldEN1cnNvcigpXHJcblx0XHRcdFx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBhY3RpdmVWaWV3LmVkaXRvci5sYXN0TGluZSgpOyBpKyspIHtcclxuXHRcdFx0XHRcdFx0XHRcdGlmIChhY3RpdmVWaWV3LmVkaXRvci5nZXRMaW5lKGkpLnN1YnN0cmluZygwLCBzZW1hTG9naWNDb21tYW5kLmNvbW1hbmRfc3RhcnQubGVuZ3RoKSA9PSBzZW1hTG9naWNDb21tYW5kLmNvbW1hbmRfc3RhcnQpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGFjdGl2ZVZpZXcuZWRpdG9yLmdldExpbmUoaSkuc3Vic3RyaW5nKGFjdGl2ZVZpZXcuZWRpdG9yLmdldExpbmUoaSkubGVuZ3RoIC0gMSwgYWN0aXZlVmlldy5lZGl0b3IuZ2V0TGluZShpKS5sZW5ndGgpID09IHNlbWFMb2dpY0NvbW1hbmQuY29tbWFuZF9lbmQpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyB0ZW1wb3Jhcmx5IGFkZCBhIGNoYXIgZm9yIGZvcmNpbmcgYW4gdXBkYXRlIG9mIGh0bWwtdmlldyBcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRhY3RpdmVWaWV3LmVkaXRvci5zZXRMaW5lKGksIGFjdGl2ZVZpZXcuZWRpdG9yLmdldExpbmUoaSkuc3Vic3RyaW5nKDAsIGFjdGl2ZVZpZXcuZWRpdG9yLmdldExpbmUoaSkubGVuZ3RoKSArIGFkZENoYXIpXHJcblx0XHRcdFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChhY3RpdmVWaWV3LmVkaXRvci5nZXRMaW5lKGkpLnN1YnN0cmluZyhhY3RpdmVWaWV3LmVkaXRvci5nZXRMaW5lKGkpLmxlbmd0aCAtIDEsIGFjdGl2ZVZpZXcuZWRpdG9yLmdldExpbmUoaSkubGVuZ3RoKSA9PSBhZGRDaGFyKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyB0ZW1wb3Jhcmx5IGFkZCBhIGNoYXIgZm9yIGZvcmNpbmcgYW4gdXBkYXRlIG9mIGh0bWwtdmlldyBcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFjdGl2ZVZpZXcuZWRpdG9yLnNldExpbmUoaSwgYWN0aXZlVmlldy5lZGl0b3IuZ2V0TGluZShpKS5zdWJzdHJpbmcoMCwgYWN0aXZlVmlldy5lZGl0b3IuZ2V0TGluZShpKS5sZW5ndGggLSAxKSlcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0Ly8gYmFjayB0byBjdXJzb3JcclxuXHRcdFx0XHRcdFx0XHRhY3RpdmVWaWV3LmVkaXRvci5zZXRDdXJzb3IoY3Vyc29yKVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdCovXHJcblx0XHRcdHRoaXMudXBkYXRpbmcgPSBmYWxzZVxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuVXBkYXRlUHJvY2Vzc2luZyA9IGZhbHNlXHJcblx0XHR0aGlzLndhaXRpbmdGb3JSZXNwb25zZSA9IGZhbHNlXHJcblx0fVxyXG5cclxuXHJcblx0Z2V0U2VtYUxvZ2ljVGV4dCgpOiBzdHJpbmcge1xyXG5cdFx0aWYgKHRoaXMuc2xDb21tLnNsdmlldy5jb250ZW50RWwudGV4dENvbnRlbnQgPT0gbnVsbCkge1xyXG5cdFx0XHRyZXR1cm4gXCJcIlxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuc2xDb21tLnNsdmlldy5nZXRDb250ZW50KClcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGFzeW5jIHNlbWFMb2dpY1Jlc2V0KCkge1xyXG5cdFx0Ly8gbGV0IHZBUElfVVJMX1Jlc2V0ID0gQVBJX0RlZmF1bHRzLkJhc2VfVVJMICsgXCI6XCIgKyBBUElfRGVmYXVsdHMuUG9ydCArIEFQSV9EZWZhdWx0cy5yZXNldCArIFwiP3NpZD1cIiArIEFQSV9EZWZhdWx0cy5TSUQ7XHJcblx0XHQvLyBsZXQgdkFQSV9VUkxfUmVzZXQgPSBnZXRIb3N0UG9ydCh0aGlzLnNldHRpbmdzKSArIEFQSV9EZWZhdWx0cy5yZXNldCArIFwiP3NpZD1cIiArIHRoaXMuc2V0dGluZ3MubXlTTFNldHRpbmdzW3RoaXMuc2V0dGluZ3MubXlTZXR0aW5nXS5teVNJRDtcclxuXHRcdGxldCB2QVBJX1VSTF9SZXNldCA9IGdldEhvc3RQb3J0KHRoaXMuc2V0dGluZ3MpICsgQVBJX0RlZmF1bHRzLnJlc2V0ICsgXCI/c2lkPVwiICsgbXlnU0lEO1xyXG5cdFx0bGV0IG9wdGlvbnNSZXNldDogUmVxdWVzdFVybFBhcmFtXHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5zZXR0aW5ncy5teVNldHRpbmddLm15VXNlSHR0cHNTTCAmJiB0aGlzLnNldHRpbmdzLm15U0xTZXR0aW5nc1t0aGlzLnNldHRpbmdzLm15U2V0dGluZ10ubXlVc2VyU0wgIT0gJycpIHtcclxuXHRcdFx0b3B0aW9uc1Jlc2V0ID0ge1xyXG5cdFx0XHRcdHVybDogdkFQSV9VUkxfUmVzZXQsXHJcblx0XHRcdFx0bWV0aG9kOiAnUE9TVCcsXHJcblx0XHRcdFx0aGVhZGVyczoge1xyXG5cdFx0XHRcdFx0XCJjb250ZW50LXR5cGVcIjogXCJ0ZXh0L3BsYWluXCIsXHJcblx0XHRcdFx0XHRcIkF1dGhvcml6YXRpb25cIjogXCJCYXNpYyBcIiArIGJ0b2EodGhpcy5zZXR0aW5ncy5teVNMU2V0dGluZ3NbdGhpcy5zZXR0aW5ncy5teVNldHRpbmddLm15VXNlclNMICsgXCI6XCIgKyB0aGlzLnNldHRpbmdzLm15U0xTZXR0aW5nc1t0aGlzLnNldHRpbmdzLm15U2V0dGluZ10ubXlQYXNzd29yZFNMKVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdG9wdGlvbnNSZXNldCA9IHtcclxuXHRcdFx0XHR1cmw6IHZBUElfVVJMX1Jlc2V0LFxyXG5cdFx0XHRcdG1ldGhvZDogJ1BPU1QnLFxyXG5cdFx0XHRcdGhlYWRlcnM6IHtcclxuXHRcdFx0XHRcdFwiY29udGVudC10eXBlXCI6IFwidGV4dC9wbGFpblwiXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0ltcG9ydGFudCwgdGhpcy5zbENvbW0uc2x2aWV3LCBvcHRpb25zUmVzZXQpXHJcblx0XHR0cnkge1xyXG5cdFx0XHRjb25zdCByZXNwb25zZVJlc2V0ID0gYXdhaXQgcmVxdWVzdFVybChvcHRpb25zUmVzZXQpXHJcblx0XHRcdHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0luZm9ybWF0aXZlLCB0aGlzLnNsQ29tbS5zbHZpZXcsIGBTZW1hTG9naWM6IFJlc2V0IHdpdGggaHR0cC1zdGF0dXMgJHtyZXNwb25zZVJlc2V0LnN0YXR1cy50b1N0cmluZygpfWApXHJcblx0XHR9XHJcblx0XHRjYXRjaCAoZSkge1xyXG5cdFx0XHRzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9FcnJvciwgdGhpcy5zbENvbW0uc2x2aWV3LCBgQ2F0Y2hlcnJvciBieSByZXNldCAke3ZBUElfVVJMX1Jlc2V0fWApXHJcblx0XHRcdHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0Vycm9yLCB0aGlzLnNsQ29tbS5zbHZpZXcsIGUudG9TdHJpbmcoKSlcclxuXHRcdH1cclxuXHR9XHJcblxyXG59XHJcblxyXG4iLCAiaW1wb3J0IHsgRHJvcGRvd25Db21wb25lbnQsIEl0ZW1WaWV3LCBXb3Jrc3BhY2VMZWFmLCBCdXR0b25Db21wb25lbnQsIFJlcXVlc3RVcmxQYXJhbSwgcmVxdWVzdFVybCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBzbFRleHRzLCBEZWJ1Z0xldk1hcCwgUnVsZXNldHR5cGVzQ29tbWFuZHMsIFJzdHlwZXNfU2VtYWxvZ2ljLCBSc3R5cGVzX1NlbWFudGljVHJlZSwgUnN0eXBlc19Lbm93bGVkZ2VHcmFwaCwgUnN0eXBlc19QaWN0dXJlLCBSc3R5cGVzX0FTUCB9IGZyb20gXCIuL2NvbnN0XCJcclxuaW1wb3J0IHsgU2VtYUxvZ2ljUGx1Z2luQ29tbSwgRGVidWdMZXZlbCwgU2VtYUxvZ2ljUGx1Z2luU2V0dGluZ3MgfSBmcm9tIFwiLi4vbWFpblwiXHJcbmltcG9ydCB7IHNsY29uc29sZWxvZyB9IGZyb20gJy4vdXRpbHMnXHJcbmltcG9ydCB7IFZpZXdVdGlscyB9IGZyb20gXCIuL3ZpZXdfdXRpbHNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBTZW1hTG9naWNWaWV3VHlwZSA9IFwiU2VtYUxvZ2ljU2VydmljZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlbWFMb2dpY1ZpZXcgZXh0ZW5kcyBJdGVtVmlldyB7XHJcbiAgdmlld191dGlsczogVmlld1V0aWxzXHJcbiAgbXlBY3Rpb246IEhUTUxFbGVtZW50XHJcbiAgZHJvcGRvd25CdXR0b246IERyb3Bkb3duQ29tcG9uZW50XHJcbiAgY29weUJ1dHRvbjogQnV0dG9uQ29tcG9uZW50XHJcbiAgZGVidWdCdXR0b246IEJ1dHRvbkNvbXBvbmVudFxyXG4gIGRlYnVnQ29udGVudDogc3RyaW5nW11cclxuICB6b29tSW46IEJ1dHRvbkNvbXBvbmVudFxyXG4gIHpvb21SYXRpbzogQnV0dG9uQ29tcG9uZW50XHJcbiAgem9vbU91dDogQnV0dG9uQ29tcG9uZW50XHJcbiAgc2xDb21tOiBTZW1hTG9naWNQbHVnaW5Db21tXHJcbiAgc2NhbGVSYXRpbzogbnVtYmVyXHJcbiAgY3VyclJlc3VsdDogc3RyaW5nXHJcbiAgYm9keXRleHQ6IHN0cmluZ1xyXG4gIGFwaVVSTDogc3RyaW5nXHJcbiAgZGlhbGVjdElEOiBzdHJpbmdcclxuXHJcbiAgcHVibGljIGRlYnVnSW5saW5lOiBib29sZWFuXHJcblxyXG4gIHB1YmxpYyBnZXRPdXRQdXRGb3JtYXQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLmRyb3Bkb3duQnV0dG9uLmdldFZhbHVlKClcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXREZWJ1Z0lubGluZSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmRlYnVnSW5saW5lXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0Q29udGVudCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMudmlld191dGlscy5nZXRDb250ZW50KHRoaXMuY29udGVudEVsLCB0aGlzLmdldE91dFB1dEZvcm1hdCgpKVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGFwcGVuZERlYnVnQ29udGVudCh0ZXh0OiBzdHJpbmcpIHtcclxuICAgIHRoaXMuZGVidWdDb250ZW50LnB1c2godGV4dClcclxuICB9XHJcblxyXG4gIGNvcHlUb0NiKCkge1xyXG4gICAgY29uc3QgYmxvYmNvbnRlbnRUZXh0ID0gKGNvbnQ6IHN0cmluZykgPT4gYCR7Y29udH1gXHJcblxyXG4gICAgbGV0IGRhdGEgPVxyXG4gICAgICBuZXcgQ2xpcGJvYXJkSXRlbSh7XHJcbiAgICAgICAgXCJ0ZXh0L3BsYWluXCI6IG5ldyBCbG9iKFtibG9iY29udGVudFRleHQodGhpcy5jdXJyUmVzdWx0KV0sIHtcclxuICAgICAgICAgIHR5cGU6IFwidGV4dC9wbGFpblwiXHJcbiAgICAgICAgfSlcclxuICAgICAgfSlcclxuXHJcbiAgICBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlKFtkYXRhXSlcclxuICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIGFsZXJ0KFwic3VjY2Vzc2Z1bGx5IGNvcGllZFwiKTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKCgpID0+IHtcclxuICAgICAgICBhbGVydChcInNvbWV0aGluZyB3ZW50IHdyb25nXCIpO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKGxlYWY6IFdvcmtzcGFjZUxlYWYpIHtcclxuICAgIHN1cGVyKGxlYWYpO1xyXG4gICAgdGhpcy5zY2FsZVJhdGlvID0gMTAwXHJcbiAgICB0aGlzLnZpZXdfdXRpbHMgPSBuZXcgVmlld1V0aWxzXHJcbiAgICB0aGlzLmRlYnVnSW5saW5lID0gZmFsc2VcclxuICAgIHRoaXMuZGVidWdDb250ZW50ID0gW11cclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRDb21tKGNvbW06IFNlbWFMb2dpY1BsdWdpbkNvbW0pIHtcclxuICAgIGlmICh0aGlzLnNsQ29tbSAhPSBjb21tKSB7XHJcbiAgICAgIHRoaXMuc2xDb21tID0gY29tbVxyXG4gICAgICAvL3RoaXMuc2xDb21tLnNldFNsVmlldyh0aGlzKVxyXG4gICAgICB0aGlzLnNldE5ld0luaXRpYWwodGhpcy5zbENvbW0uc2xQbHVnaW4uc2V0dGluZ3MubXlTTFNldHRpbmdzW3RoaXMuc2xDb21tLnNsUGx1Z2luLnNldHRpbmdzLm15U2V0dGluZ10ubXlPdXRwdXRGb3JtYXQsIGZhbHNlKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0Vmlld1R5cGUoKSB7XHJcbiAgICByZXR1cm4gU2VtYUxvZ2ljVmlld1R5cGU7XHJcbiAgfVxyXG5cclxuICBnZXREaXNwbGF5VGV4dCgpIHtcclxuICAgIHJldHVybiBTZW1hTG9naWNWaWV3VHlwZTtcclxuICB9XHJcblxyXG4gIG9ubG9hZCgpOiB2b2lkIHtcclxuICAgIHRoaXMubmF2aWdhdGlvbiA9IHRydWVcclxuICAgIHRoaXMuY29udGVudEVsLmNvbnRlbnRFZGl0YWJsZSA9ICd0cnVlJ1xyXG4gICAgdGhpcy5kZWJ1Z0lubGluZSA9PSBmYWxzZVxyXG4gIH1cclxuXHJcbiAgZ2V0RGVidWdCdXR0b25UZXh0KCk6IHN0cmluZyB7XHJcbiAgICBpZiAodGhpcy5kZWJ1Z0lubGluZSA9PSB0cnVlKSB7XHJcbiAgICAgIHJldHVybiAnSW5saW5lRGVidWcgaXMgb24nXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gJ0lubGluZURlYnVnIGlzIG9mZidcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNyZWF0ZURyb3BEb3duQnV0dG9uRm9yT3V0UHV0Rm9ybWF0KGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIGRyb3BEb3duVmFsdWU6IHN0cmluZyk6IEhUTUxFbGVtZW50IHtcclxuICAgIHRoaXMuZHJvcGRvd25CdXR0b24gPSBuZXcgRHJvcGRvd25Db21wb25lbnQoY29udGFpbmVyKVxyXG4gICAgICAuYWRkT3B0aW9uKFJ1bGVzZXR0eXBlc0NvbW1hbmRzW1JzdHlwZXNfU2VtYWxvZ2ljXVsxXSwgUnVsZXNldHR5cGVzQ29tbWFuZHNbUnN0eXBlc19TZW1hbG9naWNdWzBdKVxyXG4gICAgICAuYWRkT3B0aW9uKFJ1bGVzZXR0eXBlc0NvbW1hbmRzW1JzdHlwZXNfQVNQXVsxXSwgUnVsZXNldHR5cGVzQ29tbWFuZHNbUnN0eXBlc19BU1BdWzBdKVxyXG4gICAgICAuYWRkT3B0aW9uKFJ1bGVzZXR0eXBlc0NvbW1hbmRzW1JzdHlwZXNfUGljdHVyZV1bMV0sIFJ1bGVzZXR0eXBlc0NvbW1hbmRzW1JzdHlwZXNfUGljdHVyZV1bMF0pXHJcbiAgICAgIC5hZGRPcHRpb24oUnVsZXNldHR5cGVzQ29tbWFuZHNbUnN0eXBlc19TZW1hbnRpY1RyZWVdWzFdLCBSdWxlc2V0dHlwZXNDb21tYW5kc1tSc3R5cGVzX1NlbWFudGljVHJlZV1bMF0pXHJcbiAgICAgIC5hZGRPcHRpb24oUnVsZXNldHR5cGVzQ29tbWFuZHNbUnN0eXBlc19Lbm93bGVkZ2VHcmFwaF1bMV0sIFJ1bGVzZXR0eXBlc0NvbW1hbmRzW1JzdHlwZXNfS25vd2xlZGdlR3JhcGhdWzBdKVxyXG4gICAgICAuc2V0VmFsdWUoZHJvcERvd25WYWx1ZSlcclxuICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgIHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0luZm9ybWF0aXZlLCB0aGlzLnNsQ29tbS5zbHZpZXcsICdTZXQgVmlld091dHB1dEZvcm1hdDogJyArIHZhbHVlKTtcclxuICAgICAgICB0aGlzLnNsQ29tbS5zbFBsdWdpbi51cGRhdGVPdXRzdGFuZGluZyA9IHRydWVcclxuICAgICAgICBkcm9wRG93blZhbHVlID0gdmFsdWVcclxuICAgICAgICB0aGlzLmRyb3Bkb3duQnV0dG9uLnNldFZhbHVlKHZhbHVlKVxyXG4gICAgICAgIHRoaXMuZ2V0U2VtYUxvZ2ljUGFyc2UodGhpcy5zbENvbW0uc2xQbHVnaW4uc2V0dGluZ3MsIHRoaXMuYXBpVVJMLCB0aGlzLmRpYWxlY3RJRCwgdGhpcy5ib2R5dGV4dCwgZmFsc2UsIHZhbHVlKVxyXG4gICAgICAgIC8vdGhpcy51cGRhdGVWaWV3KClcclxuICAgICAgfSlcclxuICAgIHJldHVybiBjb250YWluZXJcclxuICB9XHJcbiAgY3JlYXRlQ29weVRvQ2xpcGJvYXJkQnV0dG9uKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpOiBIVE1MRWxlbWVudCB7XHJcbiAgICB0aGlzLmNvcHlCdXR0b24gPSBuZXcgQnV0dG9uQ29tcG9uZW50KGNvbnRhaW5lcilcclxuICAgICAgLnNldEJ1dHRvblRleHQoJ0NvcHkgdG8gQ2xpcGJvYXJkJylcclxuICAgICAgLm9uQ2xpY2soKG1vdXNlX2V2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgdGhpcy5jb3B5VG9DYigpXHJcbiAgICAgIH0pXHJcbiAgICByZXR1cm4gY29udGFpbmVyXHJcbiAgfVxyXG4gIGNyZWF0ZURlYnVnQnV0dG9uKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBpZiAoRGVidWdMZXZlbCAhPSBEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX09mZikge1xyXG4gICAgICB0aGlzLmRlYnVnQnV0dG9uID0gbmV3IEJ1dHRvbkNvbXBvbmVudChjb250YWluZXIpXHJcbiAgICAgICAgLnNldEJ1dHRvblRleHQodGhpcy5nZXREZWJ1Z0J1dHRvblRleHQoKSlcclxuICAgICAgICAub25DbGljaygobW91c2VfZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgICAgICAgIGlmICh0aGlzLmRlYnVnSW5saW5lID09IHRydWUpIHtcclxuICAgICAgICAgICAgdGhpcy5kZWJ1Z0lubGluZSA9IGZhbHNlXHJcbiAgICAgICAgICAgIHRoaXMuZGVidWdDb250ZW50ID0gW11cclxuICAgICAgICAgIH0gZWxzZSB7IHRoaXMuZGVidWdJbmxpbmUgPSB0cnVlIH1cclxuICAgICAgICAgIGlmICh0aGlzLnNsQ29tbS5zbHZpZXcgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0luZm9ybWF0aXZlLCB0aGlzLnNsQ29tbS5zbHZpZXcsICdTZXQgSW5saW5lRGVidWdnaW5nOiAnICsgdGhpcy5kZWJ1Z0lubGluZSk7XHJcbiAgICAgICAgICAgIC8vdGhpcy5zZXROZXdJbml0aWFsKGRyb3BEb3duVmFsdWUpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLnVwZGF0ZVZpZXcoKVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29udGFpbmVyXHJcbiAgfVxyXG5cclxuICBjcmVhdGVTY2FsZUJ1dHRvbnMoY29udGFpbmVyOiBIVE1MRWxlbWVudCk6IEhUTUxFbGVtZW50IHtcclxuICAgIC8vIFpvb20gaW5cclxuICAgIHRoaXMuem9vbUluID0gbmV3IEJ1dHRvbkNvbXBvbmVudChjb250YWluZXIpXHJcbiAgICAgIC5zZXRCdXR0b25UZXh0KCctJylcclxuICAgICAgLm9uQ2xpY2soKG1vdXNlX2V2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgdGhpcy5zY2FsZVJhdGlvID0gdGhpcy5zY2FsZVJhdGlvIC8gMlxyXG4gICAgICAgIGlmICh0aGlzLnpvb21SYXRpbyAhPSBudWxsKSB7IHRoaXMuem9vbVJhdGlvLnNldEJ1dHRvblRleHQoU3RyaW5nKHRoaXMuc2NhbGVSYXRpbykpIH1cclxuICAgICAgICBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9JbmZvcm1hdGl2ZSwgdGhpcy5zbENvbW0uc2x2aWV3LCAnU2V0IFNjYWxlUmF0aW8gdG86ICcgKyB0aGlzLnNjYWxlUmF0aW8pO1xyXG4gICAgICAgIHRoaXMudXBkYXRlVmlldygpXHJcbiAgICAgIH0pXHJcblxyXG4gICAgdGhpcy56b29tUmF0aW8gPSBuZXcgQnV0dG9uQ29tcG9uZW50KGNvbnRhaW5lcilcclxuICAgICAgLnNldEJ1dHRvblRleHQoU3RyaW5nKHRoaXMuc2NhbGVSYXRpbykpXHJcbiAgICAgIC5vbkNsaWNrKChtb3VzZV9ldmVudDogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgICAgIHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0luZm9ybWF0aXZlLCB0aGlzLnNsQ29tbS5zbHZpZXcsICdTY2FsZVJhdGlvIDo9ICcgKyB0aGlzLnNjYWxlUmF0aW8pO1xyXG4gICAgICB9KVxyXG5cclxuICAgIHRoaXMuem9vbU91dCA9IG5ldyBCdXR0b25Db21wb25lbnQoY29udGFpbmVyKVxyXG4gICAgICAuc2V0QnV0dG9uVGV4dCgnKycpXHJcbiAgICAgIC5vbkNsaWNrKChtb3VzZV9ldmVudDogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc2NhbGVSYXRpbyA9IHRoaXMuc2NhbGVSYXRpbyAqIDJcclxuICAgICAgICB0aGlzLnpvb21SYXRpby5zZXRCdXR0b25UZXh0KFN0cmluZyh0aGlzLnNjYWxlUmF0aW8pKVxyXG4gICAgICAgIHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0luZm9ybWF0aXZlLCB0aGlzLnNsQ29tbS5zbHZpZXcsICdTZXQgU2NhbGVSYXRpbyB0bzogJyArIHRoaXMuc2NhbGVSYXRpbyk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVWaWV3KClcclxuICAgICAgfSlcclxuXHJcbiAgICByZXR1cm4gY29udGFpbmVyXHJcbiAgfVxyXG5cclxuICBjaGVja0NvbnRhaW5lckNvbnRlbnQoKTogYm9vbGVhbiB7XHJcbiAgICBpZiAodGhpcy5jb250YWluZXJFbC5jaGlsZHJlbiAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgaWYgKHRoaXMuY29udGFpbmVyRWwuY2hpbGRyZW5bMV0udGV4dENvbnRlbnQ/LnN1YnN0cmluZygwLCBzbFRleHRzWydIZWFkZXJTTCddLmxlbmd0aCkgPT0gc2xUZXh0c1snSGVhZGVyU0wnXSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGVsZXRlQ29udGFpbmVyQ29udGVudCgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmNvbnRhaW5lckVsLmNoaWxkcmVuICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29udGFpbmVyRWwuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAodGhpcy5jb250YWluZXJFbC5jaGlsZHJlbltpXS5ub2RlTmFtZSA9PSBcInBcIikge1xyXG4gICAgICAgICAgd2hpbGUgKHRoaXMuY29udGFpbmVyRWwuY2hpbGRyZW5baV0gIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuY2hpbGRyZW5baV0uZW1wdHlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICBwdWJsaWMgc2V0TmV3SW5pdGlhbChkcm9wRG93blZhbHVlOiBzdHJpbmcsIG5vdzogYm9vbGVhbikge1xyXG4gICAgbGV0IGNvbnRhaW5lciA9IHRoaXMuY29udGVudEVsXHJcbiAgICBpZiAoIXRoaXMuY2hlY2tDb250YWluZXJDb250ZW50KCkgfHwgbm93KSB7XHJcbiAgICAgIGNvbnRhaW5lci5lbXB0eSgpXHJcbiAgICAgIC8vY29udGFpbmVyLmNvbnRlbnRFZGl0YWJsZSA9ICd0cnVlJ1xyXG4gICAgICBjb250YWluZXIuY3JlYXRlRWwoXCJoNFwiLCB7IHRleHQ6IHNsVGV4dHNbJ0hlYWRlclNMJ10gfSk7XHJcblxyXG4gICAgICBjb250YWluZXIgPSB0aGlzLmNyZWF0ZURyb3BEb3duQnV0dG9uRm9yT3V0UHV0Rm9ybWF0KGNvbnRhaW5lciwgZHJvcERvd25WYWx1ZSlcclxuICAgICAgY29udGFpbmVyID0gdGhpcy5jcmVhdGVDb3B5VG9DbGlwYm9hcmRCdXR0b24oY29udGFpbmVyKVxyXG4gICAgICBjb250YWluZXIgPSB0aGlzLmNyZWF0ZURlYnVnQnV0dG9uKGNvbnRhaW5lcilcclxuICAgICAgaWYgKGRyb3BEb3duVmFsdWUgPT0gUnVsZXNldHR5cGVzQ29tbWFuZHNbUnN0eXBlc19QaWN0dXJlXVsxXSkge1xyXG4gICAgICAgIGNvbnRhaW5lciA9IHRoaXMuY3JlYXRlU2NhbGVCdXR0b25zKGNvbnRhaW5lcilcclxuICAgICAgfVxyXG4gICAgICBjb250YWluZXIuY3JlYXRlRWwoXCJwXCIpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmRlbGV0ZUNvbnRhaW5lckNvbnRlbnQoKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgb25PcGVuKCkge1xyXG4gICAgdGhpcy5zZXROZXdJbml0aWFsKFJ1bGVzZXR0eXBlc0NvbW1hbmRzW1JzdHlwZXNfU2VtYWxvZ2ljXVsxXSwgZmFsc2UpXHJcbiAgICAvLyB0aGlzLmNvbnRhaW5lckVsLmNoaWxkcmVuWzFdLmFwcGVuZFRleHQoXCJsZXQncyBiZWdpblwiKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIG9uQ2xvc2UoKSB7XHJcbiAgICAvLyBOb3RoaW5nIHRvIGNsZWFuIHVwLlxyXG4gIH1cclxuXHJcbiAgc2hvd0Vycm9yKGZyYWdtZW50OiBEb2N1bWVudEZyYWdtZW50KSB7XHJcbiAgICAvLyAgIHRoaXMuc2V0SW5pdGlhbChSdWxlc2V0dHlwZXNDb21tYW5kc1tSc3R5cGVzX1NlbWFsb2dpY11bMV0pXHJcbiAgICB0aGlzLmNvbnRlbnRFbC5hcHBlbmRDaGlsZChmcmFnbWVudClcclxuICB9XHJcbiAgb251bmxvYWQoKTogdm9pZCB7XHJcblxyXG4gICAgaWYgKHRoaXMuc2xDb21tLnNsUGx1Z2luICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aGlzLnNsQ29tbS5zbFBsdWdpbi5hY3RpdmF0ZWQgPSBmYWxzZVxyXG4gICAgICB0aGlzLnNsQ29tbS5zbFBsdWdpbi5teVN0YXR1cy5zZXRUZXh0KCdTZW1hTG9naWMgaXMgb2ZmJyk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgY3JlYXRlU2VtYUxvZ2ljUmVxdWVzdEJvZHkoZGlhbGVjdElEOiBzdHJpbmcsIGJvZHl0ZXh0OiBzdHJpbmcsIG91dFB1dEZvcm1hdDogc3RyaW5nKTogYW55IHtcclxuICAgIHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0ltcG9ydGFudCwgdGhpcy5zbENvbW0uc2x2aWV3LCAnQ29udGV4dDogJyArIGRpYWxlY3RJRCArICcgQm9keXRleHQ6ICcgKyBib2R5dGV4dClcclxuICAgIGxldCBzZW1hTG9naWNKc29uUmVxdWVzdEJvZHkgPSB7XHJcbiAgICAgIFwidGV4dFwiOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgXCJ0ZXh0SURcIjogXCJQYXJzaW5nT25UaGVGbHlcIixcclxuICAgICAgICAgIFwiZGlhbGVjdElEXCI6IGRpYWxlY3RJRCxcclxuICAgICAgICAgIFwicnVsZXNcIjogYm9keXRleHRcclxuICAgICAgICB9XHJcbiAgICAgIF0sXHJcbiAgICAgIFwiZmlsdGVyXCI6IHt9LFxyXG4gICAgICBcInBlcnNpc3RlbmN5XCI6IGZhbHNlLFxyXG4gICAgICBcInJ1bGVzZXR0eXBlXCI6IG91dFB1dEZvcm1hdFxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNlbWFMb2dpY0pzb25SZXF1ZXN0Qm9keVxyXG4gIH1cclxuXHJcbiAgY3JlYXRlU2VtYUxvZ2ljUmVxdWVzdChzZXR0aW5nczogU2VtYUxvZ2ljUGx1Z2luU2V0dGluZ3MsIHZBUElfVVJMOiBzdHJpbmcsIHNlbWFMb2dpY0pzb25SZXF1ZXN0Qm9keTogYW55KTogUmVxdWVzdFVybFBhcmFtIHtcclxuICAgIGxldCByZXF1ZXN0OiBSZXF1ZXN0VXJsUGFyYW0gPSB7XHJcbiAgICAgIHVybDogdkFQSV9VUkwsXHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcclxuICAgICAgfSxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoc2VtYUxvZ2ljSnNvblJlcXVlc3RCb2R5KVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChzZXR0aW5ncy5teVNMU2V0dGluZ3Nbc2V0dGluZ3MubXlTZXR0aW5nXS5teVVzZUh0dHBzU0wgJiYgc2V0dGluZ3MubXlTTFNldHRpbmdzW3NldHRpbmdzLm15U2V0dGluZ10ubXlVc2VyU0wgIT0gJycpIHtcclxuICAgICAgcmVxdWVzdCA9IHtcclxuICAgICAgICB1cmw6IHZBUElfVVJMLFxyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgICAgXCJBdXRob3JpemF0aW9uXCI6IFwiQmFzaWMgXCIgKyBidG9hKHNldHRpbmdzLm15U0xTZXR0aW5nc1tzZXR0aW5ncy5teVNldHRpbmddLm15VXNlclNMICsgXCI6XCIgKyBzZXR0aW5ncy5teVNMU2V0dGluZ3Nbc2V0dGluZ3MubXlTZXR0aW5nXS5teVBhc3N3b3JkU0wpXHJcbiAgICAgICAgfSxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShzZW1hTG9naWNKc29uUmVxdWVzdEJvZHkpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0ltcG9ydGFudCwgdGhpcy5zbENvbW0uc2x2aWV3LCAnUGFyc2luZ3NzdHJpbmcnKVxyXG4gICAgc2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfSW1wb3J0YW50LCB0aGlzLnNsQ29tbS5zbHZpZXcsIHJlcXVlc3QpXHJcbiAgICByZXR1cm4gcmVxdWVzdFxyXG4gIH1cclxuXHJcbiAgZ2V0UmVxdWVzdEVtYmVkKGNvbnRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBpZiAodGhpcy5nZXRPdXRQdXRGb3JtYXQoKSA9PSBSdWxlc2V0dHlwZXNDb21tYW5kc1tSc3R5cGVzX1BpY3R1cmVdWzFdKSB7XHJcbiAgICAgIC8vIFpvb20gZm9yIFBpY3R1cmVcclxuICAgICAgLy8gdHJ5IHRvIGdldCBvcmlnaW5hbCB2aWV3Ym94IHNpemVcclxuICAgICAgbGV0IHZpZXdCb3hTdHJpbmc6IHN0cmluZ1xyXG4gICAgICBjb25zdCBiZWdpblZCID0gY29udGVudC5pbmRleE9mKCd2aWV3Qm94JylcclxuICAgICAgaWYgKGJlZ2luVkIgPiAwKSB7XHJcbiAgICAgICAgY29uc3QgZW5kVkIgPSBjb250ZW50LmluZGV4T2YoJ1xcXCInLCBjb250ZW50LmluZGV4T2YoJ1xcXCInLCBiZWdpblZCKSArIDEpXHJcbiAgICAgICAgdmlld0JveFN0cmluZyA9IGNvbnRlbnQuc3Vic3RyaW5nKGJlZ2luVkIsIGVuZFZCICsgMSlcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2aWV3Qm94U3RyaW5nID0gJ3ZpZXdCb3ggPSBcIjAgMCAxNiA5XCInXHJcbiAgICAgIH1cclxuICAgICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZShcIjxib2R5PlwiLCBcIlwiKVxyXG4gICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKFwiPC9ib2R5PlwiLCBcIlwiKVxyXG5cclxuICAgICAgbGV0IGhlYWRlcjogc3RyaW5nXHJcbiAgICAgIGhlYWRlciA9ICc8c3ZnICAnICsgdmlld0JveFN0cmluZyArICcgd2lkdGggPSBcIicgKyBTdHJpbmcodGhpcy5zY2FsZVJhdGlvKSArICclXCIgeG1sbnMgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgPlxcbidcclxuICAgICAgaGVhZGVyID0gaGVhZGVyICsgY29udGVudFxyXG4gICAgICBoZWFkZXIgPSBoZWFkZXIgKyAnPC9zdmc+J1xyXG4gICAgICByZXR1cm4gaGVhZGVyXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gY29udGVudFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0Q3VyclJlc3VsdCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0UmVxdWVzdEVtYmVkKHRoaXMuY3VyclJlc3VsdClcclxuICB9XHJcblxyXG4gIGdldEN1cnJIVE1MKCk6IHZvaWQge1xyXG4gICAgbGV0IHJlc3BvbnNlQ29udGVudCA9IHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKCdkaXYnKTtcclxuXHJcbiAgICBpZiAodGhpcy5kZWJ1Z0lubGluZSA9PSB0cnVlKSB7XHJcbiAgICAgIHRoaXMuZGVidWdDb250ZW50LmZvckVhY2godmFsdWUgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRleHRsaW5lID0gcmVzcG9uc2VDb250ZW50LmNyZWF0ZUVsKFwic3BhblwiLCB7IHRleHQ6IHZhbHVlICsgXCJcXG5cIiwgY2xzOiBcImRlYnVnaW5saW5lXCIgfSlcclxuICAgICAgICAvL3RleHRsaW5lLnN0eWxlLmNzc1RleHQgPSAnd2hpdGUtc3BhY2U6IHByZTsnIC8vOyB3aGl0ZS1zcGFjZTogcHJlLWxpbmU7J1xyXG4gICAgICB9KVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHRoaXMuZ2V0T3V0UHV0Rm9ybWF0KCkgPT0gUnVsZXNldHR5cGVzQ29tbWFuZHNbUnN0eXBlc19BU1BdWzFdKSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdHRleHRhcnJheSA9IHRoaXMuZ2V0Q3VyclJlc3VsdCgpLnNwbGl0KCdcXG4nKVxyXG4gICAgICAgIHJlc3VsdHRleHRhcnJheS5mb3JFYWNoKHZhbHVlID0+IHtcclxuICAgICAgICAgIGNvbnN0IHRleHRsaW5lID0gcmVzcG9uc2VDb250ZW50LmNyZWF0ZUVsKFwic3BhblwiLCB7IHRleHQ6IHZhbHVlICsgXCJcXG5cIiwgY2xzOiBcImRlYnVnaW5saW5lXCIgfSlcclxuICAgICAgICAgIC8vIHRleHRsaW5lLnN0eWxlLmNzc1RleHQgPSAnd2hpdGUtc3BhY2U6IHByZTsnIC8vOyB3aGl0ZS1zcGFjZTogcHJlLWxpbmU7J1xyXG4gICAgICAgIH0pXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVzcG9uc2VDb250ZW50LmNyZWF0ZUVsKFwicFwiLCB7IHRleHQ6IFwiIFwiIH0pXHJcbiAgICAgICAgcmVzcG9uc2VDb250ZW50Lmluc2VydEFkamFjZW50SFRNTChcImFmdGVyZW5kXCIsIHRoaXMuZ2V0Q3VyclJlc3VsdCgpKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAvL3JldHVybiByZXNwb25zZUNvbnRlbnRcclxuICB9XHJcblxyXG4gIHVwZGF0ZVZpZXcoKTogdm9pZCB7XHJcbiAgICB0aGlzLnNldE5ld0luaXRpYWwodGhpcy5nZXRPdXRQdXRGb3JtYXQoKSwgdHJ1ZSlcclxuICAgIHRoaXMuZ2V0Q3VyckhUTUwoKVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIGdldFNlbWFMb2dpY1BhcnNlKHNldHRpbmdzOiBTZW1hTG9naWNQbHVnaW5TZXR0aW5ncywgdkFQSV9VUkw6IHN0cmluZywgZGlhbGVjdElEOiBzdHJpbmcsIGJvZHl0ZXh0OiBzdHJpbmcsIHBhcnNlT25UaGVGbHk6IGJvb2xlYW4sIHBhcnNpbmdGb3JtYXQ/OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgdGhpcy5ib2R5dGV4dCA9IGJvZHl0ZXh0XHJcbiAgICB0aGlzLmFwaVVSTCA9IHZBUElfVVJMXHJcbiAgICB0aGlzLmRpYWxlY3RJRCA9IGRpYWxlY3RJRFxyXG4gICAgbGV0IG91dFB1dEZvcm1hdDogc3RyaW5nXHJcbiAgICBsZXQgcmVzdWx0aHR0cDogc3RyaW5nXHJcblxyXG4gICAgaWYgKHBhcnNpbmdGb3JtYXQgIT09IHVuZGVmaW5lZCkgeyBvdXRQdXRGb3JtYXQgPSBwYXJzaW5nRm9ybWF0IH0gZWxzZSB7IG91dFB1dEZvcm1hdCA9IHRoaXMuZ2V0T3V0UHV0Rm9ybWF0KCkgfVxyXG4gICAgbGV0IHNlbWFMb2dpY0pzb25SZXF1ZXN0Qm9keSA9IHRoaXMuY3JlYXRlU2VtYUxvZ2ljUmVxdWVzdEJvZHkoZGlhbGVjdElELCBib2R5dGV4dCwgb3V0UHV0Rm9ybWF0KVxyXG4gICAgbGV0IHNlbWFMb2dpY1JlcXVlc3QgPSB0aGlzLmNyZWF0ZVNlbWFMb2dpY1JlcXVlc3Qoc2V0dGluZ3MsIHZBUElfVVJMLCBzZW1hTG9naWNKc29uUmVxdWVzdEJvZHkpXHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0VXJsKHNlbWFMb2dpY1JlcXVlc3QpXHJcblxyXG4gICAgICBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9IaWdoLCB0aGlzLnNsQ29tbS5zbHZpZXcsIFwiU2VtYUxvZ2ljOiBQYXJzZSB3aXRoIGh0dHAtc3RhdHVzIFwiICsgcmVzcG9uc2Uuc3RhdHVzLnRvU3RyaW5nKCkpXHJcbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT0gMjAwKSB7XHJcbiAgICAgICAgcmVzdWx0aHR0cCA9IHJlc3BvbnNlLnRleHQ7XHJcbiAgICAgICAgc2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfQ2hhdHR5LCB0aGlzLnNsQ29tbS5zbHZpZXcsIGBQYXJzZXJlc3VsdDoke3Jlc3VsdGh0dHB9YClcclxuICAgICAgICBpZiAoKHRoaXMuZGVidWdJbmxpbmUgPT0gZmFsc2UpICYmIChwYXJzZU9uVGhlRmx5ID09IGZhbHNlKSkge1xyXG4gICAgICAgICAgdGhpcy5jdXJyUmVzdWx0ID0gcmVzdWx0aHR0cFxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXBhcnNlT25UaGVGbHkpIHtcclxuICAgICAgICAgIHRoaXMudXBkYXRlVmlldygpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhpcy5zbENvbW0uc2xhc3B2aWV3ICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIC8vdGhpcy5zbENvbW0uc2xhc3B2aWV3LmFzcFBhcnNlKHRoaXMuc2xDb21tLCBzZXR0aW5ncywgdGhpcy5nZXRTZW1hTG9naWNUZXh0KCkpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgcmVzb2x2ZShyZXN1bHRodHRwKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9IaWdoLCB0aGlzLnNsQ29tbS5zbHZpZXcsIGBDYXRjaGVycm9yIG9mIHJlbW92aW5nIGNvbnRleHQgJHt2QVBJX1VSTH1gKVxyXG4gICAgICBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9IaWdoLCB0aGlzLnNsQ29tbS5zbHZpZXcsIGUudG9TdHJpbmcoKSlcclxuICAgICAgbGV0IHRleHQgPSBuZXcgRG9jdW1lbnRGcmFnbWVudCgpXHJcbiAgICAgIHRleHQuY3JlYXRlRWwoXCJwXCIpXHJcbiAgICAgIGxldCB0ZXh0ZnJhZ21lbnQgPSAobmV3IFJhbmdlKCkpLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChlLnRvU3RyaW5nKCkpO1xyXG4gICAgICB0ZXh0LmFwcGVuZENoaWxkKHRleHRmcmFnbWVudClcclxuICAgICAgdGV4dC5jcmVhdGVFbChcInBcIilcclxuICAgICAgdGV4dGZyYWdtZW50ID0gKG5ldyBSYW5nZSgpKS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoXCJTZWUgZm9yIGluZm9ybWF0aW9uIGFib3V0IHRoZSBlcnJvci1jb2RlIG9mIGh0dHA6IGh0dHBzOi8vZGUud2lraXBlZGlhLm9yZy93aWtpL0hUVFAtU3RhdHVzY29kZSBcIik7XHJcbiAgICAgIHRleHQuYXBwZW5kKHRleHRmcmFnbWVudClcclxuICAgICAgdGV4dC5jcmVhdGVFbChcInBcIilcclxuICAgICAgdGV4dGZyYWdtZW50ID0gKG5ldyBSYW5nZSgpKS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoc2VtYUxvZ2ljUmVxdWVzdC51cmwpO1xyXG4gICAgICB0ZXh0LmFwcGVuZCh0ZXh0ZnJhZ21lbnQpXHJcbiAgICAgIHRleHQuY3JlYXRlRWwoXCJwXCIpXHJcbiAgICAgIHRleHRmcmFnbWVudCA9IChuZXcgUmFuZ2UoKSkuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KFN0cmluZyhzZW1hTG9naWNSZXF1ZXN0LmJvZHkpKTtcclxuICAgICAgdGV4dC5hcHBlbmQodGV4dGZyYWdtZW50KVxyXG4gICAgICB0aGlzLnNob3dFcnJvcih0ZXh0KVxyXG4gICAgICB0aHJvdyBlXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5cclxuXHJcbiIsICIvLyBUb0RvIChQcmlvIDMpOiBHZXR0aW5nIERlZmF1bHQtQVBJLVVSTCBieSBBUEktRGVzY3JpcHRpb25cclxuZXhwb3J0IGNvbnN0IEFQSV9EZWZhdWx0cyA9IHtcclxuXHRodHRwOiBcImh0dHA6Ly9cIixcclxuXHRodHRwczogXCJodHRwczovL1wiLFxyXG5cdEJhc2VfVVJMOiBcInNlcnZpY2Uuc2VtYWxvZ2ljLmRkbnMubmV0XCIsXHJcblx0UG9ydDogXCI0NDNcIixcclxuXHRydWxlc19wYXJzZTogXCIvcnVsZXMvcGFyc2VcIixcclxuXHRyZXNldDogXCIvcmVzZXRcIixcclxuXHRWZXJzaW9uOiBcIi9BUElWZXJzaW9uXCIsXHJcblx0UG9zdERpYWxlY3Q6IFwiL2RpYWxlY3QvZGVmaW5lXCIsXHJcblx0UmVtb3ZlRGlhbGVjdDogXCIvZGlhbGVjdC9yZW1vdmVcIixcclxuXHRHZXRBUEk6IFwiL0FQSVZlcnNpb25cIixcclxuXHRTSUQ6IFwiMTIzNDU2NzhcIixcclxuXHRTaG93Q29udGV4dDogdHJ1ZSxcclxuXHR1c2VVc2VyUGFzc3dvcnRmb3JIVFRQOiB0cnVlLFxyXG5cdEh0dHBVc2VyOiBcIlVzZXJcIixcclxuXHRIdHRwUGFzc3dvcmQ6IFwiUGFzc3dvcmRcIixcclxuXHR2aWV3aGVhZGVyOiBcIlNWR1wiLFxyXG5cdEFzcFVybDogXCJBU1AtU2VydmljZS1VUkwuY29tL1wiLFxyXG5cdEFzcEVuZHBvaW50OiBcIi9wbGFucy9jb3VudFwiLFxyXG5cdHVzZVVzZXJQYXNzd29ydGZvckhUVFBTTDogdHJ1ZSxcclxuXHRIdHRwVXNlclNMOiBcIlVzZXJcIixcclxuXHRIdHRwUGFzc3dvcmRTTDogXCJQYXNzd29yZFwiLFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgVmFsdWVfRGVmYXVsdHMgPSB7XHJcblx0dXBkYXRlSW50ZXJ2YWw6IDUwMFxyXG59XHJcblxyXG5cclxuLy8gVG9EbzogMi54IE9wdGltaXplZCBhcnJheSBzdHJ1Y3QgLyBtZXRob2RzIGZvciBjb21tYW5kcyBcclxuZXhwb3J0IHZhciBzZW1hTG9naWNDb21tYW5kID0ge1xyXG5cdGNvbW1hbmRfc3RhcnQ6IFwiU2VtYUxvZ2ljKFwiLFxyXG5cdGNvbW1hbmRfZW5kOiBcIilcIixcclxuXHRzaG93SGVscDogXCJzaG93IGhlbHBcIixcclxuXHRzaG93VmVyc2lvbjogXCJzaG93IHZlcnNpb25cIixcclxuXHRnZXREaWFsZWN0d1RlbXBsYXRlOiBcInRlbXBsYXRlXCIsIC8vIFRvRG86IEdldCBUZW1wbGF0ZSBwbGFuZWQgZm9yIHZlcnNpb24gMi54XHJcblx0dXNlRGlhbGVjdDogXCJ1c2UgPz8/ZGlhbGVjdE5hbWU/Pz9cIixcclxuXHRkZWZpbmU6IFwiZGVmaW5lXCIsIC8vIERlZmluZSBpcyBub3QgZm9yIG9ic2lkaWFuIC0gaXQgaXMgZm9yIGRlZmluaW5nIFNlbWFMb2dpYy1JbnRlcnByZXRhdGlvblxyXG5cdHNob3dQYXJzZTogXCJzaG93IGFzXCIsXHJcblx0c2hvd0ZpbHRlcjogXCJmb3JcIixcclxuXHR0cmFuc2ZlcjogXCJ0cmFuc2ZlclwiLFxyXG5cdHRyYW5zZmVyRW5kcG9pbnQ6IFwidG8gZW5kcG9pbnRcIixcclxuXHR0cmFuc2ZlclBhcmFtOiBcIndpdGggcGFyYW1cIlxyXG59XHJcblxyXG5leHBvcnQgdmFyIHN5bXRva2VuID0gXCJTeW1Ub2tlblwiXHJcblxyXG5leHBvcnQgY29uc3Qgc2VtYUxvZ2ljSGVscDogc3RyaW5nW11bXSA9IFtcclxuXHRbc2VtYUxvZ2ljQ29tbWFuZC5jb21tYW5kX3N0YXJ0ICsgXCI/Pz9cIiArIHNlbWFMb2dpY0NvbW1hbmQuY29tbWFuZF9lbmQsIFwiWW91IGNhbiBkZWZpbmUgd2hhdCBTZW1hTG9naWMgc2hvdWxkIGRvIGZvciB5b3UgYnkgcmVwbGFjaW5nID8/PyB3aXRoIG9uZSBvZiB0aGUgZm9sbG93aW5nIFNlbWFMb2dpYyBjb21tYW5kczpcIl0sXHJcblx0W3NlbWFMb2dpY0NvbW1hbmQuY29tbWFuZF9zdGFydCArIHNlbWFMb2dpY0NvbW1hbmQuc2hvd0hlbHAgKyBzZW1hTG9naWNDb21tYW5kLmNvbW1hbmRfZW5kLCBcIlNob3cgdGhpcyBoZWxwIGluZm9ybWF0aW9uXCJdLFxyXG5cdFtzZW1hTG9naWNDb21tYW5kLmNvbW1hbmRfc3RhcnQgKyBzZW1hTG9naWNDb21tYW5kLnNob3dWZXJzaW9uICsgc2VtYUxvZ2ljQ29tbWFuZC5jb21tYW5kX2VuZCwgXCJTaG93IHRoZSB2ZXJzaW9uIG9mIHRoZSBTZW1hTG9naWMtU2VydmljZVwiXSxcclxuXHRbc2VtYUxvZ2ljQ29tbWFuZC5jb21tYW5kX3N0YXJ0ICsgc2VtYUxvZ2ljQ29tbWFuZC5kZWZpbmUgKyBzZW1hTG9naWNDb21tYW5kLmNvbW1hbmRfZW5kLCBcIkFmdGVyIHRoaXMgaW5saW5lY29tbWFuZCBhbmQgYSBzcGFjZSBsaW5lIGNvbWVzIGUuZy4gYSB0YWJsZSB0aGF0IHNob3VsZCBiZSBpbnRlcnByZXRlZCBieSBTZW1hTG9naWMgKHRhYmxlLCBOVGFibGUsIFpUYWJsZSkgd2l0aCBvcHRpb25hbCBoZWFkZXJpbnRlcnByZXRhdGlvbi0gRXhwZWN0ZWQgZm9ybWF0Olxcbih8U3ltYm9sfHxMZXZlbChuKzEpfFxcbnwtLS18LS0tfFxcbnxMZXZlbCgxKXxMZXZlbChuKXxWYWx1ZXwpXCJdLFxyXG5cdFtgJHtzZW1hTG9naWNDb21tYW5kLmNvbW1hbmRfc3RhcnQgKyBzZW1hTG9naWNDb21tYW5kLnNob3dQYXJzZX0gJTEgJHtzZW1hTG9naWNDb21tYW5kLnNob3dGaWx0ZXJ9ICUyICR7c2VtYUxvZ2ljQ29tbWFuZC5jb21tYW5kX2VuZH1gLCBcInNob3cgYXMgLSBzaG93cyBhbiBvdXRwdXQgZGlyZWN0bHkgdG8gdGhlIHJlYWRpbmcgdmlldyAoIHdpdGggJTEgeW91IGhhdmUgdG8gc2V0IHRoZSBvdXRwdXQgdHlwZTogMXwxIHtwaWN0dXJlLCBzeWVtYWxvZ2ljLCBhc3B9IGFuZCB3aXRoICUyIHlvdSBjb3VsZCBmaWx0ZXIgZm9yIGFuIHN5bWJvbCBieSBzeW1ib2xuYW1lKVwiXSxcclxuXHRbYCR7c2VtYUxvZ2ljQ29tbWFuZC5jb21tYW5kX3N0YXJ0ICsgc2VtYUxvZ2ljQ29tbWFuZC50cmFuc2Zlcn0gJTEgJHtzZW1hTG9naWNDb21tYW5kLnRyYW5zZmVyRW5kcG9pbnR9ICUyICR7c2VtYUxvZ2ljQ29tbWFuZC50cmFuc2ZlclBhcmFtfSAlMyAke3NlbWFMb2dpY0NvbW1hbmQuY29tbWFuZF9lbmR9YCwgXCJ0cmFuc2ZlciAtIHNob3dzIGFuIChjdXJyZW50bHkgb25seSkgYXNwIG91dHB1dCBkaXJlY3RseSB0byB0aGUgYXNwLnZpZXcgZnJvbSBTZW1hTG9naWNWaWV3ICggd2l0aCAlMSB5b3UgaGF2ZSB0byBzZXQgdGhlIG91dHB1dCB0eXBlOiAxfDEge2FzcH0gYW5kIHdpdGggJTIgeW91IGNvdWxkIHNldCB0aGUgZW5kcG9pbnQgYW5kIHd1dGggJTMgeW91IGNvdWxkIHNldCBxdWVyeXBhcmFtZXRlcilcIl0sXHJcbl1cclxuXHJcbi8vIHJ1bGVzZXR0eXBlIDogdHlwZSwgTmFtaW5nXHJcbmV4cG9ydCBjb25zdCBSc3R5cGVzX1NlbWFsb2dpYyA9IDBcclxuZXhwb3J0IGNvbnN0IFJzdHlwZXNfUGljdHVyZSA9IDNcclxuZXhwb3J0IGNvbnN0IFJzdHlwZXNfQVNQID0gNlxyXG5leHBvcnQgY29uc3QgUnN0eXBlc19TZW1hbnRpY1RyZWUgPSA4XHJcbmV4cG9ydCBjb25zdCBSc3R5cGVzX0tub3dsZWRnZUdyYXBoID0gOVxyXG5cclxuZXhwb3J0IGNvbnN0IFJ1bGVzZXR0eXBlc0NvbW1hbmRzOiBzdHJpbmdbXVtdID0gW1xyXG5cdFtcIlNlbWFMb2dpY1wiLCBcIlNlbWFMb2dpY1wiXSxcclxuXHRbXCJ0ZWNobmljYWxcIiwgXCJTZW1hTG9naWNcIl0sXHJcblx0W1wic2VtYWxvZ2ljXCIsIFwiU2VtYUxvZ2ljXCJdLFxyXG5cdFtcIlBpY3R1cmUgKFNWRylcIiwgXCJTVkdcIl0sXHJcblx0W1wicGljdHVyZVwiLCBcIlNWR1wiXSxcclxuXHRbXCJTVkdcIiwgXCJTVkdcIl0sXHJcblx0W1wiQVNQXCIsIFwiQVNQLmpzb25cIl0sXHJcblx0W1wiYXNwXCIsIFwiQVNQLmpzb25cIl0sXHJcblx0W1wiU2VtYW50aWNUcmVlXCIsIFwiU2VtYW50aWNUcmVlXCJdLFxyXG5cdFtcIktud29sZWRnZUdyYXBoXCIsIFwiS25vd2xlZGdlR3JhcGhcIl1cclxuXVxyXG5cclxuZXhwb3J0IGNvbnN0IERlYnVnTGV2ZWxOYW1lczogc3RyaW5nW10gPVxyXG5cdFtcclxuXHRcdCdEZWJ1Z0xldmVsX09mZicsXHJcblx0XHQnRGVidWdMZXZlbF9FcnJvcicsXHJcblx0XHQnRGVidWdMZXZlbF9DdXJyZW50X0RldicsXHJcblx0XHQnRGVidWdMZXZlbF9JbXBvcnRhbnQnLFxyXG5cdFx0J0RlYnVnTGV2ZWxfSW5mb3JtYXRpdmUnLFxyXG5cdFx0J0RlYnVnTGV2ZWxfQ2hhdHR5JyxcclxuXHRcdCdEZWJ1Z0xldmVsX0FsbCdcclxuXHRdXHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IERlYnVnTGV2TWFwOiBEZWJ1Z0xldmVsX0kgPSB7XHJcblx0J0RlYnVnTGV2ZWxfT2ZmJzogMCxcclxuXHQnRGVidWdMZXZlbF9FcnJvcic6IDEsXHJcblx0J0RlYnVnTGV2ZWxfQ3VycmVudF9EZXYnOiAyLFxyXG5cdCdEZWJ1Z0xldmVsX0ltcG9ydGFudCc6IDMsXHJcblx0J0RlYnVnTGV2ZWxfSW5mb3JtYXRpdmUnOiA0LFxyXG5cdCdEZWJ1Z0xldmVsX0NoYXR0eSc6IDUsXHJcblx0J0RlYnVnTGV2ZWxfQWxsJzogNlxyXG59XHJcblxyXG5pbnRlcmZhY2UgRGVidWdMZXZlbF9JIHtcclxuXHRbTGV2ZWxuYW1lOiBzdHJpbmddOiBudW1iZXJcclxufVxyXG5cclxudHlwZSBNYXBUeXBlID0ge1xyXG5cdFtpZDogc3RyaW5nXTogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc2xUZXh0czogTWFwVHlwZSA9IHtcclxuXHRcIkhlYWRlclNMXCI6IFwiU2VtYUxvZ2ljLlZpZXdcIixcclxuXHRcIkhlYWRlclRWXCI6IFwiVHJhbnNmZXIuVmlld1wiXHJcbn1cclxuXHJcblxyXG5leHBvcnQgY29uc3Qgc2xUZW1wbGF0ZTogTWFwVHlwZSA9IHtcclxuXHRcIlBhdGhDb21tYW5kc1wiOiBcIlRlbXBsYXRlcy9TZW1hTG9naWMvQ29tbWFuZHNcIixcclxuXHRcIlBhdGhTeW1Ub2tlbkNvbXBhcmlzb25cIjogXCJUZW1wbGF0ZXMvU2VtYUxvZ2ljL1N5bVRva2VuL0NvbXBhcmlzb25cIixcclxuXHRcIlBhdGhTeW1Ub2tlbkVsZW1lbnRzXCI6IFwiVGVtcGxhdGVzL1NlbWFMb2dpYy9TeW1Ub2tlbi9FbGVtZW50c1wiLFxyXG5cdFwiUGF0aFN5bVRva2VuRnVuY1wiOiBcIlRlbXBsYXRlcy9TZW1hTG9naWMvU3ltVG9rZW4vRnVuY1Rva2VuXCIsXHJcblx0XCJQYXRoU3ltVG9rZW5NYXRoXCI6IFwiVGVtcGxhdGVzL1NlbWFMb2dpYy9TeW1Ub2tlbi9NYXRoXCIsXHJcblx0XCJQYXRoU3ltVG9rZW5SZWZUb2tlblwiOiBcIlRlbXBsYXRlcy9TZW1hTG9naWMvU3ltVG9rZW4vUmVmVG9rZW5cIixcclxuXHRcIlBhdGhTeW1Ub2tlblRlcm1zXCI6IFwiVGVtcGxhdGVzL1NlbWFMb2dpYy9TeW1Ub2tlbi9UZXJtc0FuZFJ1bGVzXCIsXHJcblx0XCJQYXRoRXhhbXBsZXNCYXNpY1wiOiBcIlRlbXBsYXRlcy9TZW1hTG9naWMvRXhhbXBsZXMvQmFzaWNcIlxyXG59XHJcblxyXG4iLCAiaW1wb3J0IHsgTWFya2Rvd25SZW5kZXJDaGlsZCwgTWFya2Rvd25WaWV3IH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyByZXF1ZXN0VXJsLCBSZXF1ZXN0VXJsUGFyYW0sIFJlcXVlc3RVcmxSZXNwb25zZSB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgRGVidWdMZXZlbCwgU2VtYUxvZ2ljUGx1Z2luU2V0dGluZ3MsIG15Z1NJRCB9IGZyb20gXCIuLi9tYWluXCI7XHJcbmltcG9ydCB7IEFQSV9EZWZhdWx0cywgc2VtYUxvZ2ljQ29tbWFuZCwgc2VtYUxvZ2ljSGVscCwgRGVidWdMZXZNYXAsIFJ1bGVzZXR0eXBlc0NvbW1hbmRzLCBSc3R5cGVzX0FTUCB9IGZyb20gXCIuL2NvbnN0XCJcclxuaW1wb3J0IHsgU2VtYUxvZ2ljVmlldywgU2VtYUxvZ2ljVmlld1R5cGUgfSBmcm9tIFwiLi92aWV3XCI7XHJcbmltcG9ydCB7IHBhcnNlQ29tbWFuZCB9IGZyb20gJ3NyYy92aWV3X3V0aWxzJztcclxuXHJcbmV4cG9ydCBjb25zdCBzZWFyY2hGb3JTZW1hTG9naWNDb21tYW5kcyA9IChlbDogRWxlbWVudCk6IGJvb2xlYW4gPT4ge1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgY29uc3QgY2hpbGQgPSBlbC5jaGlsZE5vZGVzW2ldO1xyXG4gICAgaWYgKGlzU2VtYUxvZ2ljQ29tbWFuZChjaGlsZCkpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBmYWxzZTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBpc1NlbWFMb2dpY0NvbW1hbmQgPSAobjogTm9kZSk6IGJvb2xlYW4gPT5cclxuICBuLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSAmJiBCb29sZWFuKG4udGV4dENvbnRlbnQ/LnN0YXJ0c1dpdGgoc2VtYUxvZ2ljQ29tbWFuZC5jb21tYW5kX3N0YXJ0KSk7XHJcblxyXG5cclxuLy8gY2hlY2sgaWYgdGhlIG5vZGUgaGFzIHRvIGJlIHJlcGxhY2VkIG11c3QgYmUgZG8gYmVmb3JlIFxyXG5leHBvcnQgY29uc3QgcmVwbGFjZVdpdGhFbXB0eU5vZGUgPSAoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KTogTm9kZVtdID0+IHtcclxuICBjb25zdCByZXN1bHRzOiBOb2RlW10gPSBbXTtcclxuICByZXR1cm4gcmVzdWx0c1xyXG59O1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlcGxhY2VXaXRoQ29tbWFuZE5vZGUoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50LCBzZXR0aW5nczogU2VtYUxvZ2ljUGx1Z2luU2V0dGluZ3MpOiBQcm9taXNlPE5vZGVbXT4ge1xyXG4gIGxldCByZXN1bHRzOiBOb2RlW10gPSBbXVxyXG4gIGxldCBmb3VuZDogYm9vbGVhbiA9IGZhbHNlXHJcblxyXG4gIGxldCBzZW1hTG9naWNDb20gPSBjb250YWluZXJFbC50ZXh0Q29udGVudD8uc3Vic3RyaW5nKHNlbWFMb2dpY0NvbW1hbmQuY29tbWFuZF9zdGFydC5sZW5ndGgsIGNvbnRhaW5lckVsLnRleHRDb250ZW50Py5pbmRleE9mKHNlbWFMb2dpY0NvbW1hbmQuY29tbWFuZF9lbmQpKS50b0xvd2VyQ2FzZSgpXHJcblxyXG4gIGlmICgoIWZvdW5kKSAmJiAoKHNlbWFMb2dpY0NvbT8udG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgc2VtYUxvZ2ljQ29tbWFuZC5zaG93SGVscC5sZW5ndGgpKSA9PSBzZW1hTG9naWNDb21tYW5kLnNob3dIZWxwKSkgey8vc2VtYUxvZ2ljQ29tbWFuZC5zaG93SGVscC50b0xvd2VyQ2FzZSgpKSkge1xyXG4gICAgLy8gTWFrZSB0YWJsZSB3aXRoIGhlbHAtQXJyYXlcclxuICAgIHJlc3VsdHMgPSBhd2FpdCBzaG93SGVscCgpXHJcbiAgICBmb3VuZCA9IHRydWVcclxuICB9XHJcblxyXG4gIGlmICgoIWZvdW5kKSAmJiAoKHNlbWFMb2dpY0NvbT8udG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgc2VtYUxvZ2ljQ29tbWFuZC5zaG93VmVyc2lvbi5sZW5ndGgpKSA9PSBzZW1hTG9naWNDb21tYW5kLnNob3dWZXJzaW9uKSkgey8vIHNlbWFMb2dpY0NvbW1hbmQuc2hvd1ZlcnNpb24udG9Mb3dlckNhc2UoKSkpIHtcclxuICAgIHJlc3VsdHMgPSBhd2FpdCBzaG93VmVyc2lvbihzZXR0aW5ncylcclxuICAgIGZvdW5kID0gdHJ1ZVxyXG4gIH1cclxuXHJcbiAgaWYgKCghZm91bmQpICYmICgoc2VtYUxvZ2ljQ29tPy50b1N0cmluZygpLnN1YnN0cmluZygwLCBzZW1hTG9naWNDb21tYW5kLnNob3dQYXJzZS5sZW5ndGgpKSA9PSBzZW1hTG9naWNDb21tYW5kLnNob3dQYXJzZSkpIHsvLyBzZW1hTG9naWNDb21tYW5kLnNob3dQYXJzZS50b0xvd2VyQ2FzZSgpKSkge1xyXG4gICAgLy8gc2VhcmNoIGZvciBydWxlc3NldHR5cGVcclxuICAgIGxldCBydWxlc2V0dHlwZTogc3RyaW5nID0gXCJcIiAvLyBzbyBmYXIgYXMgdGhlcmUgaXMgbm8gb3V0cHV0Zm9ybWF0IC0gbm90aGluZyB0byBkb1xyXG4gICAgbGV0IGZpbHRlcjogc3RyaW5nID0gXCJcIlxyXG5cclxuICAgIGZvciAobGV0IHJ1bGUgaW4gUnVsZXNldHR5cGVzQ29tbWFuZHMpIHtcclxuICAgICAgLy8gc2VhcmNoIGZvciB0aGUgcnVsZXNzZXR0eXBlIHdoaWNoIGlzIHRvIHNob3cgaW5saW5lXHJcbiAgICAgIGlmIChzZW1hTG9naWNDb20uY29udGFpbnMoUnVsZXNldHR5cGVzQ29tbWFuZHNbcnVsZV1bMF0pKSB7XHJcbiAgICAgICAgcnVsZXNldHR5cGUgPSBSdWxlc2V0dHlwZXNDb21tYW5kc1tydWxlXVsxXVxyXG4gICAgICAgIC8vIHNlYXJjaCBmb3IgYSBnaXZlbiBmaWx0ZXJcclxuICAgICAgICBjb25zdCBmaW5kZm9yID0gc2VtYUxvZ2ljQ29tLmluZGV4T2Yoc2VtYUxvZ2ljQ29tbWFuZC5zaG93RmlsdGVyKVxyXG4gICAgICAgIGlmIChmaW5kZm9yID4gMCkge1xyXG4gICAgICAgICAgZmlsdGVyID0gc2VtYUxvZ2ljQ29tLnN1YnN0cmluZyhmaW5kZm9yICsgc2VtYUxvZ2ljQ29tbWFuZC5zaG93RmlsdGVyLmxlbmd0aClcclxuICAgICAgICAgIGZpbHRlciA9IGZpbHRlci50cmltKClcclxuICAgICAgICB9XHJcbiAgICAgICAgZm91bmQgPSB0cnVlXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICghZm91bmQpIHsgLy8gRGVmYXVsdFxyXG4gICAgICAvLyBNYWtlIHRhYmxlIHdpdGggaGVscC1BcnJheVxyXG4gICAgICByZXN1bHRzID0gYXdhaXQgc2hvd0hlbHAoKVxyXG4gICAgICBmb3VuZCA9IHRydWVcclxuICAgIH1cclxuXHJcblxyXG4gICAgaWYgKHJ1bGVzZXR0eXBlICE9IFwiXCIpIHtcclxuICAgICAgcmVzdWx0cyA9IGF3YWl0IHNob3dQYXJzZVdpdGhGaWx0ZXIoZmlsdGVyLCBydWxlc2V0dHlwZSwgc2V0dGluZ3MpXHJcbiAgICB9XHJcbiAgICBmb3VuZCA9IHRydWVcclxuICB9XHJcblxyXG4gIGlmICghZm91bmQpIHtcclxuICAgIHJlc3VsdHMgPSByZXBsYWNlV2l0aEVtcHR5Tm9kZShjb250YWluZXJFbClcclxuICB9XHJcblxyXG4gIHJldHVybiByZXN1bHRzXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTZW1hTG9naWNSZW5kZXJlZEVsZW1lbnQgZXh0ZW5kcyBNYXJrZG93blJlbmRlckNoaWxkIHtcclxuICBteXNldHRpbmdzOiBTZW1hTG9naWNQbHVnaW5TZXR0aW5ncztcclxuXHJcbiAgY29uc3RydWN0b3IoeyBjb250YWluZXJFbCwgc2V0IH06IHsgY29udGFpbmVyRWw6IEhUTUxFbGVtZW50LCBzZXQ6IFNlbWFMb2dpY1BsdWdpblNldHRpbmdzIH0pIHtcclxuICAgIHN1cGVyKGNvbnRhaW5lckVsKTtcclxuICAgIHRoaXMubXlzZXR0aW5ncyA9IHNldFxyXG4gIH1cclxuICBhc3luYyBvbmxvYWQoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0aGlzLmNvbnRhaW5lckVsLnNldENoaWxkcmVuSW5QbGFjZShcclxuICAgICAgYXdhaXQgcmVwbGFjZVdpdGhDb21tYW5kTm9kZSh0aGlzLmNvbnRhaW5lckVsLCB0aGlzLm15c2V0dGluZ3MpXHJcbiAgICAgIC8vcmVwbGFjZVdpdGhFbXB0eU5vZGUodGhpcy5jb250YWluZXJFbClcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBzaG93SGVscCgpOiBQcm9taXNlPE5vZGVbXT4ge1xyXG4gIGxldCByZXN1bHRzOiBOb2RlW10gPSBbXTtcclxuICBsZXQgYnVpbGRjb250YWluZXJFbDogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0luZm9ybWF0aXZlLCB1bmRlZmluZWQsIHNlbWFMb2dpY0NvbW1hbmQuc2hvd0hlbHApXHJcblxyXG4gIGJ1aWxkY29udGFpbmVyRWwgPSBjcmVhdGVFbCgndGFibGUnKTtcclxuICBsZXQgYm9keSA9IGJ1aWxkY29udGFpbmVyRWwuY3JlYXRlRWwoXCJib2R5XCIpO1xyXG4gIGxldCByb3cgPSBib2R5LmNyZWF0ZUVsKFwidHJcIik7XHJcbiAgcm93LmNyZWF0ZUVsKFwidGRcIiwgeyB0ZXh0OiBcIlNlbWFMb2dpYy1Db21tYW5kcy1IZWxwXCIgfSk7XHJcbiAgcm93LmNyZWF0ZUVsKFwidGRcIiwgeyB0ZXh0OiBcIkRlc2NyaXB0aW9uXCIgfSk7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZW1hTG9naWNIZWxwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjb25zdCByb3cgPSBib2R5LmNyZWF0ZUVsKFwidHJcIik7XHJcbiAgICByb3cuY3JlYXRlRWwoXCJ0ZFwiLCB7IHRleHQ6IHNlbWFMb2dpY0hlbHBbaV1bMF0gfSk7XHJcbiAgICByb3cuY3JlYXRlRWwoXCJ0ZFwiLCB7IHRleHQ6IHNlbWFMb2dpY0hlbHBbaV1bMV0gfSk7XHJcbiAgfVxyXG5cclxuICByZXN1bHRzLnB1c2goYnVpbGRjb250YWluZXJFbCk7XHJcbiAgcmV0dXJuIHJlc3VsdHM7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHNob3dWZXJzaW9uKHNldHRpbmdzOiBTZW1hTG9naWNQbHVnaW5TZXR0aW5ncyk6IFByb21pc2U8Tm9kZVtdPiB7XHJcbiAgbGV0IHJlc3VsdHM6IE5vZGVbXSA9IFtdO1xyXG4gIGxldCBidWlsZGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudDtcclxuICBsZXQgdmVyc2lvbnRleHQ6IHN0cmluZyA9IFwiXCI7XHJcblxyXG4gIHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0luZm9ybWF0aXZlLCB1bmRlZmluZWQsIHNlbWFMb2dpY0NvbW1hbmQuc2hvd1ZlcnNpb24pXHJcblxyXG4gIGNvbnN0IHZlcnNpb24gPSBhd2FpdCBzZW1hTG9naWNHZXRWZXJzaW9uKHNldHRpbmdzKVxyXG4gICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdEJ1ZmZlcjogYW55KSB7XHJcbiAgICAgIHZlcnNpb250ZXh0ID0gcmVzdWx0QnVmZmVyO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaChmdW5jdGlvbiAocmVzdWx0QnVmZmVyOiBhbnkpIHsgdmVyc2lvbnRleHQgPSByZXN1bHRCdWZmZXI7IH1cclxuICAgIClcclxuICBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9IaWdoLCB1bmRlZmluZWQsIGBKU09OLVRleHQgaW4gUHJvY2Vzc29yOiR7dmVyc2lvbnRleHR9YClcclxuXHJcbiAgLy8gVmVyc2lvbiBpcyBzaG93biBpbiBhIHRhYmxlIGxpbmVcclxuICBidWlsZGNvbnRhaW5lckVsID0gY3JlYXRlRWwoJ3RhYmxlJyk7XHJcbiAgY29uc3QgdGFibGUgPSBidWlsZGNvbnRhaW5lckVsLmNyZWF0ZUVsKCd0YWJsZScpO1xyXG4gIGNvbnN0IGJvZHkgPSBidWlsZGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiYm9keVwiKTtcclxuICBjb25zdCByb3cgPSBib2R5LmNyZWF0ZUVsKFwidHJcIik7XHJcbiAgcm93LmNyZWF0ZUVsKFwidGRcIiwgeyB0ZXh0OiB2ZXJzaW9udGV4dCB9KTtcclxuXHJcbiAgcmVzdWx0cy5wdXNoKGJ1aWxkY29udGFpbmVyRWwpO1xyXG4gIHJldHVybiByZXN1bHRzO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBzaG93UGFyc2VTVkcoRmlsdGVyOiBzdHJpbmcpOiBQcm9taXNlPE5vZGVbXT4ge1xyXG4gIGxldCByZXN1bHRzOiBOb2RlW10gPSBbXTtcclxuICBsZXQgYnVpbGRjb250YWluZXJFbDogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0luZm9ybWF0aXZlLCB1bmRlZmluZWQsIHNlbWFMb2dpY0NvbW1hbmQuc2hvd0hlbHApO1xyXG5cclxuICBidWlsZGNvbnRhaW5lckVsID0gY3JlYXRlRWwoJ3RhYmxlJyk7XHJcbiAgbGV0IGJvZHkgPSBidWlsZGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiYm9keVwiKTtcclxuICBsZXQgcm93ID0gYm9keS5jcmVhdGVFbChcInRyXCIpO1xyXG4gIHJvdy5jcmVhdGVFbChcInRkXCIsIHsgdGV4dDogXCJTZW1hTG9naWMtQ29tbWFuZHMtSGVscFwiIH0pO1xyXG4gIHJvdy5jcmVhdGVFbChcInRkXCIsIHsgdGV4dDogXCJEZXNjcmlwdGlvblwiIH0pO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VtYUxvZ2ljSGVscC5sZW5ndGg7IGkrKykge1xyXG4gICAgY29uc3Qgcm93ID0gYm9keS5jcmVhdGVFbChcInRyXCIpO1xyXG4gICAgcm93LmNyZWF0ZUVsKFwidGRcIiwgeyB0ZXh0OiBzZW1hTG9naWNIZWxwW2ldWzBdIH0pO1xyXG4gICAgcm93LmNyZWF0ZUVsKFwidGRcIiwgeyB0ZXh0OiBzZW1hTG9naWNIZWxwW2ldWzFdIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVzdWx0cy5wdXNoKGJ1aWxkY29udGFpbmVyRWwpO1xyXG4gIHJldHVybiByZXN1bHRzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRodHRwcyhodHRwczogYm9vbGVhbik6IHN0cmluZyB7XHJcbiAgbGV0IHN0cjogc3RyaW5nXHJcbiAgLy8gaHR0cHMgP1xyXG4gIGlmIChodHRwcykge1xyXG4gICAgc3RyID0gQVBJX0RlZmF1bHRzLmh0dHBzXHJcbiAgfSBlbHNlIHtcclxuICAgIHN0ciA9IEFQSV9EZWZhdWx0cy5odHRwXHJcbiAgfVxyXG4gIHJldHVybiBzdHJcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEhvc3RQb3J0KHNldHRpbmdzOiBTZW1hTG9naWNQbHVnaW5TZXR0aW5ncyk6IHN0cmluZyB7XHJcbiAgbGV0IGFkcmVzcyA9IHNldGh0dHBzKHNldHRpbmdzLm15U0xTZXR0aW5nc1tzZXR0aW5ncy5teVNldHRpbmddLm15VXNlSHR0cHNTTClcclxuICBhZHJlc3MgPSBhZHJlc3MgKyBzZXR0aW5ncy5teVNMU2V0dGluZ3Nbc2V0dGluZ3MubXlTZXR0aW5nXS5teUJhc2VVUkxcclxuXHJcbiAgaWYgKHNldHRpbmdzLm15U0xTZXR0aW5nc1tzZXR0aW5ncy5teVNldHRpbmddLm15UG9ydCAhPSAnJykge1xyXG4gICAgYWRyZXNzID0gYWRyZXNzICsgJzonICsgc2V0dGluZ3MubXlTTFNldHRpbmdzW3NldHRpbmdzLm15U2V0dGluZ10ubXlQb3J0XHJcbiAgfVxyXG4gIHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0hpZ2gsIHVuZGVmaW5lZCwgJ2dldHRpbmcgU2VtYUxvZ2ljLUFkcmVzczogJyArIGFkcmVzcylcclxuICByZXR1cm4gYWRyZXNzXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRIb3N0QXNwUG9ydChzZXR0aW5nczogU2VtYUxvZ2ljUGx1Z2luU2V0dGluZ3MsIHBhcnNlZENvbW1hbmRzOiBwYXJzZUNvbW1hbmQpOiBzdHJpbmcge1xyXG4gIGxldCBhZHJlc3M6IHN0cmluZ1xyXG4gIGlmIChwYXJzZWRDb21tYW5kcy5vdXRwdXRmb3JtYXQgPT0gUnVsZXNldHR5cGVzQ29tbWFuZHNbUnN0eXBlc19BU1BdWzFdKSB7XHJcbiAgICBhZHJlc3MgPSBzZXRodHRwcyhzZXR0aW5ncy5teVNMU2V0dGluZ3Nbc2V0dGluZ3MubXlTZXR0aW5nXS5teVVzZUh0dHBzKVxyXG4gICAgYWRyZXNzID0gYWRyZXNzICsgc2V0dGluZ3MubXlTTFNldHRpbmdzW3NldHRpbmdzLm15U2V0dGluZ10ubXlBc3BVcmxcclxuICAgIGlmIChwYXJzZWRDb21tYW5kcy5lbmRwb2ludCAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgaWYgKHBhcnNlZENvbW1hbmRzLmVuZHBvaW50LmluZGV4T2YoXCJodHRwXCIpID49IDApIHtcclxuICAgICAgICBhZHJlc3MgPSBwYXJzZWRDb21tYW5kcy5lbmRwb2ludFxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGFkcmVzcyA9IGFkcmVzcyArIFwiL1wiICsgcGFyc2VkQ29tbWFuZHMuZW5kcG9pbnRcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyB1bmRlZmluZGVkIG5ldyB0cmFuc2ZlciBlbmRwb2ludFxyXG4gICAgYWRyZXNzID0gcGFyc2VkQ29tbWFuZHMuZW5kcG9pbnRcclxuICB9XHJcbiAgaWYgKChwYXJzZWRDb21tYW5kcy5wYXJhbSAhPSB1bmRlZmluZWQpICYmIChwYXJzZWRDb21tYW5kcy5wYXJhbSAhPSAnJykpIHsgYWRyZXNzID0gYWRyZXNzICsgXCI/XCIgKyBwYXJzZWRDb21tYW5kcy5wYXJhbSB9XHJcbiAgc2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfSGlnaCwgdW5kZWZpbmVkLCAnZ2V0dGluZyBhc3AtQWRyZXNzOiAnICsgYWRyZXNzKVxyXG4gIHJldHVybiBhZHJlc3NcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbWFMb2dpY0dldFZlcnNpb24oc2V0dGluZ3M6IFNlbWFMb2dpY1BsdWdpblNldHRpbmdzKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuXHJcbiAgc2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfSW1wb3J0YW50LCB1bmRlZmluZWQsIFwiU3RhcnQgc2VtYUxvZ2ljR2V0VmVyc2lvblwiKVxyXG5cclxuICAvLyBQcmVwYXJlIEpTT04tRm9ybWF0XHJcbiAgY29uc3QgbXlWZXJzaW9uID0gJ3tcInZlcnNpb25cIjpcIjBcIixcInZlcnNpb250ZXh0XCI6XCJUZXh0XCJ9JztcclxuICBsZXQgbXlKc29uID0gSlNPTi5wYXJzZShteVZlcnNpb24pO1xyXG4gIGxldCBqc29uVmVyc2lvbjogc3RyaW5nID0gXCJcIjtcclxuXHJcbiAgLy8gQ3JlYXRlIFVybCBmb3IgR2V0IFZlcnNpb25cclxuICBsZXQgdkFQSV9VUkxfVmVyc2lvbiA9IGdldEhvc3RQb3J0KHNldHRpbmdzKSArIEFQSV9EZWZhdWx0cy5WZXJzaW9uO1xyXG4gIHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0ltcG9ydGFudCwgdW5kZWZpbmVkLCB2QVBJX1VSTF9WZXJzaW9uKVxyXG5cclxuICBsZXQgb3B0aW9uczogUmVxdWVzdFVybFBhcmFtXHJcblxyXG4gIGlmIChzZXR0aW5ncy5teVNMU2V0dGluZ3Nbc2V0dGluZ3MubXlTZXR0aW5nXS5teVVzZUh0dHBzU0wgJiYgc2V0dGluZ3MubXlTTFNldHRpbmdzW3NldHRpbmdzLm15U2V0dGluZ10ubXlVc2VyU0wgIT0gJycpIHtcclxuICAgIG9wdGlvbnMgPSB7XHJcbiAgICAgIHVybDogdkFQSV9VUkxfVmVyc2lvbixcclxuICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgIFwiQXV0aG9yaXphdGlvblwiOiBcIkJhc2ljIFwiICsgYnRvYShzZXR0aW5ncy5teVNMU2V0dGluZ3Nbc2V0dGluZ3MubXlTZXR0aW5nXS5teVVzZXJTTCArIFwiOlwiICsgc2V0dGluZ3MubXlTTFNldHRpbmdzW3NldHRpbmdzLm15U2V0dGluZ10ubXlQYXNzd29yZFNMKVxyXG4gICAgICB9LFxyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBvcHRpb25zID0ge1xyXG4gICAgICB1cmw6IHZBUElfVVJMX1ZlcnNpb24sXHJcbiAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICB9XHJcbiAgfVxyXG4gIGxldCByZXNwb25zZTogUmVxdWVzdFVybFJlc3BvbnNlO1xyXG5cclxuICAvLyBHZXQgaW5mb3JtYXRpb24gYWJvdXQgdmVyc2lvbiBmcm9tIHRoZSByZXF1ZXN0IFxyXG4gIHRyeSB7XHJcbiAgICByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3RVcmwob3B0aW9ucylcclxuICAgIG15SnNvbiA9IEpTT04ucGFyc2UocmVzcG9uc2UudGV4dCk7XHJcbiAgICBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9BbGwsIHVuZGVmaW5lZCwgbXlKc29uLnZlcnNpb24pXHJcbiAgICBqc29uVmVyc2lvbiA9IG15SnNvbi52ZXJzaW9uO1xyXG4gICAgc2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfQWxsLCB1bmRlZmluZWQsIGBKU09OLVRleHQgaW4gUmVxdWVzdDoke2pzb25WZXJzaW9ufWApXHJcbiAgICByZXR1cm4ganNvblZlcnNpb247XHJcbiAgfVxyXG4gIGNhdGNoIChlKSB7XHJcbiAgICBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9FcnJvciwgdW5kZWZpbmVkLCAnRXJyb3I6IENhdGNoIG9mIEFQSVZlcnNpb24nICsgZS50b1N0cmluZygpKVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKClcclxuICB9XHJcbn1cclxuXHJcbi8vIHNlbWFMb2dpY1BpbmcgdHJpZXMgdG8gdGVzdCBzdGFuZGFyZFZlcnNpb25BUEkgLSBpZiBpdCBjYW4ndCBiZSBjb25uZWN0ZWQgLSBzaG93IG1lYW5pbmdmdWwgZXJyb3Igc3RhdGVcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbWFMb2dpY1Bpbmcoc2V0dGluZ3M6IFNlbWFMb2dpY1BsdWdpblNldHRpbmdzLCBsYXN0VXBkYXRlOiBudW1iZXIpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICBsZXQgc3RhcnR0aW1lID0gRGF0ZS5ub3coKVxyXG4gIHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0luZm9ybWF0aXZlLCB1bmRlZmluZWQsICdHZXRWZXJzaW9uUGluZyBhdCAnLCBEYXRlLm5vdygpLCAnICBmb3IgJywgZ2V0SG9zdFBvcnQoc2V0dGluZ3MpKVxyXG4gIGF3YWl0IHNlbWFMb2dpY0dldFZlcnNpb24oc2V0dGluZ3MpXHJcbiAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0QnVmZmVyOiBhbnkpIHtcclxuICAgICAgLy8gbm90aGluZyB0byBkb1xyXG4gICAgICBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9JbmZvcm1hdGl2ZSwgdW5kZWZpbmVkLCAnU2VtYUxvZ2ljIEdldFZlcnNpb25QaW5nIHN0YXJ0ZWQgYXQ6Jywgc3RhcnR0aW1lLCAnIEVuZHRpbWU6ICcsIERhdGUubm93KCkpXHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKGZ1bmN0aW9uIChlOiBFcnJvcikge1xyXG4gICAgICAvLyBJZiBpdCBpcyBhbiBvbGQgZXJyb3IgKGxvbmcgdGltZSBhZ28gc2VudCksIHRoZW4gdGVoZXJlIGlzIG5vdGhpbmcgdG8gZG9cclxuICAgICAgaWYgKHN0YXJ0dGltZSA8IGxhc3RVcGRhdGUpIHtcclxuICAgICAgICAvLyB0aW1lIHRvIHNob3cgYW4gZXJyb3IgXHJcbiAgICAgICAgc2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfSW1wb3J0YW50LCB1bmRlZmluZWQsIGBUaGVyZSBpcyBubyBjb25uZWN0aW9uIHRvIFNlbWFMb2dpY1NlcnZpY2UgQVBJVmVyc2lvbmApXHJcbiAgICAgICAgc2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfSW1wb3J0YW50LCB1bmRlZmluZWQsIGdldEhvc3RQb3J0KHNldHRpbmdzKSlcclxuICAgICAgICBhcHAud29ya3NwYWNlLml0ZXJhdGVBbGxMZWF2ZXMoKGxlYWY6IGFueSkgPT4ge1xyXG4gICAgICAgICAgbGV0IHNsVmlldyA9IGxlYWYudmlldy5nZXRWaWV3VHlwZSgpXHJcbiAgICAgICAgICBpZiAoc2xWaWV3ID09IFNlbWFMb2dpY1ZpZXdUeXBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGxlYWYudmlldy5jb250YWluZXJFbC5jaGlsZHJlblsxXTtcclxuICAgICAgICAgICAgY29udGFpbmVyLmVtcHR5KCk7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5jcmVhdGVFbChcImgzXCIsIHsgdGV4dDogXCJTZW1hTG9naWNfRXJyb3JcIiB9KTtcclxuICAgICAgICAgICAgY29udGFpbmVyLmNyZWF0ZUVsKFwiYlwiLCB7IHRleHQ6IFwiVGhlcmUgaXMgbm8gY29ubmVjdGlvbiB0byBTZW1hTG9naWNTZXJ2aWNlIC0+IEFQSVZlcnNpb25cIiB9KTtcclxuICAgICAgICAgICAgY29udGFpbmVyLmNyZWF0ZUVsKFwiYlwiLCB7IHRleHQ6IGdldEhvc3RQb3J0KHNldHRpbmdzKSB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9IaWdoLCB1bmRlZmluZWQsICdTZW1hTG9naWMgR2V0VmVyc2lvblBpbmcgZmFpbGVkIGFuZCBub3QgdXNlZCBzdGFydGVkOicsIHN0YXJ0dGltZSwgJyBFbmR0aW1lOiAnLCBEYXRlLm5vdygpKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICApXHJcbiAgcmV0dXJuIHRydWVcclxufVxyXG5cclxuLy8gVG9EbzogUGFyc2UgaXN0IGR1cmNoIGRlbiBha3R1ZWxsZW4gVW1iYXUgaW0gUHJlUHJvY2Vzc29yIG5vY2htYWwgYW56dXBhc3NlblxyXG5hc3luYyBmdW5jdGlvbiBzaG93UGFyc2VXaXRoRmlsdGVyKGZpbHRlcjogc3RyaW5nLCBydWxlc3NldHR5cGU6IHN0cmluZywgc2V0dGluZ3M6IFNlbWFMb2dpY1BsdWdpblNldHRpbmdzKTogUHJvbWlzZTxOb2RlW10+IHtcclxuICAvLyBUb0RvOiBDaGFuZ2UgZnJvbSBjb25zb2xlLWxvZyB0byBzbGNvbnNvbGVsb2cgd2l0aCBTTGNvbS1PYmplY3RcclxuICBsZXQgcmVzdWx0czogTm9kZVtdID0gW107XHJcbiAgbGV0IGJ1aWxkY29udGFpbmVyRWw6IEhUTUxFbGVtZW50O1xyXG5cclxuICAvL2xldCB2QVBJX1VSTCA9IGdldEhvc3RQb3J0KHNldHRpbmdzKSArIEFQSV9EZWZhdWx0cy5ydWxlc19wYXJzZSArIFwiP3NpZD1cIiArIHNldHRpbmdzLm15U0xTZXR0aW5nc1tzZXR0aW5ncy5teVNldHRpbmddLm15U0lEO1xyXG4gIGxldCB2QVBJX1VSTCA9IGdldEhvc3RQb3J0KHNldHRpbmdzKSArIEFQSV9EZWZhdWx0cy5ydWxlc19wYXJzZSArIFwiP3NpZD1cIiArIG15Z1NJRDtcclxuICBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9JbXBvcnRhbnQsIHVuZGVmaW5lZCwgdkFQSV9VUkwpXHJcbiAgbGV0IGJvZHl0ZXh0OiBzdHJpbmcgPSBcIlwiO1xyXG5cclxuICBsZXQgYWN0aXZlVmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XHJcbiAgaWYgKGFjdGl2ZVZpZXcgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9IaWdoLCB1bmRlZmluZWQsIFwiRG8gbm90IGZpbmQgYW4gYWN0aXZlIHZpZXdcIilcclxuICAgIHJldHVybiByZXN1bHRzXHJcbiAgfVxyXG5cclxuICBsZXQgZGlhbGVjdElEOiBzdHJpbmcgPSBcImRlZmF1bHRcIlxyXG5cclxuICBsZXQgY29kZWJsb2NrOiBib29sZWFuID0gZmFsc2U7XHJcbiAgbGV0IG5ld0NvZGVibG9jazogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICBpZiAoYWN0aXZlVmlldyAhPSBudWxsKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjdGl2ZVZpZXcuZWRpdG9yLmxpbmVDb3VudCgpOyBpKyspIHtcclxuICAgICAgc2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfQWxsLCB1bmRlZmluZWQsIGksICc7JywgYWN0aXZlVmlldy5lZGl0b3IuZ2V0TGluZShpKSlcclxuICAgICAgc2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfQWxsLCB1bmRlZmluZWQsICdTdWJzdHJpbmc6JywgYWN0aXZlVmlldy5lZGl0b3IuZ2V0TGluZShpKS5zdWJzdHJpbmcoMCwgMikpO1xyXG4gICAgICBpZiAoYWN0aXZlVmlldy5lZGl0b3IuZ2V0TGluZShpKS5zdWJzdHJpbmcoMCwgMykgPT0gXCJgYGBcIikge1xyXG4gICAgICAgIGlmICghY29kZWJsb2NrKSB7XHJcbiAgICAgICAgICBjb2RlYmxvY2sgPSB0cnVlXHJcbiAgICAgICAgICBuZXdDb2RlYmxvY2sgPSB0cnVlXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIG5ld0NvZGVibG9jayA9IGZhbHNlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfVxyXG4gICAgICBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9JbmZvcm1hdGl2ZSwgdW5kZWZpbmVkLCAnQ3VycmVudCBsaW5lIGlzIENvZGVibG9jaycsIGNvZGVibG9jaylcclxuXHJcbiAgICAgIGlmICgoIWNvZGVibG9jaykgJiYgKCFuZXdDb2RlYmxvY2spKSB7XHJcbiAgICAgICAgLy8gQ2hlY2sgaW5saW5lIFN0YXRlbWVudHNcclxuICAgICAgICBzd2l0Y2ggKGFjdGl2ZVZpZXcuZWRpdG9yLmdldExpbmUoaSkpIHtcclxuICAgICAgICAgIGRlZmF1bHQ6IGJvZHl0ZXh0ID0gYm9keXRleHQuY29uY2F0KGFjdGl2ZVZpZXcuZWRpdG9yLmdldExpbmUoaSkgKyAnXFxuJylcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgLy8gUHJcdTAwRkNmZSBhdWYgenUgdmVyd2VuZGVuZGVuIERpYWxlY3RcclxuICAgICAgICBzd2l0Y2ggKGFjdGl2ZVZpZXcuZWRpdG9yLmdldExpbmUoaSkuc3Vic3RyaW5nKDAsIHNlbWFMb2dpY0NvbW1hbmQudXNlRGlhbGVjdC5sZW5ndGgpKSB7XHJcbiAgICAgICAgICBjYXNlIHNlbWFMb2dpY0NvbW1hbmQudXNlRGlhbGVjdDoge1xyXG4gICAgICAgICAgICBkaWFsZWN0SUQgPSBhY3RpdmVWaWV3LmVkaXRvci5nZXRMaW5lKGkpLnN1YnN0cmluZyhzZW1hTG9naWNDb21tYW5kLnVzZURpYWxlY3QubGVuZ3RoLCBhY3RpdmVWaWV3LmVkaXRvci5nZXRMaW5lKGkpLmxlbmd0aCAtIDEpXHJcbiAgICAgICAgICAgIGRpYWxlY3RJRCA9IGRpYWxlY3RJRC50cmltKCk7XHJcbiAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBkZWZhdWx0OiB7IH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICB9XHJcbiAgICAgIGlmIChpIDwgYWN0aXZlVmlldy5lZGl0b3IubGluZUNvdW50KCkpIHtcclxuICAgICAgICBpZiAoYWN0aXZlVmlldy5lZGl0b3IuZ2V0TGluZShpKS5zdWJzdHJpbmcoMCwgMykgPT0gXCJgYGBcIikge1xyXG4gICAgICAgICAgaWYgKChjb2RlYmxvY2spICYmICghbmV3Q29kZWJsb2NrKSkgeyBjb2RlYmxvY2sgPSBmYWxzZSB9IGVsc2UgeyBuZXdDb2RlYmxvY2sgPSBmYWxzZSB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcblxyXG4gIGlmIChib2R5dGV4dCA9PSBcIlwiKSB7IGJvZHl0ZXh0ID0gXCJcIiB9XHJcbiAgaWYgKGRpYWxlY3RJRCA9PSBcIlwiKSB7IGRpYWxlY3RJRCA9IFwiZGVmYXVsdFwiIH1cclxuICBsZXQgcmVzdWx0ID0gXCJcIjtcclxuICBsZXQgb3B0aW9uc1BhcnNlOiBSZXF1ZXN0VXJsUGFyYW07XHJcblxyXG4gIGlmIChmaWx0ZXIgIT0gXCJcIikge1xyXG4gICAgbGV0IGpzb253b0ZpbHRlciA9IHtcclxuICAgICAgXCJ0ZXh0XCI6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICBcInRleHRJRFwiOiBcImZseVwiLFxyXG4gICAgICAgICAgXCJkaWFsZWN0SURcIjogZGlhbGVjdElELFxyXG4gICAgICAgICAgXCJydWxlc1wiOiBib2R5dGV4dFxyXG4gICAgICAgIH1cclxuICAgICAgXSxcclxuICAgICAgXCJmaWx0ZXJcIjoge1xyXG4gICAgICAgIFwiZGlhbGVjdElEXCI6IFwiZGVmYXVsdFwiLFxyXG4gICAgICAgIFwic3ltYm9sc1wiOiBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIFwic3ltYm9sXCI6IGZpbHRlclxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIF1cclxuICAgICAgfSxcclxuICAgICAgXCJwZXJzaXN0ZW5jeVwiOiBmYWxzZSxcclxuICAgICAgXCJydWxlc2V0dHlwZVwiOiBydWxlc3NldHR5cGUgLy9zZXR0aW5ncy5teU91dHB1dEZvcm1hdFxyXG4gICAgfVxyXG4gICAgb3B0aW9uc1BhcnNlID0ge1xyXG4gICAgICB1cmw6IHZBUElfVVJMLFxyXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXHJcbiAgICAgIH0sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGpzb253b0ZpbHRlcilcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgbGV0IGpzb250ZXN0d3RoRmlsdGVyID0ge1xyXG4gICAgICBcInRleHRcIjogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIFwidGV4dElEXCI6IFwiZmx5XCIsXHJcbiAgICAgICAgICBcImRpYWxlY3RJRFwiOiBkaWFsZWN0SUQsXHJcbiAgICAgICAgICBcInJ1bGVzXCI6IGJvZHl0ZXh0XHJcbiAgICAgICAgfVxyXG4gICAgICBdLFxyXG4gICAgICBcImZpbHRlclwiOiB7fSxcclxuICAgICAgXCJwZXJzaXN0ZW5jeVwiOiBmYWxzZSxcclxuICAgICAgXCJydWxlc2V0dHlwZVwiOiBydWxlc3NldHR5cGUgLy9zZXR0aW5ncy5teU91dHB1dEZvcm1hdFxyXG4gICAgfVxyXG4gICAgb3B0aW9uc1BhcnNlID0ge1xyXG4gICAgICB1cmw6IHZBUElfVVJMLFxyXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXHJcbiAgICAgIH0sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGpzb250ZXN0d3RoRmlsdGVyKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbGV0IHJlczogc3RyaW5nO1xyXG4gIHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0NoYXR0eSwgdW5kZWZpbmVkLCBgQ29udGV4dDogJHtkaWFsZWN0SUR9LCBCb2R5dGV4dDogJHtib2R5dGV4dH1gKVxyXG4gIHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0ltcG9ydGFudCwgdW5kZWZpbmVkLCBvcHRpb25zUGFyc2UpXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHJlc3BvbnNlUGFyc2UgPSBhd2FpdCByZXF1ZXN0VXJsKG9wdGlvbnNQYXJzZSlcclxuICAgIGNvbnN0IHJlbUpzb24gPSByZXNwb25zZVBhcnNlLnRleHQ7XHJcbiAgICBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9JbXBvcnRhbnQsIHVuZGVmaW5lZCwgXCJTZW1hTG9naWM6IFBhcnNlIHdpdGggaHR0cC1zdGF0dXMgXCIgKyByZXNwb25zZVBhcnNlLnN0YXR1cy50b1N0cmluZygpKVxyXG4gICAgaWYgKHJlc3BvbnNlUGFyc2Uuc3RhdHVzID09IDIwMCkge1xyXG4gICAgICBsZXQgcmVzdWx0aHR0cCA9IHJlc3BvbnNlUGFyc2UudGV4dDtcclxuICAgICAgY29uc3QgZnJhZ21lbnQgPSAobmV3IFJhbmdlKCkpLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChyZXN1bHRodHRwKTtcclxuICAgICAgLy9idWlsZGNvbnRhaW5lckVsID0gY3JlYXRlRWwoXCJoNFwiLCB7IHRleHQ6IEFQSV9EZWZhdWx0cy52aWV3aGVhZGVyIH0pO1xyXG4gICAgICBidWlsZGNvbnRhaW5lckVsID0gY3JlYXRlRWwoXCJwXCIpXHJcbiAgICAgIGJ1aWxkY29udGFpbmVyRWwuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xyXG4gICAgICByZXN1bHRzLnB1c2goYnVpbGRjb250YWluZXJFbClcclxuICAgICAgc2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfSW1wb3J0YW50LCB1bmRlZmluZWQsIGBQYXJzZXJlc3VsdDoke3Jlc3VsdGh0dHB9YCk7XHJcbiAgICAgIHJldHVybiByZXN1bHRzXHJcbiAgICB9XHJcbiAgfVxyXG4gIGNhdGNoIChlKSB7XHJcbiAgICBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9FcnJvciwgdW5kZWZpbmVkLCBgQ2F0Y2hlcnJvciBvZiByZW1vdmluZyBjb250ZXh0ICR7dkFQSV9VUkx9YClcclxuICAgIC8vY29uc29sZS5sb2coYENhdGNoZXJyb3Igb2YgcmVtb3ZpbmcgY29udGV4dCAke3ZBUElfVVJMfWApXHJcbiAgICBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9FcnJvciwgdW5kZWZpbmVkLCBlLnRvU3RyaW5nKCkpXHJcbiAgICAvL2NvbnNvbGUubG9nKGUudG9TdHJpbmcoKSlcclxuICAgIHRocm93IGVcclxuICB9XHJcblxyXG4gIHJldHVybiByZXN1bHRzXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzbGNvbnNvbGVsb2coRGVidWdWYWx1ZTogbnVtYmVyLCBzbHZpZXc/OiBTZW1hTG9naWNWaWV3IHwgdW5kZWZpbmVkLCBtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pIHtcclxuICBpZiAoRGVidWdMZXZlbCA+PSBEZWJ1Z1ZhbHVlKSB7XHJcbiAgICBpZiAoc2x2aWV3ICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICBpZiAoc2x2aWV3LmdldFZpZXdUeXBlKCkgPT0gU2VtYUxvZ2ljVmlld1R5cGUpIHtcclxuICAgICAgICBpZiAoc2x2aWV3LmdldERlYnVnSW5saW5lKCkgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgbGV0IGxvZ01lc3NhZ2VzID0gSlNPTi5zdHJpbmdpZnkobWVzc2FnZSlcclxuICAgICAgICAgIHNsdmlldy5hcHBlbmREZWJ1Z0NvbnRlbnQobG9nTWVzc2FnZXMpXHJcbiAgICAgICAgfSBlbHNlIHsgY29uc29sZS5sb2cobWVzc2FnZSwgLi4ub3B0aW9uYWxQYXJhbXMpIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5sb2cobWVzc2FnZSwgLi4ub3B0aW9uYWxQYXJhbXMpXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5cclxuIiwgImltcG9ydCB7IERlYnVnTGV2TWFwLCBzZW1hTG9naWNDb21tYW5kLCBSdWxlc2V0dHlwZXNDb21tYW5kcywgUnN0eXBlc19BU1AsIFJzdHlwZXNfU2VtYWxvZ2ljIH0gZnJvbSBcInNyYy9jb25zdFwiXHJcbmltcG9ydCB7IERlYnVnTGV2ZWwgfSBmcm9tIFwiLi4vbWFpblwiXHJcbmltcG9ydCB7IHNsY29uc29sZWxvZyB9IGZyb20gXCJzcmMvdXRpbHNcIlxyXG5cclxuXHJcbmV4cG9ydCB0eXBlIHBhcnNlQ29tbWFuZCA9IHtcclxuICAgIG91dHB1dGZvcm1hdDogc3RyaW5nLFxyXG4gICAgZW5kcG9pbnQ6IHN0cmluZyxcclxuICAgIHBhcmFtOiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBwYXJzZUNvbW1hbmRzIHtcclxuICAgIGNvbW1hbmRzOiBwYXJzZUNvbW1hbmRbXVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVmlld1V0aWxzIHtcclxuXHJcbiAgICBwdWJsaWMgZ2V0Q29udGVudChjb250ZW50RWw6IEhUTUxFbGVtZW50LCBvdXRQdXRGb3JtYXQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IGNvbnRlbnQ6IHN0cmluZ1xyXG4gICAgICAgIGlmIChjb250ZW50RWwudGV4dENvbnRlbnQgPT0gbnVsbCkgeyBjb250ZW50ID0gXCJcIiB9IGVsc2UgeyBjb250ZW50ID0gY29udGVudEVsLnRleHRDb250ZW50IH1cclxuICAgICAgICBjb250ZW50ID0gdGhpcy5jbGVhbkNvbnRlbnQoY29udGVudCwgb3V0UHV0Rm9ybWF0KVxyXG4gICAgICAgIGNvbnRlbnQgPSB0aGlzLmNsZWFuQ29tbWFuZHMoY29udGVudClcclxuICAgICAgICByZXR1cm4gY29udGVudFxyXG4gICAgfVxyXG5cclxuICAgIGNsZWFuQ29udGVudChjb250ZW50OiBzdHJpbmcsIG91dFB1dEZvcm1hdDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICAvLyBUZXh0bWFuaXB1bGF0aW9uIGZvciBzcGVjaWFsIG91dGNvbWVzXHJcbiAgICAgICAgaWYgKG91dFB1dEZvcm1hdCA9PSBSdWxlc2V0dHlwZXNDb21tYW5kc1tSc3R5cGVzX0FTUF1bMV0pIHtcclxuICAgICAgICAgICAgY29uc3QgZmlyc3RKU09OQnJhY2tldCA9IGNvbnRlbnQuaW5kZXhPZihcIntcIilcclxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuc3Vic3RyaW5nKGZpcnN0SlNPTkJyYWNrZXQsIGNvbnRlbnQubGVuZ3RoKVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3V0UHV0Rm9ybWF0ID09IFJ1bGVzZXR0eXBlc0NvbW1hbmRzW1JzdHlwZXNfU2VtYWxvZ2ljXVsxXSkge1xyXG4gICAgICAgICAgICBjb25zdCBoZWFkZXJTdHJpbmcgPSBcIlNlbWFsb2dpYyBPdXRwdXRcIlxyXG4gICAgICAgICAgICBjb25zdCBmaXJzdGhlYWRlclN0cmluZyA9IGNvbnRlbnQuaW5kZXhPZihoZWFkZXJTdHJpbmcpXHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnN1YnN0cmluZyhmaXJzdGhlYWRlclN0cmluZyArIGhlYWRlclN0cmluZy5sZW5ndGgsIGNvbnRlbnQubGVuZ3RoKVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29udGVudFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGVhbkNvbW1hbmRzKGNvbnRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IGNvbnRlbnRDbGVhbmVkOiBzdHJpbmdbXSA9IFtdXHJcbiAgICAgICAgbGV0IGNvbnRlbnRBcnJheSA9IGNvbnRlbnQuc3BsaXQoJ1xcbicpXHJcblxyXG4gICAgICAgIGNvbnRlbnRBcnJheS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcm93ID0gZWxlbWVudC50cmltKClcclxuICAgICAgICAgICAgcm93ID0gcm93LnRvTG93ZXJDYXNlKClcclxuICAgICAgICAgICAgc2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfQ2hhdHR5LCB1bmRlZmluZWQsIFwiUm93IGJlZm9yZTpcIiArIHJvdylcclxuICAgICAgICAgICAgcm93ID0gcm93LnJlcGxhY2VBbGwoXCIgXCIsIFwiXCIpXHJcbiAgICAgICAgICAgIHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0NoYXR0eSwgdW5kZWZpbmVkLCBcIlJvdyBhZnRlcjpcIiArIHJvdylcclxuICAgICAgICAgICAgaWYgKHJvdy5pbmRleE9mKHNlbWFMb2dpY0NvbW1hbmQuY29tbWFuZF9zdGFydC50b0xvd2VyQ2FzZSgpKSAhPSAwKSB7IC8vIE5vIHN0YXJ0aW5nIFNlbWFMb2dpYy1Db21tYW5kXHJcbiAgICAgICAgICAgICAgICBjb250ZW50Q2xlYW5lZC5wdXNoKGVsZW1lbnQpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBTdGFydGluZyBTZW1hTG9naWNDb21tYW5kXHJcbiAgICAgICAgICAgICAgICAvLyBUZXN0IGZvciBTZW1hTG9naWNDb21tYW5kcyB3aGljaCBzaG91bGQgYmUgaW50ZXJwcmV0YXRlZCBieSBTZW1hTG9naWNTZXJ2aWNlICAgIFxyXG4gICAgICAgICAgICAgICAgc2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfQ2hhdHR5LCB1bmRlZmluZWQsIFwiSW5kZXggRGVmaW5lOlwiICsgcm93LmluZGV4T2Yoc2VtYUxvZ2ljQ29tbWFuZC5kZWZpbmUpLnRvU3RyaW5nKCkpXHJcbiAgICAgICAgICAgICAgICBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9DaGF0dHksIHVuZGVmaW5lZCwgXCJMZW5ndGggU3RhcnQ6XCIgKyBzZW1hTG9naWNDb21tYW5kLmNvbW1hbmRfc3RhcnQubGVuZ3RoLnRvU3RyaW5nKCkpXHJcbiAgICAgICAgICAgICAgICBpZiAocm93LmluZGV4T2Yoc2VtYUxvZ2ljQ29tbWFuZC5kZWZpbmUpID09IHNlbWFMb2dpY0NvbW1hbmQuY29tbWFuZF9zdGFydC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50Q2xlYW5lZC5wdXNoKGVsZW1lbnQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIGNvbnRlbnQgPSBcIlwiXHJcbiAgICAgICAgY29udGVudENsZWFuZWQuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQgKyBlbGVtZW50ICsgXCJcXG5cIlxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBjb250ZW50XHJcbiAgICB9XHJcbn0iLCAiaW1wb3J0IHsgSXRlbVZpZXcsIFdvcmtzcGFjZUxlYWYsIFJlcXVlc3RVcmxQYXJhbSwgcmVxdWVzdFVybCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBEZWJ1Z0xldk1hcCwgc2VtYUxvZ2ljQ29tbWFuZCwgUnN0eXBlc19BU1AsIFJ1bGVzZXR0eXBlc0NvbW1hbmRzLCBzbFRleHRzIH0gZnJvbSBcIi4vY29uc3RcIlxyXG5pbXBvcnQgeyBTZW1hTG9naWNQbHVnaW5Db21tLCBTZW1hTG9naWNQbHVnaW5TZXR0aW5ncyB9IGZyb20gXCIuLi9tYWluXCJcclxuaW1wb3J0IHsgZ2V0SG9zdEFzcFBvcnQsIHNsY29uc29sZWxvZyB9IGZyb20gJy4vdXRpbHMnXHJcbmltcG9ydCB7IHBhcnNlQ29tbWFuZHMgfSBmcm9tIFwic3JjL3ZpZXdfdXRpbHNcIjtcclxuaW1wb3J0IHsgfSBmcm9tIFwic3JjL3RlbXBsYXRlXCI7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IEFTUFZpZXdUeXBlID0gJ1RyYW5zZmVyU2VydmljZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgQVNQVmlldyBleHRlbmRzIEl0ZW1WaWV3IHtcclxuXHJcbiAgbXlBY3Rpb246IEhUTUxFbGVtZW50XHJcbiAgTGFzdFJlcXVlc3RUaW1lOiBudW1iZXIgPSAwXHJcbiAgc2xDb21tOiBTZW1hTG9naWNQbHVnaW5Db21tXHJcblxyXG4gIGNvbnN0cnVjdG9yKGxlYWY6IFdvcmtzcGFjZUxlYWYpIHtcclxuICAgIHN1cGVyKGxlYWYpO1xyXG4gICAgdGhpcy5uYXZpZ2F0aW9uID0gdHJ1ZVxyXG4gICAgdGhpcy5zZXROZXdBU1BJbml0aWFsKHRydWUpXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0Q29tbShjb21tOiBTZW1hTG9naWNQbHVnaW5Db21tKSB7XHJcbiAgICB0aGlzLnNsQ29tbSA9IGNvbW1cclxuICAgIC8vdGhpcy5zbENvbW0uc2V0U2xWaWV3KHRoaXMpXHJcbiAgICB0aGlzLnNldE5ld0FTUEluaXRpYWwoZmFsc2UpXHJcbiAgfVxyXG5cclxuICBnZXRWaWV3VHlwZSgpIHtcclxuICAgIHJldHVybiBBU1BWaWV3VHlwZTtcclxuICB9XHJcblxyXG4gIGdldERpc3BsYXlUZXh0KCkge1xyXG4gICAgcmV0dXJuIEFTUFZpZXdUeXBlO1xyXG4gIH1cclxuXHJcbiAgb25sb2FkKCk6IHZvaWQge1xyXG4gICAgdGhpcy5uYXZpZ2F0aW9uID0gdHJ1ZVxyXG4gICAgdGhpcy5jb250ZW50RWwuY29udGVudEVkaXRhYmxlID0gJ3RydWUnXHJcbiAgfVxyXG5cclxuICBjaGVja0FTUENvbnRhaW5lckNvbnRlbnQoKTogYm9vbGVhbiB7XHJcbiAgICBpZiAodGhpcy5jb250YWluZXJFbC5jaGlsZHJlbiAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgaWYgKHRoaXMuY29udGFpbmVyRWwuY2hpbGRyZW5bMV0udGV4dENvbnRlbnQ/LnN1YnN0cmluZygwLCBzbFRleHRzWydIZWFkZXJUViddLmxlbmd0aCkgPT0gc2xUZXh0c1snSGVhZGVyVFYnXSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGVsZXRlQVNQQ29udGFpbmVyQ29udGVudCgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmNvbnRhaW5lckVsLmNoaWxkcmVuICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29udGFpbmVyRWwuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAodGhpcy5jb250YWluZXJFbC5jaGlsZHJlbltpXS5ub2RlTmFtZSA9PSBcInBcIikge1xyXG4gICAgICAgICAgd2hpbGUgKHRoaXMuY29udGFpbmVyRWwuY2hpbGRyZW5baV0gIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuY2hpbGRyZW5baV0uZW1wdHlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXROZXdBU1BJbml0aWFsKG5vdzogYm9vbGVhbikge1xyXG4gICAgLy9jb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRlbnRFbFxyXG4gICAgLy9jb250YWluZXIuZW1wdHkoKVxyXG4gICAgLy9jb250YWluZXIuY3JlYXRlRWwoXCJoNFwiLCB7IHRleHQ6IFwiVHJhbnNmZXIuVmlld1wiIH0pO1xyXG4gICAgLy9jb250YWluZXIuY3JlYXRlRWwoXCJwXCIpXHJcbiAgICBsZXQgY29udGFpbmVyID0gdGhpcy5jb250ZW50RWxcclxuICAgIGlmIChub3cgfHwgIXRoaXMuY2hlY2tBU1BDb250YWluZXJDb250ZW50KCkpIHtcclxuICAgICAgY29udGFpbmVyLmVtcHR5KClcclxuICAgICAgLy9jb250YWluZXIuY29udGVudEVkaXRhYmxlID0gJ3RydWUnXHJcbiAgICAgIGNvbnRhaW5lci5jcmVhdGVFbChcImg0XCIsIHsgdGV4dDogc2xUZXh0c1snSGVhZGVyVFYnXSB9KTtcclxuICAgICAgY29udGFpbmVyLmNyZWF0ZUVsKFwicFwiKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy90aGlzLmRlbGV0ZUFTUENvbnRhaW5lckNvbnRlbnQoKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG5cclxuICBhc3luYyBvbk9wZW4oKSB7XHJcbiAgICAvL3RoaXMuc2V0TmV3QVNQSW5pdGlhbCgpXHJcbiAgfVxyXG5cclxuICBhc3luYyBvbkNsb3NlKCkge1xyXG4gICAgLy8gTm90aGluZyB0byBjbGVhbiB1cC5cclxuICB9XHJcblxyXG4gIHNob3dFcnJvcihmcmFnbWVudDogRG9jdW1lbnRGcmFnbWVudCkge1xyXG4gICAgLy8gICB0aGlzLnNldEluaXRpYWwocnVsZXNldHR5cGVzQ29tbWFuZHNbcnN0eXBlc19TZW1hbG9naWNdWzFdKVxyXG4gICAgdGhpcy5jb250ZW50RWwuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpXHJcbiAgfVxyXG4gIG9udW5sb2FkKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuc2xDb21tICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aGlzLnNsQ29tbS5zbFBsdWdpbi5hY3RpdmF0ZWQgPSBmYWxzZVxyXG4gICAgICB0aGlzLnNsQ29tbS5zbFBsdWdpbi5teVN0YXR1cy5zZXRUZXh0KCdUcmFuc2ZlciBpcyBvZmYnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNyZWF0ZVJlcXVlc3QoY29tbTogU2VtYUxvZ2ljUGx1Z2luQ29tbSwgc2V0dGluZ3M6IFNlbWFMb2dpY1BsdWdpblNldHRpbmdzLCBhcGlVcmw6IHN0cmluZywgbWV0aG9kOiBzdHJpbmcsIGNvbnRlbnRUeXBlOiBzdHJpbmcsIHdpdGhCYXNpY0F1dGg6IGJvb2xlYW4sIGJvZHk/OiBzdHJpbmcpOiBSZXF1ZXN0VXJsUGFyYW0ge1xyXG4gICAgbGV0IHJlcXVlc3Q6IFJlcXVlc3RVcmxQYXJhbVxyXG4gICAgdHlwZSByZXF1ZXN0SGVhZGVyID0gUmVjb3JkPHN0cmluZywgc3RyaW5nPlxyXG4gICAgbGV0IG15SGVhZGVyOiByZXF1ZXN0SGVhZGVyID0ge31cclxuXHJcbiAgICBjb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlLnRvTG93ZXJDYXNlKClcclxuICAgIG1ldGhvZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXHJcblxyXG4gICAgc3dpdGNoIChjb250ZW50VHlwZS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgIGNhc2UgKFwianNvblwiKToge1xyXG4gICAgICAgIG15SGVhZGVyW1wiQ29udGVudC1UeXBlXCJdID0gXCJhcHBsaWNhdGlvbi9qc29uXCJcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlIChcImFzcFwiKToge1xyXG4gICAgICAgIG15SGVhZGVyW1wiQ29udGVudC1UeXBlXCJdID0gXCJhcHBsaWNhdGlvbi9qc29uXCJcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlIChcImFzcC5qc29uXCIpOiB7XHJcbiAgICAgICAgbXlIZWFkZXJbXCJDb250ZW50LVR5cGVcIl0gPSBcImFwcGxpY2F0aW9uL2pzb25cIlxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgKFwidGV4dFwiKToge1xyXG4gICAgICAgIG15SGVhZGVyW1wiQ29udGVudC1UeXBlXCJdID0gXCJ0ZXh0L3BsYWluXCJcclxuICAgICAgICBicmVha1xyXG4gICAgICB9XHJcbiAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICBteUhlYWRlcltcIkNvbnRlbnQtVHlwZVwiXSA9IGNvbnRlbnRUeXBlXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh3aXRoQmFzaWNBdXRoKSB7XHJcbiAgICAgIG15SGVhZGVyW1wiQXV0aG9yaXphdGlvblwiXSA9IFwiQmFzaWMgXCIgKyBidG9hKHNldHRpbmdzLm15U0xTZXR0aW5nc1tzZXR0aW5ncy5teVNldHRpbmddLm15VXNlciArIFwiOlwiICsgc2V0dGluZ3MubXlTTFNldHRpbmdzW3NldHRpbmdzLm15U2V0dGluZ10ubXlQYXNzd29yZClcclxuICAgIH1cclxuXHJcbiAgICByZXF1ZXN0ID0ge1xyXG4gICAgICB1cmw6IGFwaVVybCxcclxuICAgICAgbWV0aG9kOiBtZXRob2QsXHJcbiAgICAgIGhlYWRlcnM6IG15SGVhZGVyLFxyXG4gICAgICBib2R5OiBib2R5XHJcbiAgICB9XHJcbiAgICBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9JbXBvcnRhbnQsIHRoaXMuc2xDb21tLnNsdmlldywgcmVxdWVzdClcclxuICAgIHJldHVybiByZXF1ZXN0XHJcbiAgfVxyXG5cclxuICBnZXRBU1BDb21tYW5kcyhzbENvbW06IFNlbWFMb2dpY1BsdWdpbkNvbW0sIHNldHRpbmdzOiBTZW1hTG9naWNQbHVnaW5TZXR0aW5ncyk6IHBhcnNlQ29tbWFuZHMge1xyXG4gICAgbGV0IHBhcnNlQ29tbWFuZHM6IHBhcnNlQ29tbWFuZHNcclxuICAgIHBhcnNlQ29tbWFuZHMgPSB7XHJcbiAgICAgIGNvbW1hbmRzOiBbe1xyXG4gICAgICAgIG91dHB1dGZvcm1hdDogXCJBU1AuanNvblwiLFxyXG4gICAgICAgIGVuZHBvaW50OiBzZXR0aW5ncy5teVNMU2V0dGluZ3Nbc2V0dGluZ3MubXlTZXR0aW5nXS5teUFzcEVuZHBvaW50LFxyXG4gICAgICAgIHBhcmFtOiBcIlwiXHJcbiAgICAgIH1dXHJcbiAgICB9XHJcbiAgICBsZXQgcGFyc2VJbml0aWFsID0gdHJ1ZVxyXG5cclxuICAgIGlmIChzbENvbW0uc2x2aWV3ICE9IG51bGwpIHtcclxuXHJcbiAgICAgIGNvbnN0IGVkaXRvcnRleHQgPSBzbENvbW0uc2xVc2VkTURWaWV3LmVkaXRvci5nZXRSYW5nZSh7IGxpbmU6IDAsIGNoOiAwIH0sIHsgbGluZTogc2xDb21tLnNsVXNlZE1EVmlldy5lZGl0b3IubGFzdExpbmUoKSArIDEsIGNoOiBzbENvbW0uc2xVc2VkTURWaWV3LmVkaXRvci5sYXN0TGluZS5sZW5ndGggfSlcclxuICAgICAgY29uc3Qgcm93cyA9IGVkaXRvcnRleHQuc3BsaXQoXCJcXG5cIikuZmlsdGVyKChyb3cpID0+IHJvdy5sZW5ndGggPiAwKTtcclxuXHJcbiAgICAgIGxldCBteVN0clJlc3VsdDogc3RyaW5nO1xyXG4gICAgICBsZXQgdHJhbnNmZXJTdHJpbmc6IHN0cmluZztcclxuICAgICAgbGV0IGVuZHBvaW50U3RyaW5nOiBzdHJpbmcgPSAnJztcclxuICAgICAgbGV0IHBhcmFtU3RyaW5nOiBzdHJpbmc7XHJcblxyXG4gICAgICByb3dzLmZvckVhY2gocm93ID0+IHtcclxuICAgICAgICBpZiAocm93LnN1YnN0cmluZygwLCBzZW1hTG9naWNDb21tYW5kLmNvbW1hbmRfc3RhcnQubGVuZ3RoKSA9PSBzZW1hTG9naWNDb21tYW5kLmNvbW1hbmRfc3RhcnQpIHtcclxuICAgICAgICAgIGNvbnN0IHRyYW5zZmVyID0gcm93LmluZGV4T2Yoc2VtYUxvZ2ljQ29tbWFuZC50cmFuc2ZlcilcclxuICAgICAgICAgIGNvbnN0IGVuZHBvaW50ID0gcm93LmluZGV4T2Yoc2VtYUxvZ2ljQ29tbWFuZC50cmFuc2ZlckVuZHBvaW50KVxyXG4gICAgICAgICAgbGV0IHBhcmFtID0gcm93LmluZGV4T2Yoc2VtYUxvZ2ljQ29tbWFuZC50cmFuc2ZlclBhcmFtKVxyXG4gICAgICAgICAgY29uc3QgZW5kQ29tbWFuZCA9IHJvdy5sYXN0SW5kZXhPZihzZW1hTG9naWNDb21tYW5kLmNvbW1hbmRfZW5kKVxyXG4gICAgICAgICAgaWYgKHBhcmFtIDwgMCkgeyBwYXJhbSA9IGVuZENvbW1hbmQgfVxyXG5cclxuICAgICAgICAgIGlmICh0cmFuc2ZlciA8PSAwKSB7IH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRyYW5zZmVyU3RyaW5nID0gcm93LnN1YnN0cmluZyh0cmFuc2ZlciArIHNlbWFMb2dpY0NvbW1hbmQudHJhbnNmZXIubGVuZ3RoICsgMSwgZW5kcG9pbnQpXHJcbiAgICAgICAgICAgIHRyYW5zZmVyU3RyaW5nID0gdHJhbnNmZXJTdHJpbmcudHJpbUVuZCgpXHJcbiAgICAgICAgICAgIGlmIChlbmRwb2ludCA+IDApIHtcclxuICAgICAgICAgICAgICBlbmRwb2ludFN0cmluZyA9IHJvdy5zdWJzdHJpbmcoZW5kcG9pbnQgKyAxICsgc2VtYUxvZ2ljQ29tbWFuZC50cmFuc2ZlckVuZHBvaW50Lmxlbmd0aCwgcGFyYW0pXHJcbiAgICAgICAgICAgICAgZW5kcG9pbnRTdHJpbmcgPSBlbmRwb2ludFN0cmluZy50cmltRW5kKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocGFyYW0gPiAwICYmIHBhcmFtICE9IGVuZENvbW1hbmQpIHtcclxuICAgICAgICAgICAgICBwYXJhbVN0cmluZyA9IHJvdy5zdWJzdHJpbmcocGFyYW0gKyAxICsgc2VtYUxvZ2ljQ29tbWFuZC50cmFuc2ZlclBhcmFtLmxlbmd0aCwgZW5kQ29tbWFuZClcclxuICAgICAgICAgICAgICBwYXJhbVN0cmluZyA9IHBhcmFtU3RyaW5nLnRyaW1FbmQoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgcGFyYW1QYXJzZWRDb21tYW5kID0ge1xyXG4gICAgICAgICAgICAgIG91dHB1dGZvcm1hdDogdHJhbnNmZXJTdHJpbmcsXHJcbiAgICAgICAgICAgICAgZW5kcG9pbnQ6IGVuZHBvaW50U3RyaW5nLFxyXG4gICAgICAgICAgICAgIHBhcmFtOiBwYXJhbVN0cmluZ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwYXJzZUluaXRpYWwpIHtcclxuICAgICAgICAgICAgICBwYXJzZUluaXRpYWwgPSBmYWxzZVxyXG4gICAgICAgICAgICAgIHBhcnNlQ29tbWFuZHMuY29tbWFuZHNbMF0gPSBwYXJhbVBhcnNlZENvbW1hbmRcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBwYXJzZUNvbW1hbmRzLmNvbW1hbmRzLnB1c2gocGFyYW1QYXJzZWRDb21tYW5kKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhcnNlQ29tbWFuZHNcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyBhc3BQYXJzZShzbENvbW06IFNlbWFMb2dpY1BsdWdpbkNvbW0sIHNldHRpbmdzOiBTZW1hTG9naWNQbHVnaW5TZXR0aW5ncywgYXNwSnNvblBhcnNlZFNlbWFMb2dpYzogc3RyaW5nLCBSZXF1ZXN0VGltZTogTnVtYmVyKSB7XHJcbiAgICBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9DdXJyZW50X0RldiwgdGhpcy5zbENvbW0uc2x2aWV3LCAnU3RhcnQgVHJhbnNmZXJfUGFyc2UnKVxyXG4gICAgLy90aGlzLnNldE5ld0FTUEluaXRpYWwoKVxyXG5cclxuICAgIGxldCB2QVBJX1VSTDogc3RyaW5nID0gXCJcIlxyXG4gICAgY29uc3QgcGFyc2VDb21tYW5kcyA9IHRoaXMuZ2V0QVNQQ29tbWFuZHMoc2xDb21tLCBzZXR0aW5ncylcclxuXHJcbiAgICBwYXJzZUNvbW1hbmRzLmNvbW1hbmRzLmZvckVhY2gocGFyc2VDb21tYW5kcyA9PiB7XHJcblxyXG4gICAgICBpZiAocGFyc2VDb21tYW5kcy5vdXRwdXRmb3JtYXQgPT0gUnVsZXNldHR5cGVzQ29tbWFuZHNbUnN0eXBlc19BU1BdWzFdIHx8IHBhcnNlQ29tbWFuZHMub3V0cHV0Zm9ybWF0ID09IFJ1bGVzZXR0eXBlc0NvbW1hbmRzW1JzdHlwZXNfQVNQXVswXSkge1xyXG4gICAgICAgIHZBUElfVVJMID0gZ2V0SG9zdEFzcFBvcnQoc2V0dGluZ3MsIHBhcnNlQ29tbWFuZHMpXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdkFQSV9VUkwgPSBwYXJzZUNvbW1hbmRzLmVuZHBvaW50XHJcbiAgICAgICAgaWYgKHBhcnNlQ29tbWFuZHMucGFyYW0gIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICBpZiAocGFyc2VDb21tYW5kcy5wYXJhbS5sZW5ndGggPiAwKSB7IHZBUElfVVJMID0gdkFQSV9VUkwgKyBcIj9cIiArIHBhcnNlQ29tbWFuZHMucGFyYW0gfVxyXG4gICAgICAgIH1cclxuICAgICAgICBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9DdXJyZW50X0RldiwgdGhpcy5zbENvbW0uc2x2aWV3LCBcIlRyYW5zZmVyIFVSTDogXCIsIHZBUElfVVJMKVxyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgb3B0aW9uc1BhcnNlID0gdGhpcy5jcmVhdGVSZXF1ZXN0KHRoaXMuc2xDb21tLCBzZXR0aW5ncywgdkFQSV9VUkwsICdQT1NUJywgJ2pzb24nLCB0cnVlLCBhc3BKc29uUGFyc2VkU2VtYUxvZ2ljKVxyXG4gICAgICB0aGlzLlJlc3Aob3B0aW9uc1BhcnNlLCB2QVBJX1VSTCwgUmVxdWVzdFRpbWUpXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIFJlc3Aob3B0aW9uc1BhcnNlOiBSZXF1ZXN0VXJsUGFyYW0sIHZBUElfVVJMOiBzdHJpbmcsIFJlcXVlc3RUaW1lOiBOdW1iZXIpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0ltcG9ydGFudCwgdGhpcy5zbENvbW0uc2x2aWV3LCBcIkFTUDogd2FudCB0byBwYXJzZSBcIiwgb3B0aW9uc1BhcnNlKVxyXG4gICAgICBjb25zdCByZXNwb25zZVBhcnNlID0gYXdhaXQgcmVxdWVzdFVybChvcHRpb25zUGFyc2UpXHJcbiAgICAgIGNvbnN0IHJlbUpzb24gPSByZXNwb25zZVBhcnNlLnRleHQ7XHJcbiAgICAgIHNsY29uc29sZWxvZyhEZWJ1Z0xldk1hcC5EZWJ1Z0xldmVsX0ltcG9ydGFudCwgdGhpcy5zbENvbW0uc2x2aWV3LCBcIkFTUDogUGFyc2Ugd2l0aCBodHRwLXN0YXR1cyBcIiArIHJlc3BvbnNlUGFyc2Uuc3RhdHVzLnRvU3RyaW5nKCkpXHJcbiAgICAgIGlmIChyZXNwb25zZVBhcnNlLnN0YXR1cyA9PSAyMDApIHtcclxuICAgICAgICBpZiAodGhpcy5zbENvbW0uc2xhc3B2aWV3Lkxhc3RSZXF1ZXN0VGltZSA9PSBSZXF1ZXN0VGltZSkge1xyXG4gICAgICAgICAgbGV0IHJlc3VsdGh0dHAgPSByZXNwb25zZVBhcnNlLnRleHQ7XHJcbiAgICAgICAgICB0aGlzLnNldE5ld0FTUEluaXRpYWwodHJ1ZSlcclxuICAgICAgICAgIHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwiYnJcIilcclxuICAgICAgICAgIHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwic3BhblwiLCBcIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVwiKVxyXG4gICAgICAgICAgdGhpcy5jb250ZW50RWwuY3JlYXRlRWwoXCJiclwiKVxyXG4gICAgICAgICAgLy8gdGVtcG9yYXJ5IHByZXR0eSBwcmludCBmb3Igbm90IGZvcm1hdHRlZCBqc29uLW91dHB1dCAtIHdpbGwgYmUgY2hhbmdlZCBpbiByZWwgMi54XHJcbiAgICAgICAgICByZXN1bHRodHRwID0gcmVzdWx0aHR0cC5yZXBsYWNlQWxsKFwiW1wiLCBcIltcXG5cIilcclxuICAgICAgICAgIHJlc3VsdGh0dHAgPSByZXN1bHRodHRwLnJlcGxhY2VBbGwoXCJdXCIsIFwiXFxuXVwiKVxyXG4gICAgICAgICAgcmVzdWx0aHR0cCA9IHJlc3VsdGh0dHAucmVwbGFjZUFsbChcIixcIiwgXCIsXFxuXCIpXHJcbiAgICAgICAgICBsZXQgcmVzdWx0aHR0cEFycmF5ID0gcmVzdWx0aHR0cC5zcGxpdCgnXFxuJylcclxuICAgICAgICAgIHJlc3VsdGh0dHBBcnJheS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRFbC5hcHBlbmQoZWxlbWVudClcclxuICAgICAgICAgICAgdGhpcy5jb250ZW50RWwuY3JlYXRlRWwoXCJiclwiKVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9DaGF0dHksIHRoaXMuc2xDb21tLnNsdmlldywgYEFTUC1QYXJzZXJlc3VsdDoke3Jlc3VsdGh0dHB9YClcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfQ3VycmVudF9EZXYsIHRoaXMuc2xDb21tLnNsdmlldywgYE9sZF9BU1AtUmVxdWVzdDogJHtSZXF1ZXN0VGltZX0gdnMgJHt0aGlzLnNsQ29tbS5zbGFzcHZpZXcuTGFzdFJlcXVlc3RUaW1lfWApXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICBzbGNvbnNvbGVsb2coRGVidWdMZXZNYXAuRGVidWdMZXZlbF9FcnJvciwgdGhpcy5zbENvbW0uc2x2aWV3LCBgQ2F0Y2hlcnJvciBvZiByZW1vdmluZyBjb250ZXh0ICR7dkFQSV9VUkx9YClcclxuICAgICAgc2xjb25zb2xlbG9nKERlYnVnTGV2TWFwLkRlYnVnTGV2ZWxfRXJyb3IsIHRoaXMuc2xDb21tLnNsdmlldywgZS50b1N0cmluZygpKVxyXG5cclxuICAgICAgbGV0IHRleHQgPSBuZXcgRG9jdW1lbnRGcmFnbWVudCgpXHJcbiAgICAgIHRleHQuY3JlYXRlRWwoXCJwXCIpXHJcbiAgICAgIGxldCB0ZXh0ZnJhZ21lbnQgPSAobmV3IFJhbmdlKCkpLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChlLnRvU3RyaW5nKCkpO1xyXG4gICAgICB0ZXh0LmFwcGVuZENoaWxkKHRleHRmcmFnbWVudClcclxuXHJcbiAgICAgIHRleHQuY3JlYXRlRWwoXCJwXCIpXHJcbiAgICAgIHRleHRmcmFnbWVudCA9IChuZXcgUmFuZ2UoKSkuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KFwiU2VlIGZvciBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZXJyb3ItY29kZSBvZiBodHRwOiBodHRwczovL2RlLndpa2lwZWRpYS5vcmcvd2lraS9IVFRQLVN0YXR1c2NvZGUgXCIpO1xyXG4gICAgICB0ZXh0LmFwcGVuZCh0ZXh0ZnJhZ21lbnQpXHJcblxyXG4gICAgICB0ZXh0LmNyZWF0ZUVsKFwicFwiKVxyXG4gICAgICB0ZXh0ZnJhZ21lbnQgPSAobmV3IFJhbmdlKCkpLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChvcHRpb25zUGFyc2UudXJsKTtcclxuICAgICAgdGV4dC5hcHBlbmQodGV4dGZyYWdtZW50KVxyXG5cclxuICAgICAgdGV4dC5jcmVhdGVFbChcInBcIilcclxuICAgICAgdGV4dGZyYWdtZW50ID0gKG5ldyBSYW5nZSgpKS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoU3RyaW5nKG9wdGlvbnNQYXJzZS5ib2R5KSk7XHJcbiAgICAgIHRleHQuYXBwZW5kKHRleHRmcmFnbWVudClcclxuICAgICAgdGhpcy5jb250ZW50RWwuZW1wdHkoKVxyXG4gICAgICB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcImJyXCIpXHJcbiAgICAgIHRoaXMuY29udGVudEVsLmFwcGVuZCh0ZXh0KVxyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIiwgImltcG9ydCB7IFZhdWx0LCBub3JtYWxpemVQYXRoIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7IHNsVGVtcGxhdGUgfSBmcm9tIFwiLi9jb25zdFwiXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlVGVtcGxhdGVGb2xkZXIodmF1bHQ6IFZhdWx0KSB7XHJcblxyXG4gICAgY29uc3QgdGVtcGwgPSB7XHJcbiAgICAgICAgZm9sZGVyOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IHNsVGVtcGxhdGVbXCJQYXRoQ29tbWFuZHNcIl0sXHJcbiAgICAgICAgICAgICAgICBmaWxlczogW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTTF9UcmFuc2ZlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIlNlbWFMb2dpYyh0cmFuc2ZlciAlMSB0byBlbmRwb2ludCAlMiB3aXRoIHBhcmFtICUzIClcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlNMX1Nob3dIZWxwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiU2VtYUxvZ2ljKHNob3cgaGVscClcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlNMX1Nob3dWZXJzaW9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiU2VtYUxvZ2ljKHNob3cgdmVyc2lvbilcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlNMX1RhYmxlRGVmaW5lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiU2VtYUxvZ2ljKGRlZmluZSB0YWJsZSlcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlNMX1Nob3dcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCJTZW1hTG9naWMoc2hvdyBhcyAlMSBmb3IgJTIpXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IHNsVGVtcGxhdGVbXCJQYXRoU3ltVG9rZW5Db21wYXJpc29uXCJdLFxyXG4gICAgICAgICAgICAgICAgZmlsZXM6IFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3ltVG9rZW5Db21wRXF1YWxcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCI9PVwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3ltVG9rZW5Db21wR3JlYXRlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIj5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN5bVRva2VuQ29tcEdyZWF0ZXJFcXVhbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIj49XCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTeW1Ub2tlbkNvbXBMZXNzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiPFwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3ltVG9rZW5Db21wTGVzc0VxdWFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiPD1cIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN5bVRva2VuQ29tcE5vdEVxdWFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiIT1cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogc2xUZW1wbGF0ZVtcIlBhdGhTeW1Ub2tlbkVsZW1lbnRzXCJdLFxyXG4gICAgICAgICAgICAgICAgZmlsZXM6IFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3ltVG9rZW5Bbm5vdW5jZWRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCIlXCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTeW1Ub2tlbkF0dHJpYnV0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIiRcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN5bVRva2VuQ29tbWVudEVuZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIiovXCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTeW1Ub2tlbkNvbW1lbnRTdGFydFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIi8qXCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTeW1Ub2tlbkVsZW1lbnRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCIsXCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTeW1Ub2tlbkVPTFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIlxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3ltVG9rZW5Fb1NcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCI7XCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTeW1Ub2tlbkVxdWFsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiXHUyMjYxXCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTeW1Ub2tlbkZpbHRlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIlx1MjVCQ1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3ltVG9rZW5HbG9iYWxNYXhcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCIrXHUyMjFFXCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTeW1Ub2tlbkdsb2JhbE1pblwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIi1cdTIyMUVcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN5bVRva2VuSUREZXZpZGVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiLlwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3ltVG9rZW5JbnN0YW5jZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIkBcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN5bVRva2VuSW50ZXJ2YWxcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCJ8XCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTeW1Ub2tlbkxpbWl0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiXHUwMTQxXCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTeW1Ub2tlbkxpbmVDb21tZW50XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiLy9cIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN5bVRva2VuUmV2ZXJzZUlERGV2aWRlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIjpcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN5bVRva2VuU3BhY2VcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCIgXCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTeW1Ub2tlblZlcnNpb25cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCIjXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IHNsVGVtcGxhdGVbXCJQYXRoU3ltVG9rZW5GdW5jXCJdLFxyXG4gICAgICAgICAgICAgICAgZmlsZXM6IFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRnVuY1Rva2VuQ291bnRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCJDb3VudFwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRnVuY1Rva2VuTWF4XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiTWF4XCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJGdW5jVG9rZW5NZWFuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiTWVhblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRnVuY1Rva2VuTWluXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiTWluXCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJGdW5jVG9rZW5TdW1cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCJTdW1cIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkZ1bmNUb2tlblVuRGVmXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiX0Z1bmNVbmRlZlwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBzbFRlbXBsYXRlW1wiUGF0aFN5bVRva2VuTWF0aFwiXSxcclxuICAgICAgICAgICAgICAgIGZpbGVzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN5bVRva2VuRnVuY3Rpb25DbG9zZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIilcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN5bVRva2VuRnVuY3Rpb25PcGVuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiKFwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3ltVG9rZW5PcERpdmlkZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIi9cIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN5bVRva2VuT3BNaW51c1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIi1cIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN5bVRva2VuT3BNdWx0aXBseVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIipcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN5bVRva2VuT3BQbHVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiK1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBzbFRlbXBsYXRlW1wiUGF0aFN5bVRva2VuUmVmVG9rZW5cIl0sXHJcbiAgICAgICAgICAgICAgICBmaWxlczogW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJSZWZUb2tlbkFsbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIkFsbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiUmVmVG9rZW5Bbm5vdW5jZWRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCJBbm5vdW5jZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlJlZlRva2VuQ2hpbGRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCJDaGlsZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiUmVmVG9rZW5MZWFmXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiTGVhZlwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiUmVmVG9rZW5SYW5nZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIlJhbmdlXCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJSZWZUb2tlblRoaXNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCJUaGlzXCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJSZWZUb2tlblVuZGVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiVW5kZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlJlZlRva2VuVXNlZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIlVzZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlJlZlRva2VuVmFsdWVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCJWYWx1ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBzbFRlbXBsYXRlW1wiUGF0aFN5bVRva2VuVGVybXNcIl0sXHJcbiAgICAgICAgICAgICAgICBmaWxlczogW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTeW1Ub2tlbkFkdmljZUNsb3NlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiIVwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3ltVG9rZW5BZHZpY2VPcGVuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiXHUwMEExXCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTeW1Ub2tlbkFuZENsb3NlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiXVwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3ltVG9rZW5BbmRPcGVuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiW1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3ltVG9rZW5DaGVja0Nsb3NlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiP1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3ltVG9rZW5DaGVja09wZW5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCJcdTAwQkZcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlN5bVRva2VuRGlhbGVjdERlZmluZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIlx1MjI2MVwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3ltVG9rZW5FcXVhbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIjo9XCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTeW1Ub2tlbkdyb3VwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiflwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3ltVG9rZW5PckNsb3NlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwifVwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3ltVG9rZW5Pck9wZW5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCJ7XCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTeW1Ub2tlblRpbWVBZnRlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIlx1MjFGRFwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU3ltVG9rZW5UaW1lQmVmb3JlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiXHUyMUZFXCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTeW1Ub2tlblRpbWVQYXJhbGxlbEFmdGVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiXHUyOTYyXCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTeW1Ub2tlblRpbWVQYXJhbGxlbEJlZm9yZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIlx1Mjk2NFwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBmb3IgKHZhciBteWZvbGRlciA9IDA7IG15Zm9sZGVyIDwgdGVtcGwuZm9sZGVyLmxlbmd0aDsgbXlmb2xkZXIrKykge1xyXG4gICAgICAgIGZvciAodmFyIG15ZmlsZSA9IDA7IG15ZmlsZSA8IHRlbXBsLmZvbGRlcltteWZvbGRlcl0uZmlsZXMubGVuZ3RoOyBteWZpbGUrKykge1xyXG5cclxuICAgICAgICAgICAgdmF1bHQuY3JlYXRlRm9sZGVyKHRlbXBsLmZvbGRlcltteWZvbGRlcl0ubmFtZSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUubG9nKGVycm9yKSlcclxuICAgICAgICAgICAgdmF1bHQuY3JlYXRlKFxyXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplUGF0aCh0ZW1wbC5mb2xkZXJbbXlmb2xkZXJdLm5hbWUgKyBcIi9cIiArIHRlbXBsLmZvbGRlcltteWZvbGRlcl0uZmlsZXNbbXlmaWxlXS5uYW1lICsgXCIubWRcIiksXHJcbiAgICAgICAgICAgICAgICB0ZW1wbC5mb2xkZXJbbXlmb2xkZXJdLmZpbGVzW215ZmlsZV0uY29udGVudFxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiBjb25zb2xlLmxvZyhlcnJvcikpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIiwgImltcG9ydCB7IFZhdWx0LCBub3JtYWxpemVQYXRoIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7IHNsVGVtcGxhdGUgfSBmcm9tIFwiLi9jb25zdFwiXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlRXhhbXBsZXModmF1bHQ6IFZhdWx0KSB7XHJcblxyXG4gICAgY29uc3QgdGVtcGwgPSB7XHJcbiAgICAgICAgZm9sZGVyOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IHNsVGVtcGxhdGVbXCJQYXRoRXhhbXBsZXNCYXNpY1wiXSxcclxuICAgICAgICAgICAgICAgIGZpbGVzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIjAwX092ZXJ2aWV3XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiSW4gdGhlIG5leHQgZXhtYXBsZSBmaWxlcyB0aGVyZSBhcmUgYSBmZXcgYW5kIHNpbXBsZSBleGFtcGxlcyB0byB1c2UgU2VtYUxvZ2ljIGZvciBiaXVsZGluZyBzZW1hbnRpYyBsb2dpY2FsIHJ1bGVzZXRzLiBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkluIGdlbmVyYWwgdGhlIGV4YW1wbGVzIHNob3VsZCBzaG93IHRoZSBvcGVyYXRpbmcgcHJpbmNpcGxlIG9wZiBTZW1hTG9naWMgYW5kIGhhdmUgaW4gbWluZCB0aGF0IHRoZSBjaGFyYWN0ZXJzIG9mIHRoZSBzeW50YXggXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvZiB0aGUgdGVjaG5pY2FsIGxhbmd1YWdlIGNvdWxkIGJlIHJlcGxhY2VkIGJ5IGZvcm1hbCAobW9yZSBuYXR1cmFsKSBsYW5ndWFnZSBhcyBpdCBzaG93biBpbiBleGFtcGxlIGZyb20gMzAgdXAuIFxcblxcblwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiMHggLSAxeDogU2ltcGxlIHJ1bGVzIGFuZCBzb21lIG9mIHRoZSBmdW5jdGlvbmFsdGllc1xcblwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiMnggLSAzeDogQ2FzY2FkaW5nIHJ1bGVzIGFuZCBjb21iaW5pbmcgd2l0aCBmdW5jdGlvbnNcXG5cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIjR4IC0gNXg6IEZvcm1hbCBsYW5ndWFnZSBleGFtcGxlc1xcblwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiOHggICAgIDogQWRkaXRpb25hbCB0ZWNobmljYWwgaW5mb3JtYXRpb24gZm9yIHZhbHVlcyBhbmQgc28gb25cXG4gXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCI5eCAgICAgOiBMaXR0bGUgR2xvc3NhciBmb3IgU3ltVG9rZW5zXFxuXFxuXFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJQbGVhc2Uga2VlcCBpbiBtaW5kIHRoYXQgdGhpcyBleGFtcGxlcyBhcmUgd29yayBpbiBwcm9ncmVzcyBhbmQgd2UgdHJ5IHRvIGV4cGFuZCB0aGVtIHRvIHNob3cgYWxsIHRoZSBmdW5jdGlvbmFsaXR5IG9mIFNlbWFMb2dpYyBpbiBmdXR1cmUgcmVsZWFzZXMgb2YgdGhpcyBwbHVnaW4uIFxcblxcblwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiV2UgYWxzbyB3b3JraW5nIG9uIFtvdXIgd2Vic2l0ZV0od3d3LlNlbWFMb2dpYy5kZSkgLSB3aGljaCBpcyBjdXJyZW50bHkgb25seSBhdmFpbGFibGUgaW4gZ2VybWFuIC0gIGFuZCBhcmUgd3JpdGluZyBhbiBvZmZpY2lhbCBkb2N1bWVudCBmb3IgYWxsIHN5bnRheCBhbmQgc3RydWN0dXJlcyBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInlvdSBhcmUgYWJsZSB0byB1c2UgaW4gU2VtYUxvZ2ljIG5vdyBhbmQgYWJvdXQgcGxhbm5lZCBmdW50aW9uYWxpdGllcy4gQnV0IHdlIGNhbiBub3QgZG8gZXZlcnl0aGluZyBhdCB0aGUgc2FtZSB0aW1lLlxcblxcblwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVGVjaG5pY2FsIEluZm9ybWF0aW9uIGZvciB1c2luZyBTZW1hTG9naWMgaW4gb2JzaWRpYW46IFdpdGggQUxUICsgVCB5b3UgY2FuIGFjY2VzcyB0byB0aGUgU2VtYUxvZ2ljVG9rZW4tVGVtcGxhdGVzICFcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIjAxX0FORC1SdWxlc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIkRlZmluaW5nIGEgc2ltcGxlIGFuZC1ydWxlIGluIHN0YW5kYXJkIHRlY2huaWNhbCBsYW5ndWFnZSA6IEEgaXMgdHJ1ZSAtIGlmIEIsQyBhbmQgRCBhcmUgdHJ1ZSBcXG5cXG4tLS1cXG5cXG5BIFtCLCBDLCBEXVxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiMDJfT1ItUnVsZXNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCJEZWZpbmluZyBhIHNpbXBsZSBvci1ydWxlIGluIHN0YW5kYXJkIHRlY2huaWNhbCBsYW5ndWFnZSA6IEEgaXMgdHJ1ZSAtIGlmIEIsQyBvciBEIGFyZSB0cnVlIFxcblxcbi0tLVxcblxcblwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQSAxfDEge0IsIEMsIER9XFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcXG5JbiBhbiBPUi1SdWxlIGl0IGlzIHBvc3NpYmxlIHRvIGRlZmluZSBob3cgbWFueSBvZiB0aGUgc3ltYm9scyAoQixDLEQpIG11c3QgYmUgdHJ1ZSB3aXRoIHRoZSBudW1iZXIgYmVmb3JlIGFuZCBhZnRlciB0aGUgcGlwZS1zeW1ib2wuXFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcXG5FIDF8MiB7RSxGLEd9XFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcXG5UaGlzIE9SLVJ1bGUgbWVhbnMgdGhhdCBvbmUgb3IgdHdvIG9mIHRoZSB0aHJlZSBzeW1ib2xzIChFLEYsRykgbXVzdCBiZSB0cnVlLCBzbyB0aGF0IEUgaXN0IHRydWUuIFwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiSWYgbm9uZSBvZiB0aGUgc3ltYm9scyBpcyB0cnVlIG9yIGFsbCBvZiB0aGVtLCBFIHdpbGwgYmUgZmFsc2UgYXMgd2VsbC5cXG5cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIklmIHlvdSBkb24ndCB1c2UgZnJvbXx0byBpbiBhbiBvci1ydWxlIHRoZW4gaXQgaXMgcmVwbGFjZWQgYnkgZnJvbSBvbmUgdG8gYWxsIHN5bWJvbHMgLSB3aGF0IG1lYW5zIHRoYXQgYSBtaW5pbXVtIG9mIG9uZSBvZiB0aGUgc3ltYm9scyBoYXMgdG8gYmUgdHJ1ZSBzbyB0aGF0IEUgaXMgdHJ1ZS4gXCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCIwM19Hcm91cHNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCJJZiB5b3UgZG9uJ3Qgd2FudCB0byByZXVzZSBzb21lIHN5bWJvbHMgd2l0aCBpbiBkaWZmZXJlbnQgcnVsZSwgaXQgaXQgcG9zc2libGUgdG8gZGVmaW5lIGdyb3VwcyB3aGljaCB3aWxsIGJlIGluc2VydGVkIGluIHJ1bGVzIGluc3RlYWQgb2YgdGhlIGdyb3VwcyBuYW1lXFxuXFxuLS0tXFxuXFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJNeUdyb3VwIH4gRWxlbTEsIEVsZW0yLCBFbGVtMyB+XFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJNeU9wdGlvbnMgMXwxIHtNeUdyb3VwfVxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiMDRfRHluYW1pYyBncm91cHNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCJJdCBpcyBhbHNvIHBvc3NpYmxlIHRvIGRlZmluZSBncm91cHMgZm9yIHVzaW5nIHRoZW0gaW4gcnVsZXMsIGV2ZW4gaWYgeW91IGRvIG5vdCBrbm93IHdoaWNoIHN5bWJvbHMgYXJlIGluIGJ5IHVzaW5nIGFuIGludGVydmFsLlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVGhlbiB0aGUgbWVtYmVycyBvZiB0aGUgZ3JvdXAgYXJlIGRlZmluZWQgYnkgdGhlIHJ1bGVzIGR5bmFtaWNhbGx5Llxcblxcbi0tLVxcblxcblwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTXlHcm91cCB+IEVsZW0xfEVsZW00IH5cXG5cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkVsZW0yIFtBLEJdXFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJFTGVtNCB7QyxEfVxcblwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiTXlPcHRpb25zIDF8MSB7TXlHcm91cH1cXG5cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcbkluIHRoaXMgY2FzZSB0aGUgcnVsZXNldCBvbmx5IGtub3dzIHRoZSBzeW1ib2xzIEVsZW0yIGFuZCBFbGVtNCwgd2hpY2ggYXJlIGluaGVyaXRlZCBieSB0aGUgaW50ZXJ2YWwgZnJvbSBFbGVtMSB0aWxsIEVsZW00LiBTbyB0aGUgZ3JvdXAgaXMgcmVwbGFjZWQgYnkgRWxlZW0yIGFuZCBFbGVtNC5cXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIjA1X1RpbWUgZGVwZW5kZW5jaWVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiSXQgaXQgcG9zc2libGUgdG8gZGVmaW5lIHRpbWUgZGVwZW5kZW5jaWVzIGZvciB0aGUgdXNlZCBzeW1ib2xzLiBTbyB0aGUgcmVzdWx0cyBoYXZlIHRvIGJlICd0aW1lIG9yZGVyZWQnLiBcXG5cXG4tLS1cXG5cXG5cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkEgXHUyMUZFIEI7XFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaGlzIG1lYW5zIHRoYXQgaW4gYSBzb2x1dGlvbiBBIG11c3QgYmUgc29ydGVkIGJlZm9yZSBCIGFuZCBpbiBjb21iaW5hdGlvbiB3aXRoIHRpbWUgbGluZXMgaXQgbWVhbnMgdGhhdCBBIGhhdmUgdG8gYmUgZnVsbGZpbGxlZCBjb21wbGV0ZWx5IGJlZm9yZSBCIGJlZ2lucy5cXG5cXG5cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkEgXHUyOTY0IEI7XFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaGlzIG1lYW5zIHRoYXQgaW4gYSBzb2x1dGlvbiBBIG11c3QgYmUgc29ydGVkIGJlZm9yZSBCIGFuZCBpbiBjb21iaW5hdGlvbiB3aXRoIHRpbWUgbGluZXMgaXQgbWVhbnMgdGhhdCBBIGhhdmUgdG8gYmUgZnVsbGZpbGxlZCBjb21wbGV0ZWx5IGJlZm9yZSBCIGVuZHMuXFxuXFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJJZiB5b3Ugd2FudCB0byBkZWZpbmUgdGhpcyB0aW1lIGRlcGVuZGVuY2llcyB2aWNlIHZlcnNhIHlvdSBjb3VsZCB1c2UgZm9yIGFmdGVyIFx1MjFGRCBvciBmb3IgcGFyYWxsZWwgYWZ0ZXIgXHUyOTYyLlxcblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiMTBfVmFsdWVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiVGhlcmUgYXJlIGEgbG90IG9mIHBvc3NpYmlsaXRlcyB0byBwdXQgdmFsdWVzIHRvIHRoZSBhdHRyaWJ1dGVzIG9mIGEgc3ltYm9sIG9yIHRoZSBzeW1ib2wgaXRzZWxmLlxcblxcbi0tLVxcblxcblwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQS5hdHRyaWIgXHUyMjYxIDE1XFxuXFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJUaGlzIHN0YXRlbWVudCB3aWxsIHB1dCBhIHZhbHVlIG9mIDE1IHRvIHRoZSBhdHRyaWJ1dGUgYXR0cmliIG9mIHRoZSBzeW1ib2wgQS4gRm9yIGV4YW1wbGUgeW91IGNhbiBkZWZpbmUgYSBzeW1ib2wgR2VybWFueSBhbmQgcHV0IGEgdGF4IHJhdGUgdG8gdGhpcyBzeW1ib2wgbGlrZSBHZXJtYXkuU2FsZXMgVGF4ID0gMTlcXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIjE1X1VzaW5nIFRhYmxlc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIllvdSBjYW4gcmVhZGluZyB0YWJsZXMgaW4gbWFueSBkaWZmZXJlbnQgdmFyaWFudHMgdG8gdXBsb2FkIHJ1bGVzIGFuZCByZWxhdGlvbnMgXFxuXFxuLS0tXFxuXFxuICAgU2VtYUxvZ2ljKERlZmluZSBOdGFibGUsIGhlYWRlcigobW9kdWxlX2V4YW1fbnVtYmVyX1x1MjAyNiksIFtleGFtX251bWJlcl9cdTIwMjZdKSwgb3JkZXIoMSwgMikpXFxuXFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ8IG1vZHVsZV9leGFtX251bWJlciB8IGV4YW1fbnVtYmVyIHxcXG58IC0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tIHxcXG58IDEwMzIgfCAxMDMyMSB8XFxufCAxMDMwIHwgMTAzMTEgfFxcbnwgMTAyMSB8IDEwMjEzIHxcXG58IDEwMjEgfCAxMDIxNSB8XFxufCAxMDIxIHwgMTAyMTYgfFxcblxcbiBcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIjIwX0Nhc2NhZGluZyBydWxlc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIkl0IGlzIHBvc3NpYmxlIHRvIGNhc2NhZGUgcnVsZSBvbmx5IGJ5IHVzaW5nIHNhbWUgc3ltYm9sbmFtZSBmb3IgYSBuZXcgcnVsZSA6IFxcbkEgaXMgdHJ1ZSAtIGlmIEIgb3IgQyBpcyB0cnVlOyBcXG5CIGlzIHRydWUgLSBpZiBCMSBvciBCMiBpcyB0cnVlXFxuIEMgaXMgdHJ1ZSAtIGlmIEMxIGFuZCBDMiBhcmUgdHJ1ZSBcXG5cXG4tLS1cXG5cXG5BIFtCLCBDXVxcbkIge0IxICwgQjJ9XFxuQyBbQzEgLCBDMl1cIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIjQwX0Zvcm1hbCBMYW5ndWFnZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIkl0IGlzIHBvc3NpYmxlIHJlcGxhY2UgdGVjaG5pY2FsIFN5bXRva2VucyBmb3IgdXNpbmcgZm9ybWFsIGxhbmd1YWdlLFxcbnNvIGl0IGlzcG9zc2libGUgdG8gY2hhbmdlIGRpYWxlY3RzIGFzIHlvdSB3YW50IHdpdGggd29yZHMgeW91IHVzZSAtIG9mZmljYWwgZGlhbGVjdHMgYXJlIHVuZGVyIGRldmVsb3BtZW50ICBcXG5cXG4tLS1cXG5cXG5cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkRhcyBTdHVkaXVtIGJlc3RlaHQgYXVzIGVpbmVyIEFic2NobHVzc2FyYmVpdCB1bmQgdW1mYXNzdCBGYWNoc2VtZXN0ZXIgMSBiaXMgRmFjaHNlbWVzdGVyIDQgYWxzIEVsZW1lbnRlLlxcblxcblxcblN5bVRva2VuU3BhY2VcdTIyNjFlaW5lciBcXG5TeW1Ub2tlblNwYWNlXHUyMjYxRGFzIFxcblN5bVRva2VuSW50ZXJ2YWxcdTIyNjFiaXMgXFxuU3ltVG9rZW5Hcm91cFx1MjI2MSB1bWZhc3N0XFxuU3ltVG9rZW5Hcm91cFx1MjI2MSBhbHMgRWxlbWVudGVcXG5TeW1Ub2tlbkFuZE9wZW5cdTIyNjEgYmVzdGVodCBhdXNcXG5TeW1Ub2tlbkVsZW1lbnRcdTIyNjEgdW5kXFxuU3ltVG9rZW5BbmRDbG9zZVx1MjI2MS5cXG5cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlN5bVRva2VuT3JDbG9zZVx1MjI2MS5cXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiOTBfU2hvcnQgT3ZlcnZpZXcgVGVjaG5pY2FsIExhbmd1YWdlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCJUaGlzIGlzIGEgc2hvcnQgb3ZlcnZpZXcgb3ZlciB0aGUgbWFpbiBUb2tlbnMgeW91IGNvdWxkIHVzZSBpbiBTZW1hTG9naWMgYW5kIHRoZWlyIFN5bVRva2VuczpcXG5cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ki9cclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF1cclxuICAgIH1cclxuXHJcbiAgICBmb3IgKHZhciBteWZvbGRlciA9IDA7IG15Zm9sZGVyIDwgdGVtcGwuZm9sZGVyLmxlbmd0aDsgbXlmb2xkZXIrKykge1xyXG4gICAgICAgIGZvciAodmFyIG15ZmlsZSA9IDA7IG15ZmlsZSA8IHRlbXBsLmZvbGRlcltteWZvbGRlcl0uZmlsZXMubGVuZ3RoOyBteWZpbGUrKykge1xyXG5cclxuICAgICAgICAgICAgdmF1bHQuY3JlYXRlRm9sZGVyKHRlbXBsLmZvbGRlcltteWZvbGRlcl0ubmFtZSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUubG9nKGVycm9yKSlcclxuICAgICAgICAgICAgdmF1bHQuY3JlYXRlKFxyXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplUGF0aCh0ZW1wbC5mb2xkZXJbbXlmb2xkZXJdLm5hbWUgKyBcIi9cIiArIHRlbXBsLmZvbGRlcltteWZvbGRlcl0uZmlsZXNbbXlmaWxlXS5uYW1lICsgXCIubWRcIiksXHJcbiAgICAgICAgICAgICAgICB0ZW1wbC5mb2xkZXJbbXlmb2xkZXJdLmZpbGVzW215ZmlsZV0uY29udGVudFxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiBjb25zb2xlLmxvZyhlcnJvcikpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSw2QkFBQUE7QUFBQSxFQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUMsbUJBQ007OztBQ0ROLElBQUFDLG1CQUF5Rzs7O0FDQ2xHLElBQU0sZUFBZTtBQUFBLEVBQzNCLE1BQU07QUFBQSxFQUNOLE9BQU87QUFBQSxFQUNQLFVBQVU7QUFBQSxFQUNWLE1BQU07QUFBQSxFQUNOLGFBQWE7QUFBQSxFQUNiLE9BQU87QUFBQSxFQUNQLFNBQVM7QUFBQSxFQUNULGFBQWE7QUFBQSxFQUNiLGVBQWU7QUFBQSxFQUNmLFFBQVE7QUFBQSxFQUNSLEtBQUs7QUFBQSxFQUNMLGFBQWE7QUFBQSxFQUNiLHdCQUF3QjtBQUFBLEVBQ3hCLFVBQVU7QUFBQSxFQUNWLGNBQWM7QUFBQSxFQUNkLFlBQVk7QUFBQSxFQUNaLFFBQVE7QUFBQSxFQUNSLGFBQWE7QUFBQSxFQUNiLDBCQUEwQjtBQUFBLEVBQzFCLFlBQVk7QUFBQSxFQUNaLGdCQUFnQjtBQUNqQjtBQUVPLElBQU0saUJBQWlCO0FBQUEsRUFDN0IsZ0JBQWdCO0FBQ2pCO0FBSU8sSUFBSSxtQkFBbUI7QUFBQSxFQUM3QixlQUFlO0FBQUEsRUFDZixhQUFhO0FBQUEsRUFDYixVQUFVO0FBQUEsRUFDVixhQUFhO0FBQUEsRUFDYixxQkFBcUI7QUFBQSxFQUNyQixZQUFZO0FBQUEsRUFDWixRQUFRO0FBQUEsRUFDUixXQUFXO0FBQUEsRUFDWCxZQUFZO0FBQUEsRUFDWixVQUFVO0FBQUEsRUFDVixrQkFBa0I7QUFBQSxFQUNsQixlQUFlO0FBQ2hCO0FBSU8sSUFBTSxnQkFBNEI7QUFBQSxFQUN4QyxDQUFDLGlCQUFpQixnQkFBZ0Is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QUFPO0FBQUEsVUFDSDtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDYjtBQUFBLFVBQ0E7QUFBQSxZQUNJLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiO0FBQUEsVUFDQTtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDYjtBQUFBLFFBQ0o7QUFBQSxNQUNKO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTSxXQUFXO0FBQUEsUUFDakIsT0FBTztBQUFBLFVBQ0g7QUFBQSxZQUNJLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiO0FBQUEsVUFDQTtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDYjtBQUFBLFVBQ0E7QUFBQSxZQUNJLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiO0FBQUEsVUFDQTtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDYjtBQUFBLFFBQ0o7QUFBQSxNQUNKO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTSxXQUFXO0FBQUEsUUFDakIsT0FBTztBQUFBLFVBQ0g7QUFBQSxZQUNJLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiO0FBQUEsVUFDQTtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDYjtBQUFBLFVBQ0E7QUFBQSxZQUNJLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiO0FBQUEsVUFDQTtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDYjtBQUFBLFVBQ0E7QUFBQSxZQUNJLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiO0FBQUEsVUFDQTtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDYjtBQUFBLFVBQ0E7QUFBQSxZQUNJLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiO0FBQUEsVUFDQTtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDYjtBQUFBLFVBQ0E7QUFBQSxZQUNJLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiO0FBQUEsVUFDQTtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDYjtBQUFBLFVBQ0E7QUFBQSxZQUNJLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiO0FBQUEsVUFDQTtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDYjtBQUFBLFVBQ0E7QUFBQSxZQUNJLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiO0FBQUEsUUFDSjtBQUFBLE1BQ0o7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNLFdBQVc7QUFBQSxRQUNqQixPQUFPO0FBQUEsVUFDSDtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDYjtBQUFBLFVBQ0E7QUFBQSxZQUNJLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiO0FBQUEsVUFDQTtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDYjtBQUFBLFVBQ0E7QUFBQSxZQUNJLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiO0FBQUEsUUFDSjtBQUFBLE1BQ0o7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNLFdBQVc7QUFBQSxRQUNqQixPQUFPO0FBQUEsVUFDSDtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDYjtBQUFBLFVBQ0E7QUFBQSxZQUNJLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiO0FBQUEsVUFDQTtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDYjtBQUFBLFVBQ0E7QUFBQSxZQUNJLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiO0FBQUEsUUFDSjtBQUFBLE1BQ0o7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNLFdBQVc7QUFBQSxRQUNqQixPQUFPO0FBQUEsVUFDSDtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDYjtBQUFBLFVBQ0E7QUFBQSxZQUNJLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiO0FBQUEsVUFDQTtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDYjtBQUFBLFVBQ0E7QUFBQSxZQUNJLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiO0FBQUEsVUFDQTtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDYjtBQUFBLFVBQ0E7QUFBQSxZQUNJLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiO0FBQUEsUUFDSjtBQUFBLE1BQ0o7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNLFdBQVc7QUFBQSxRQUNqQixPQUFPO0FBQUEsVUFDSDtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDYjtBQUFBLFVBQ0E7QUFBQSxZQUNJLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiO0FBQUEsVUFDQTtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDYjtBQUFBLFVBQ0E7QUFBQSxZQUNJLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiO0FBQUEsVUFDQTtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDYjtBQUFBLFVBQ0E7QUFBQSxZQUNJLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiO0FBQUEsVUFDQTtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixTQUFTO0FBQUEsVUFDYjtBQUFBLFVBQ0E7QUFBQSxZQUNJLE1BQU07QUFBQSxZQUNOLFNBQVM7QUFBQSxVQUNiO0FBQUEsVUFDQTtBQUFBLFlBQ0ksTUFBTTtBQUFBLFlBQ04sU0FBUztBQUFBLFVBQ2I7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LFFBQ1IsU0FBUztBQUFBLFVBQ1IsZ0JBQWdCO0FBQUEsUUFDakI7QUFBQSxNQUNEO0FBQUEsSUFDRDtBQUVBLGlCQUFhLFlBQVksc0JBQXNCLEtBQUssT0FBTyxRQUFRLFlBQVk7QUFDL0UsUUFBSTtBQUNILFlBQU0sZ0JBQWdCLFVBQU0sNkJBQVcsWUFBWTtBQUNuRCxtQkFBYSxZQUFZLHdCQUF3QixLQUFLLE9BQU8sUUFBUSxxQ0FBcUMsY0FBYyxPQUFPLFNBQVMsR0FBRztBQUFBLElBQzVJLFNBQ08sR0FBUDtBQUNDLG1CQUFhLFlBQVksa0JBQWtCLEtBQUssT0FBTyxRQUFRLHVCQUF1QixnQkFBZ0I7QUFDdEcsbUJBQWEsWUFBWSxrQkFBa0IsS0FBSyxPQUFPLFFBQVEsRUFBRSxTQUFTLENBQUM7QUFBQSxJQUM1RTtBQUFBLEVBQ0Q7QUFFRDsiLAogICJuYW1lcyI6IFsiU2VtYUxvZ2ljUGx1Z2luQ29tbSIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJyb3ciLCAiU2VtYUxvZ2ljVmlldyIsICJpbXBvcnRfb2JzaWRpYW4iLCAicGFyc2VDb21tYW5kcyIsICJpbXBvcnRfdmlldyIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImFwcCIsICJTZW1hTG9naWNQbHVnaW5Db21tIiwgInZhbHVlIiwgImxlYWYiLCAiU2VtYUxvZ2ljVmlldyJdCn0K
